[{"title":"Android的可展开式通知","url":"/blog/2017/04/20/Expandable-Notifications-for-Android/","content":"<p><a href=\"http://codeversed.com/expandable-notifications-android/\">搬运自codeversed</a></p>\n<h2 id=\"可扩展通知\"><a href=\"#可扩展通知\" class=\"headerlink\" title=\"可扩展通知\"></a>可扩展通知</h2><p>Android 4.1给我们提供了更强大的功能，如可展开式通知和操作按钮。我们可以使用丰富的样式，甚至创建自定义的可展开式通知。在尺寸和布局上都有足够的灵活度来创建完美的可展开式通知。</p>\n<h3 id=\"NotificationManager\"><a href=\"#NotificationManager\" class=\"headerlink\" title=\"NotificationManager\"></a>NotificationManager</h3><p>安卓的通知是通过Notification类来创建的。在使用它之前需要先使用正确的Context来获得NotificationManager，Context由使用场景决定，可以是activity，也可以是service。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NotificationManager</span> <span class=\"variable\">notificationManager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Builder相关类\"><a href=\"#Builder相关类\" class=\"headerlink\" title=\"Builder相关类\"></a>Builder相关类</h3><p><strong>Notification.Builder</strong> – 这个类在Android 3.0 Honeycomb [API 11]被添加。所以如果想支持更老的安卓版本，得换成老掉牙的NotificationCompact。</p>\n<p><strong>NotificationCompat.Builder</strong> – 这个类在<a href=\"http://developer.android.com/tools/support-library/index.html\">Support Library</a> v4中被定义(适配Android 1.6+)。</p>\n<p>NotificationCompact.Builder像其它builder类一样，提供了创建Notification对象的接口。可以使用PendingIntent来指定点击后的intent行为。PendingIntent就像一个token，用SetCotentIntent方法来传给builder。如果需要一些额外的行为，比如收到邮件通知后想直接回复，可以通过builder的addAction方法来添加三个额外的行为。一旦你完成了Notification的构建，下一步你会看到它是如何被调用的。</p>\n<p>为了正确的处理交叉进程，我们可以考虑使用Android Support Library v4中的<a href=\"http://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html\">TaskStackBuilder</a>类。</p>\n<h3 id=\"Notification-views\"><a href=\"#Notification-views\" class=\"headerlink\" title=\"Notification views\"></a>Notification views</h3><p>Normal View – A notification in normal view appears in an area that’s up to 64 dp tall. Even if you create a notification with a big view style, it will appear in normal view until it’s expanded.</p>\n<pre><code>1. Content title\n2. Large icon\n3. Content text\n4. Content info\n5. Small icon\n6. Notification time\n</code></pre>\n<p>Big View – A notification’s big view appears only when the notification is expanded, which happens when the notification is at the top of the notification drawer, or when the user expands the notification with a gesture.  Expanded notifications were first introduced in Android 4.1 JellyBean [API 16].  Expandable notifications were designed to support rich notification style objects called Notification.Style.</p>\n<pre><code>7. Details area\n</code></pre>\n<h3 id=\"Creating-Notifications\"><a href=\"#Creating-Notifications\" class=\"headerlink\" title=\"Creating Notifications\"></a>Creating Notifications</h3><h4 id=\"Normal-View\"><a href=\"#Normal-View\" class=\"headerlink\" title=\"Normal View\"></a>Normal View</h4><p>One point to remember is that all notification objects, including a Normal View, are required to have a small icon, a title, and detail text.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Creates an explicit intent for an ResultActivity to receive.</span></span><br><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">resultIntent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// This ensures that the back button follows the recommended</span></span><br><span class=\"line\"><span class=\"comment\">// convention for the back key.</span></span><br><span class=\"line\"><span class=\"type\">TaskStackBuilder</span> <span class=\"variable\">stackBuilder</span> <span class=\"operator\">=</span> TaskStackBuilder.create(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the back stack for the Intent (but not the Intent itself)</span></span><br><span class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack</span></span><br><span class=\"line\">stackBuilder.addNextIntent(resultIntent);</span><br><span class=\"line\"><span class=\"type\">PendingIntent</span> <span class=\"variable\">resultPendingIntent</span> <span class=\"operator\">=</span> stackBuilder.getPendingIntent(</span><br><span class=\"line\">         <span class=\"number\">0</span>, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the final Notification object.</span></span><br><span class=\"line\">Notification myNotification <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        .setSmallIcon(R.drawable.ic_launcher)</span><br><span class=\"line\">        .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        .setLargeIcon(remote_picture)</span><br><span class=\"line\">        .setContentIntent(resultPendingIntent)</span><br><span class=\"line\">        .setContentTitle(<span class=\"string\">&quot;Normal Notification&quot;</span>)</span><br><span class=\"line\">        .setContentText(<span class=\"string\">&quot;This is an example of a Normal Style.&quot;</span>).build();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2017/04/20/Expandable-Notifications-for-Android/normal_notification.png\" class=\"\" title=\"Normal Notification\">\n\n<h4 id=\"Big-View\"><a href=\"#Big-View\" class=\"headerlink\" title=\"Big View\"></a>Big View</h4><p>You will use this style the most when setting up expandable notifications.  This Notification.Style class contains three direct subclasses which are:</p>\n<p>Big Text Style – Displays a large text block to show the user more details on the item at hand.<br>Big Picture Style – Displays a bitmap up to 256 dp tall similar to a screenshot notification.<br>Inbox Style – Displays rows of text like a listView similar to the Gmail notification for multiple emails.<br>To apply a rich notification style to the notification, you first need to create the style object itself.  For this example I am showing you the BigPictureStyle subclass.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Bitmap</span> <span class=\"variable\">remote_picture</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the style object with BigPictureStyle subclass.</span></span><br><span class=\"line\">NotificationCompat.<span class=\"type\">BigPictureStyle</span> <span class=\"variable\">notiStyle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> </span><br><span class=\"line\">        <span class=\"title class_\">NotificationCompat</span>.BigPictureStyle();</span><br><span class=\"line\">notiStyle.setBigContentTitle(<span class=\"string\">&quot;Big Picture Expanded&quot;</span>);</span><br><span class=\"line\">notiStyle.setSummaryText(<span class=\"string\">&quot;Nice big picture.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        remote_picture = BitmapFactory.decodeStream(</span><br><span class=\"line\">                (InputStream) <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(sample_url).getContent());</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Add the big picture to the style.</span></span><br><span class=\"line\">notiStyle.bigPicture(remote_picture);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Creates an explicit intent for an ResultActivity to receive.</span></span><br><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">resultIntent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// This ensures that the back button follows the recommended </span></span><br><span class=\"line\"><span class=\"comment\">// convention for the back key.</span></span><br><span class=\"line\"><span class=\"type\">TaskStackBuilder</span> <span class=\"variable\">stackBuilder</span> <span class=\"operator\">=</span> TaskStackBuilder.create(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the back stack for the Intent (but not the Intent itself).</span></span><br><span class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack.</span></span><br><span class=\"line\">stackBuilder.addNextIntent(resultIntent);</span><br><span class=\"line\"><span class=\"type\">PendingIntent</span> <span class=\"variable\">resultPendingIntent</span> <span class=\"operator\">=</span> stackBuilder.getPendingIntent(</span><br><span class=\"line\">        <span class=\"number\">0</span>, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\"> </span><br><span class=\"line\">Notification myNotification <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        .setSmallIcon(R.drawable.ic_launcher)</span><br><span class=\"line\">        .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        .setLargeIcon(remote_picture)</span><br><span class=\"line\">        .setContentIntent(resultPendingIntent)</span><br><span class=\"line\">        .setContentTitle(<span class=\"string\">&quot;Big Picture Normal&quot;</span>)</span><br><span class=\"line\">        .setContentText(<span class=\"string\">&quot;This is an example of a Big Picture Style.&quot;</span>)</span><br><span class=\"line\">        .setStyle(notiStyle).build();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2017/04/20/Expandable-Notifications-for-Android/expanded_notification.png\" class=\"\" title=\"Expanded Notification\">\n\n<h4 id=\"Custom-View\"><a href=\"#Custom-View\" class=\"headerlink\" title=\"Custom View\"></a>Custom View</h4><p>So what if the rich notification styles don’t provide you with the layout you need?  Easy, just create your own layout and pass it to the builder.  One little fact to retain is that notifications use remote views, which means you need to create a layout using a RemoteView.  Below is exactly how you would need to create this custom RemoteView.  When using a custom view, it will still function like the other expandable notifications we talked about.</p>\n<p>First you need to create your layout file, here is one for an example.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;#545454&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center_horizontal&quot;</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/codeversed_logo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">&quot;@string/codeversed_logo&quot;</span>/&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Next create the RemoteView that uses your custom layout and apply it RemoteView using bigContentView.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Creates an explicit intent for an ResultActivity to receive.</span></span><br><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">resultIntent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// This ensures that the back button follows the recommended</span></span><br><span class=\"line\"><span class=\"comment\">// convention for the back key.</span></span><br><span class=\"line\"><span class=\"type\">TaskStackBuilder</span> <span class=\"variable\">stackBuilder</span> <span class=\"operator\">=</span> TaskStackBuilder.create(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the back stack for the Intent (but not the Intent itself)</span></span><br><span class=\"line\">stackBuilder.addParentStack(ResultActivity.class);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack.</span></span><br><span class=\"line\">stackBuilder.addNextIntent(resultIntent);</span><br><span class=\"line\"><span class=\"type\">PendingIntent</span> <span class=\"variable\">resultPendingIntent</span> <span class=\"operator\">=</span> stackBuilder.getPendingIntent(</span><br><span class=\"line\">        <span class=\"number\">0</span>, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create remote view and set bigContentView.</span></span><br><span class=\"line\"><span class=\"type\">RemoteViews</span> <span class=\"variable\">expandedView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteViews</span>(<span class=\"built_in\">this</span>.getPackageName(), </span><br><span class=\"line\">        R.layout.notification_custom_remote);</span><br><span class=\"line\">expandedView.setTextViewText(R.id.text_view, <span class=\"string\">&quot;Neat logo!&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        .setSmallIcon(R.drawable.ic_launcher)</span><br><span class=\"line\">        .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        .setContentIntent(resultPendingIntent)</span><br><span class=\"line\">        .setContentTitle(<span class=\"string\">&quot;Custom View&quot;</span>).build();</span><br><span class=\"line\"> </span><br><span class=\"line\">notification.bigContentView = expandedView;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2017/04/20/Expandable-Notifications-for-Android/customer_notification.png\" class=\"\" title=\"Customer Notification\">\n\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><p><a href=\"https://github.com/srafx/Notifications\">示例代码</a></p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["android","computer science"]},{"title":"微信公众号消息中的文字链接","url":"/blog/2020/07/01/a-tag-in-weixin-mp/","content":"<p>在微信公众号后台回复文字消息时，可以在文字消息中插入<code>&lt;a&gt;</code>链接。</p>\n<p>在使用<code>&lt;a href=&quot;link&quot;&gt;text&lt;/a&gt;</code>的时候，有以下几个注意事项:</p>\n<ol>\n<li><p>href要使用双引号而不是单引号</p>\n</li>\n<li><p>text不能出现换行符<code>\\n</code>，如果一定要换行，可使用多个a标签。</p>\n</li>\n</ol>\n<p>如果href使用了单引号或者text中出现了<code>\\n</code>，那在安卓上就会解析a标签失败。天知道微信是怎么解析的。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"开放docker容器给局域网上其它电脑访问","url":"/blog/2022/02/21/access-docker-container-from-lan/","content":"<p>想用手机播放电脑上的多媒体文件，整了个<a href=\"https://jellyfin.org/\">jellyfin</a>在上跑着。本机使用<code>localhost</code>或<code>192.168.0.123</code>都可以访问，但同一LAN下的其它设备却无法连接。</p>\n<p>各种找原因，调整jellyfin的docker network相关配置啦，把jellyfin从docker换到native msi版本啦，结果都不行。</p>\n<p>最后把windows防火墙全关了，发现能访问了。好嘛，答案竟然这么简单粗暴。</p>\n<p>在最开始就已经检查过windows防火墙，入站规则很明显有的docker相关，但它的网络类型是公共，而当前使用的网络类型是专用。一直以为对公共开放就默认对专用网络也开放，结果竟然是独立的。</p>\n<p>另外，负责docker的入站访问的程序不是<code>Docker Desktop.exe</code>而是<code>com.docker.backend.exe</code>，在<code>c:\\Program Files\\Docker\\Docker\\resources\\</code>目录下。</p>\n<img src=\"/blog/2022/02/21/access-docker-container-from-lan/docker-firewall.png\" class=\"\" title=\"docker firewall\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker","jellyfin"]},{"title":"AI歌手","url":"/blog/2023/01/30/ai-singer/","content":"<p>之前写的<a href=\"/blog/2022/04/04/%E4%BA%BA%E5%8A%9Bvocaloid/\" title=\"人力vocaloid\">人力vocaloid</a>中介绍了UTAU的音源配布，现在可以直接从干声训练了。</p>\n<p><a href=\"https://space.bilibili.com/125526\">-LKs-</a>发布的<a href=\"https://www.bilibili.com/video/BV1uM411t7ZJ\">赛博女友，完美变声，如今AI语音有多超乎想象?</a>这个视频提到了<a href=\"https://github.com/openvpi/DiffSinger\">DiffSinger</a>可以做到个人训练音源。</p>\n<p><a href=\"https://www.qfssr.cn/\">孙飒</a>写了个<a href=\"https://www.yuque.com/openvpi/tutorial\">DiffSinger基础教程</a>，相当详细，从入门到入土。</p>\n<p>不想自己训练想直接先体验下AI歌手可以试试<a href=\"https://singer.xiaoice.com/\">小冰</a>，<a href=\"http://www.aisingers.com/\">虚拟歌手</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"兼容docker的安卓模拟器","url":"/blog/2021/04/20/android-emulator-with-hyper-v/","content":"<p>docker需要开启hyper-v，然而大多数安卓模拟器并不支持。</p>\n<h2 id=\"virtualization\"><a href=\"#virtualization\" class=\"headerlink\" title=\"virtualization\"></a><a href=\"https://en.wikipedia.org/wiki/X86_virtualization\">virtualization</a></h2><p>为了更好的支持虚拟机，从CPU级别就支持了虚拟化技术。目前Intel的叫Intel VT-x，AMD的叫AMD-v或SVM(Secure Virtual Machine)。可在主板BIOS中设置是否开启，通常默认出厂都是开启。</p>\n<h2 id=\"hyper-v\"><a href=\"#hyper-v\" class=\"headerlink\" title=\"hyper-v\"></a><a href=\"https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/\">hyper-v</a></h2><p><a href=\"https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview\">hyper-v</a>是windows上的硬件虚拟化产品，用以更好的运行虚拟机。</p>\n<h2 id=\"hypervisor\"><a href=\"#hypervisor\" class=\"headerlink\" title=\"hypervisor\"></a>hypervisor</h2><p>hypervisor又可以称做VMM。目前主流的有两个，Intel的HAXM，和Windows的WHPX。</p>\n<p>安卓针对windows下的虚拟机加速有<a href=\"https://developer.android.com/studio/run/emulator-acceleration#choose-windows-hypervisor\">指南</a>：</p>\n<img src=\"/blog/2021/04/20/android-emulator-with-hyper-v/windows-hypervisor.png\" class=\"\" title=\"配置硬件加速\">\n\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>docker在windows上使用了Hyper-V，所以如果要兼容的话，安卓模拟器只能使用WHPX。</p>\n<h2 id=\"安卓模拟器\"><a href=\"#安卓模拟器\" class=\"headerlink\" title=\"安卓模拟器\"></a>安卓模拟器</h2><p>WHPX比HAXM速度慢，所以绝大多数安卓模拟器都只支持了HAXM，比如网易的MuMu，腾讯的手游助手。</p>\n<p>但还是有一些支持WHPX的，比如谷歌官方的Android Emulator，但使用体验并不友好。</p>\n<p>商用的有一个叫<a href=\"https://www.bluestacks.com/\">BlueStacks</a>，它也<a href=\"https://support.bluestacks.com/hc/zh-tw/articles/360049701852-BlueStacks-Hyper-V-%E6%B8%AC%E8%A9%A6%E7%89%88%E6%9C%AC-%E7%89%88%E6%9C%AC%E6%97%A5%E8%AA%8C\">支持了Hyper-V</a>。推荐使用。</p>\n<img src=\"/blog/2021/04/20/android-emulator-with-hyper-v/bluestacks_with_hyper_v.png\" class=\"\" title=\"BlueStacks with Hyper-V\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"Android6.0锁屏源码分析之界面布局分析","url":"/blog/2017/04/19/android-lock-screen/","content":"<p>先大致介绍一下锁屏界面，Android的锁屏界面可以分为两级：</p>\n<ol>\n<li><p>一级锁屏界面暂且称之为锁屏界面<em>LockScreen</em></p>\n<p> 即平常用到的无需任何输入和验证，只需滑动解锁，没有任何的安全性可言，只是为了防止因为非故意触发手机造成的一定的困扰。</p>\n</li>\n<li><p>二级锁屏界面是在解锁一级界面后进入的一个界面<em>UnlockScreen</em></p>\n<p> 算是用于一定的加密，相当于给手机多了一层保护，所以二级界面通常称之为安全界面—–KeyguardSecurityView。要想解锁该界面就需要输入一定的验证信息，图案，密码，pin码等等各种加密方式。但也不要以为有了这个界面你的手机就有很好的加密性了，这种很好消除和破解。</p>\n</li>\n</ol>\n<p><strong>锁屏界面LockScreen</strong></p>\n<img src=\"/blog/2017/04/19/android-lock-screen/lockscreen.png\" class=\"\" title=\"锁屏界面\">\n\n<p>Android6.0的原生的锁屏界面如上，上滑解锁。<br>刚开始看到这个，确实不知道该如何去分析，不知道该界面到底隶属于谁。这时候就要借助sdk的工具了。<br>当然，如果你对framework层源码很熟悉的话也可以从代码角度来分析，该界面是在按下power电源键KEYCODE_POWER灭屏之后加载出来的，而不是说每次在灭屏状态下按键亮屏时再加载。根据这个逻辑，就要去看按键按下灭屏之后的处理，可以从PhoneWindowManager看起，在该类中有对Power按键的处理。</p>\n<p>如果从代码角度这么追的话可能需要花费的时间或多一些，建议还是直接使用sdk查看view视图的工具，直接就可以定位到该锁屏界面。</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/hierarchyviewer.png\" class=\"\" title=\"hierarchyviewer\">\n\n<p>该工具可以显示出来当前显示的是哪一个界面，以及该界面的view视图，可以帮助很好的分析锁屏。借助该工具可以看到，锁屏界面对应的是StatusBar。</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/hierarchyviewer2.png\" class=\"\" title=\"hierarchyviewer\">\n\n<p>可以看出，锁屏界面属于状态栏，属于SystemUi的一部分，类似于状态栏下拉之后的界面，而Android4.4.2是属于keyguard锁屏界面。<br>说的直白一点儿就是，6.0的锁屏界面就是状态栏下拉后的一个界面，准确来说是状态栏加载出来的一个View(也可以说是组)，解锁只需要上滑。Android4.4.2的锁屏界面隶属于keyguard，与statusBar没有关系，就是一个界面。<br>借助sdk工具，可以分析锁屏界面上你想分析的所有小部件，先看工具中显示的view视图的一小部分。</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/viewer.png\" class=\"\" title=\"view\">\n\n<p>介绍一下代码所在位置，有需要改布局的或者锁屏相关的可以参考根据界面view的id&#x2F;notification_panel。<br>可以找到锁屏界面整体的xml文件为status_bar_expanded.xml文件，文件所在目录为\\android\\frameworks\\base\\packages\\SystemUI\\res\\layout\\status_bar_expanded.xml，研究源码要借助源码搜索工具–openGrok可以很快的找到所搜索的内容在整个源码中使用的地方。</p>\n<p>用一张图可以很清晰的看出各个部件的id：</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/layout.png\" class=\"\" title=\"layout\">\n\n<p>如果想要针对锁屏的布局或者某个小控件做修改的话可以按照这张图标注的id进行查找对应的view或者layout文件。<br>有了布局分析图后你现在可以进行基本的布局相关的调整工作了，比如隐藏某个view，更改某个view的样式，添加view，等等</p>\n<p>举个例子，我现在对底部的那三个按钮感兴趣，那么我就直接去找keyguard_bottom_area.xml文件（<br>文件目录在\\android\\frameworks\\base\\packages\\SystemUI\\res\\layout\\status_bar_expanded.xml），各个按钮的id我需要知道</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/layout2.png\" class=\"\" title=\"layout2\">\n\n<p>要求一，滑动相机view时不进行任何操作<br>目前6.0源码中是在滑动照相机这个view一段距离后，会自动调起来相机应用。我现在不让他调起相机应用，而是开启别的应用，怎<br>么做？</p>\n<p>首先是分析既然是针对相机view的操作，那我们首先研究一下相机view滑动一段距离后怎么调起的相机应用。相应的可以直接把相机<br>应用替换成我们自己的应用，这样每当view滑动一段距离后就会调起自己想要调起的应用。所以首先是找到调起相机应用的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v == mCameraImageView) &#123;  </span><br><span class=\"line\">        launchCamera(CAMERA_LAUNCH_SOURCE_AFFORDANCE);  </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在KeyguardBottomAreaView.java中有关于按钮点击后打开相机的操作，代码目录为<br>\\android\\frameworks\\base\\packages\\SystemUI\\src\\com\\android\\systemui\\statusbar\\phone\\KeyguardBottomAreaView.Java<br>也就是说，你想让点击相机view之后做什么操作，只需要修改这里即可，至于相机应用如何起来的，可以根据代码流程就行分析，在<br>这里不多介绍。<br>电话view与相机view属于同一类型的view，同属于com.android.systemui.statusbar.KeyguardAffordanceView。点击事件也在该<br>onClick方法中。</p>\n<p>要求二，目前是上滑解锁，如何不让其上滑解锁<br>这个首先需要分析一下上滑这个动作在哪儿监听的，然后何时会调用解锁？按照这个思路分析了一下午，也没理出个头绪，幸而得到<br>一些指点，既然整个界面是个自定义的view，那么可以考虑对view屏蔽掉触摸事件，即在view的onTouchEvent中规定，当满足某种<br>条件时向上滑动不解锁，这样看来，省去了很多事。<br>可能有时候解决问题就是这样，没有必要去死钻牛角尖非要数到小数点才肯罢休。但如果是想学习研究的话确实可以看一看。</p>\n<p>要求三，定制某个按键，长按解锁<br>Android6.0锁屏有一个特点，那就是在一级锁屏界面状态下长按menu键可以解锁。所以针对第三个要求，可以在锁屏页进行按键分<br>发时进行一个判断，满足条件后调用menu菜单解锁的处理<br>做法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dispatchKeyEvent</span><span class=\"params\">(KeyEvent event)</span> &#123;  </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 如果按键抬起，且为长按事件  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.getAction() == KeyEvent.ACTION_UP &amp;&amp;(event.getFlags() &amp; KeyEvent.FLAG_LONG_PRESS) == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">keyCode</span> <span class=\"operator\">=</span> event.getKeyCode();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 判断按键，并进行解锁操作，mLongPress线程里调用的是按下menu键解锁的方法  </span></span><br><span class=\"line\">            <span class=\"comment\">// mKeyguardView.handleMenuKey()；  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">            mHandler.removeCallbacks(mLongPress); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.dispatchKeyEvent(event); </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<p>二级界面—–keyguardSecurity安全界面</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/unlockscreen.png\" class=\"\" title=\"unlockscreen\">\n\n<p>这就是所谓的安全界面，需要输入密码，在解锁了一级界面后如果设置了密码就会进入到二级界面，仿照一级界面的分析方法来分析二级界面。</p>\n<p>从现在开始，才开始是锁屏相关的界面，锁屏模块代码目录如下</p>\n<img src=\"/blog/2017/04/19/android-lock-screen/foldertree.png\" class=\"\" title=\"foldertree\">\n\n<p>对于二级界面有6中情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* </span></span><br><span class=\"line\"><span class=\"comment\">*根据不同的模式获取到不同的布局 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getLayoutIdFor</span><span class=\"params\">(SecurityMode securityMode)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (securityMode) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> Pattern: <span class=\"keyword\">return</span> R.layout.keyguard_pattern_view;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> PIN: <span class=\"keyword\">return</span> R.layout.keyguard_pin_view;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> Password: <span class=\"keyword\">return</span> R.layout.keyguard_password_view;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SimPin: <span class=\"keyword\">return</span> R.layout.keyguard_sim_pin_view;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SimPuk: <span class=\"keyword\">return</span> R.layout.keyguard_sim_puk_view;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>各种模式的定义在KeyguardSecurityMode.java中文件路径为android&#x2F;frameworks&#x2F;base&#x2F;packages&#x2F;Keyguard&#x2F;src&#x2F;com&#x2F;android&#x2F;keyguard&#x2F;KeyguardSecurityMode.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">SecurityMode</span> &#123;  </span><br><span class=\"line\">    Invalid, <span class=\"comment\">// NULL state  所设置的状态无效  </span></span><br><span class=\"line\">    None, <span class=\"comment\">// No security enabled  没有设置二级界面，即一级界面解锁后直接进入主屏幕  </span></span><br><span class=\"line\">    Pattern, <span class=\"comment\">// Unlock by drawing a pattern. 通过绘制图案解锁  </span></span><br><span class=\"line\">    Password, <span class=\"comment\">// Unlock by entering an alphanumeric password 输入密码解锁，该密码包括字母和数字  </span></span><br><span class=\"line\">    PIN, <span class=\"comment\">// Strictly numeric password 输入纯数字密码解锁  </span></span><br><span class=\"line\">    SimPin, <span class=\"comment\">// Unlock by entering a sim pin. 输入sim卡pin码解锁  </span></span><br><span class=\"line\">    SimPuk <span class=\"comment\">// Unlock by entering a sim puk，输入sim卡puk码解锁，该码是唯一的，当sim卡密码输入pin码错误次数  </span></span><br><span class=\"line\">        <span class=\"comment\">//过多时会需要输入puk码，每个手机卡有自己的puk码即ID由运营商提供  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的模式与布局文件一一对应，</p>\n<p>对于布局上想要修改的，就去找对应的那几个布局文件即可，在这里不再举例说明。。</p>\n<p>对于锁屏界面的布局就分析到这里了，有什么宝贵意见的大神们可以甩出来，是一个学习的过程。</p>\n<p>在完结了锁屏界面布局分析之后，接下来的博客就要对锁屏的加载即显示锁屏、解锁一级界面，解锁二级界面进行一个详细分析了。<br>感觉工程量好大。慢慢来吧~~</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["android","computer science"]},{"title":"Ant Design Vue Pro的默认路由","url":"/blog/2020/05/17/antdv-default-path/","content":"<p><a href=\"https://github.com/vueComponent/ant-design-vue-pro\">Ant Design Vue Pro项目</a>是<a href=\"https://github.com/ant-design/ant-design-pro\">Ant Design Pro</a>的第三方vue实现，对于vue使用者来说算是一个常见选项。</p>\n<p>它的默认路由是<code>/dashboard/workplace</code>，用于自己项目时经常要改成别的，这里记录一下需要修改的几处地方，以免遗漏。</p>\n<h3 id=\"路由-src-x2F-config-x2F-router-config-js\"><a href=\"#路由-src-x2F-config-x2F-router-config-js\" class=\"headerlink\" title=\"路由(src&#x2F;config&#x2F;router.config.js)\"></a>路由(src&#x2F;config&#x2F;router.config.js)</h3><p>这里是第一处了，通常不会遗漏</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> asyncRouterMap = [</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;index&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">BasicLayout</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;首页&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/dashboard/workplace&#x27;</span>, <span class=\"comment\">// &lt;- 看这里看这里</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// dashboard</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;dashboard&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dashboard&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/dashboard/workplace&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">RouteView</span>,</span><br><span class=\"line\">        <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;仪表盘&#x27;</span>, <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>, <span class=\"attr\">icon</span>: bxAnaalyse, <span class=\"attr\">permission</span>: [ <span class=\"string\">&#x27;dashboard&#x27;</span> ] &#125;,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;analysis/:pageNo([1-9]\\\\d*)?&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Analysis&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/dashboard/Analysis&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;分析页&#x27;</span>, <span class=\"attr\">keepAlive</span>: <span class=\"literal\">false</span>, <span class=\"attr\">permission</span>: [ <span class=\"string\">&#x27;dashboard&#x27;</span> ] &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 外部链接</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;https://www.baidu.com/&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Monitor&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;监控页（外部）&#x27;</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;_blank&#x27;</span> &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;workplace&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Workplace&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/dashboard/Workplace&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;工作台&#x27;</span>, <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>, <span class=\"attr\">permission</span>: [ <span class=\"string\">&#x27;dashboard&#x27;</span> ] &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;test-work&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;TestWork&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/dashboard/TestWork&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">&#x27;测试功能&#x27;</span>, <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>, <span class=\"attr\">permission</span>: [ <span class=\"string\">&#x27;dashboard&#x27;</span> ] &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无权限页面-src-permission-js\"><a href=\"#无权限页面-src-permission-js\" class=\"headerlink\" title=\"无权限页面(src\\permission.js)\"></a>无权限页面(src\\permission.js)</h3><p>这里用的hard-code是<code>&#123; path: defaultRoutePath &#125;</code>，没有使用<code>&#123; name: &#39;dashboard&#39; &#125;</code>，更容易出问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultRoutePath = <span class=\"string\">&#x27;/dashboard/workplace&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NProgress</span>.<span class=\"title function_\">start</span>() <span class=\"comment\">// start progress bar</span></span><br><span class=\"line\">  to.<span class=\"property\">meta</span> &amp;&amp; (<span class=\"keyword\">typeof</span> to.<span class=\"property\">meta</span>.<span class=\"property\">title</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">setDocumentTitle</span>(<span class=\"string\">`<span class=\"subst\">$&#123;to.meta.title&#125;</span> - <span class=\"subst\">$&#123;domTitle&#125;</span>`</span>))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Vue</span>.<span class=\"property\">ls</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">ACCESS_TOKEN</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* has token */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/user/login&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(&#123; <span class=\"attr\">path</span>: defaultRoutePath &#125;) <span class=\"comment\">// &lt;- 看这里看这里</span></span><br><span class=\"line\">      <span class=\"title class_\">NProgress</span>.<span class=\"title function_\">done</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;      </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Logo-src-components-tools-Logo-vue\"><a href=\"#Logo-src-components-tools-Logo-vue\" class=\"headerlink\" title=\"Logo(src\\components\\tools\\Logo.vue)\"></a>Logo(src\\components\\tools\\Logo.vue)</h3><p>点击Logo回到首页，这是第二处，原作者并没有使用配置文件或其它方式来指定首页地方，而用了hard-code。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;logo&quot;&gt;</span><br><span class=\"line\">    &lt;router-link :to=&quot;&#123;name:&#x27;dashboard&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">      &lt;LogoSvg alt=&quot;logo&quot; /&gt;</span><br><span class=\"line\">      &lt;h1 v-if=&quot;showTitle&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/router-link&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常页-src-components-Exception-ExceptionPage-vue\"><a href=\"#异常页-src-components-Exception-ExceptionPage-vue\" class=\"headerlink\" title=\"异常页(src\\components\\Exception\\ExceptionPage.vue)\"></a>异常页(src\\components\\Exception\\ExceptionPage.vue)</h3><p>在异常页的回到首页也是用的hard-code指定dashboard</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Exception&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;404&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">config</span>: types</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    handleToHome () &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dashboard&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"面包屑-src-components-tools-Breadcrumb-vue\"><a href=\"#面包屑-src-components-tools-Breadcrumb-vue\" class=\"headerlink\" title=\"面包屑(src\\components\\tools\\Breadcrumb.vue)\"></a>面包屑(src\\components\\tools\\Breadcrumb.vue)</h3><p>面包屑的“首页”。这里默认是关闭的，在打开时肯定会注意到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">breadList</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBreadcrumb</span>()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    getBreadcrumb () &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">breadList</span> = []</span><br><span class=\"line\">      <span class=\"comment\">// this.breadList.push(&#123;name: &#x27;index&#x27;, path: &#x27;/dashboard/&#x27;, meta: &#123;title: &#x27;首页&#x27;&#125;&#125;) // &lt;- 看这里看这里</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">name</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">matched</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// item.name !== &#x27;index&#x27; &amp;&amp; this.breadList.push(item)</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">breadList</span>.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    $route () &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBreadcrumb</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"windows下的软件安装方法","url":"/blog/2023/07/03/approaches-of-installing-software-on-windows/","content":"<p>在windows下安装软件有很多种方法，从前都是使用最传统的安装文件，但随着windows向社区靠拢，软件包管理器逐渐成为主流。</p>\n<h2 id=\"使用安装文件\"><a href=\"#使用安装文件\" class=\"headerlink\" title=\"使用安装文件\"></a>使用安装文件</h2><p>最常规的就是下载安装文件了。注意要去官方源下载，避免文件被篡改。<br>通常有三个选择：</p>\n<ul>\n<li>portable</li>\n<li>exe</li>\n<li>msi<br>protable是便携绿色免安装版本，下载完直接运行exe就能使用。<br>exe是通用的可执行文件。<br>msi则是微软安装包，相比exe更安全，配置也更丰富。<br>个人偏向选择portable &gt; msi &gt; exe。</li>\n</ul>\n<h2 id=\"脚本安装\"><a href=\"#脚本安装\" class=\"headerlink\" title=\"脚本安装\"></a>脚本安装</h2><p>自从有了PowerShell，使用脚本安装越来越方便。比如：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">irm</span> get.scoop.sh | <span class=\"built_in\">iex</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-restmethod\">irm(Invoke-RestMethod)</a>用来下载脚本文件，<a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression\">iex(Invoke-Expression)</a>则用来解释执行表达式。</p>\n<p>如果是第一次运行脚本安装，需要先修改一下对网络下载的脚本文件的安全策略：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> RemoteSigned <span class=\"literal\">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"软件包管理器\"><a href=\"#软件包管理器\" class=\"headerlink\" title=\"软件包管理器\"></a>软件包管理器</h2><p>linux有apt和yum，mac有homebrew，那么windows有没有命令行式的软件包管理器呢？<br>当然有，还很多呢。</p>\n<h3 id=\"chocolatey\"><a href=\"#chocolatey\" class=\"headerlink\" title=\"chocolatey\"></a><a href=\"https://community.chocolatey.org/\">chocolatey</a></h3><p>最老牌的包管理工具，拥有最齐全的生态，常见的软件都有。</p>\n<h3 id=\"scoop\"><a href=\"#scoop\" class=\"headerlink\" title=\"scoop\"></a><a href=\"https://scoop.sh/\">scoop</a></h3><p>新秀。<a href=\"https://github.com/ScoopInstaller/Scoop/wiki/Chocolatey-and-Winget-Comparison\">相比chocolatey</a>有这些优势：</p>\n<ul>\n<li>安装到当前用户，所以无需管理员权限</li>\n<li>安装好的软件全部在~&#x2F;scoop&#x2F;这一个目录下，方便管理</li>\n<li>使用一个json文件来保存对软件包的安装描述，简洁明了<br>与winget的对比可以看<a href=\"https://github.com/ScoopInstaller/Scoop/discussions/4777\">这里</a>。</li>\n</ul>\n<h3 id=\"winget\"><a href=\"#winget\" class=\"headerlink\" title=\"winget\"></a><a href=\"https://learn.microsoft.com/en-us/windows/package-manager/winget/\">winget</a></h3><p>微软官方的<a href=\"https://github.com/microsoft/winget-cli\">开源项目</a>。<br>原理上差不多算是调用没有UI界面的原软件安装包，类似<code>install --silent</code>。<br>建议的安装方式是从Microsoft Store安装，果然很官方。<br>目前支持的软件包不算多。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"音频编辑软件","url":"/blog/2021/07/03/audio-editor/","content":"<p>20年前左右用过<code>cooledit pro</code>，后来卖给adobe变成了<a href=\"https://www.adobe.com/products/audition.html\">audition</a>，需要再找一个免费的产品。</p>\n<p>很高兴的发现市面上仍然有免费的产品：<a href=\"https://www.audacityteam.org/\">audacity</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"导出和导入docker数据卷","url":"/blog/2023/01/10/backup-and-share-docker-volume/","content":"<p>docker卷的备份可以使用一个临时容器来挂载卷很轻松的完成：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"literal\">--rm</span> `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$VOLUME_NAME:</span>/backup-volume&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$</span>(pwd):/backup&quot;</span> `</span><br><span class=\"line\">  busybox `</span><br><span class=\"line\">  tar <span class=\"literal\">-zcvf</span> /backup/my<span class=\"literal\">-backup</span>.tar.gz /<span class=\"built_in\">backup-volume</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以导入：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"literal\">--rm</span> `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$VOLUME_NAME:</span>/backup-volume&quot;</span></span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$</span>(pwd):/backup&quot;</span> `</span><br><span class=\"line\">  busybox `</span><br><span class=\"line\">  tar <span class=\"literal\">-xvzf</span> /backup/my<span class=\"literal\">-backup</span>.tar.gz <span class=\"literal\">-C</span> /</span><br></pre></td></tr></table></figure>\n\n<p>可以参考<a href=\"https://github.com/BretFisher/docker-vackup\">docker-vackup</a>这个bash脚本。</p>\n<p>不过现在有个更易用的工具：<a href=\"https://hub.docker.com/extensions/docker/volumes-backup-extension\">Volumes Backup &amp; Share</a>扩展。</p>\n<p>可以看看官方的<a href=\"https://www.docker.com/blog/back-up-and-share-docker-volumes-with-this-extension/\">介绍博客</a>。</p>\n<img src=\"/blog/2023/01/10/backup-and-share-docker-volume/volumes-backup-share-extension.gif\" class=\"\" title=\"Volumes Backup &amp; Share\">\n\n<p>但要注意的是，这个扩展导出的压缩包格式是<a href=\"https://docs.fileformat.com/compression/zst/\">.zst</a>，它使用的压缩算法是facebook的<a href=\"https://github.com/facebook/zstd\">zstd</a>，普通的压缩软件比如<a href=\"https://www.7-zip.org/\">7z</a>是不支持的。</p>\n<p>zstd官方提供了<a href=\"https://github.com/facebook/zstd/releases\">命令行工具</a>，我们还可以使用集成了zstd的<a href=\"https://github.com/mcmilk/7-Zip-zstd\">7-Zip-zstd</a>来代替官方7z。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"【转载】女人相亲惯用套路","url":"/blog/2021/06/18/blind-date-female-pua/","content":"<p>本帖转自NGA论坛打工仔小周的帖子<a href=\"https://bbs.nga.cn/read.php?tid=26335583&rand=906\">来说说这些年相亲遇到的女方伎俩</a></p>\n<p>前排提示：<br>我并非什么恋爱大佬或是高端玩家，我是以多年被前女友们PUA、或是被相亲对象PUA的视角进行描述总结的，也就是所谓的失败者视角。<br>所以我不知道怎么对付这些招数，我只是经历过这些招数，然后进行了归纳总结。<br>以我多年的经验来说，提桶跑路是最正确的选择，强行磨合是一件相当痛苦的事。</p>\n<p>—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​<br>好哥哥们，右上角那个礼物是要花钱的吗？别送了呀，我就发帖图一乐的……别浪费钱呀，自己给自己买瓶快乐水，快乐才是唯一的意义啊！<img src=\"/blog/2021/06/18/blind-date-female-pua/a2_02.png\" class=\"\" title=\"goodjob\"><br>—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​</p>\n<p>好哥哥们，我写这一篇不是想让大家恐婚恐女，说白了是想给坛友们提个醒，免得有比较懵懂的老哥误入其中。<br>我也不是想把朴素的婚恋关系异化为“战争游戏”，实际上，我在最开头也提过，当你遇见这些所谓的“兵法”时，你不应该想着学习“兵法”去对抗，而应该转身走人，不留下一点眷念。<br>同时，也希望各位善良的坛友，不要用这些方法去对付自己的爱人，因为其中的痛苦大概是无法用言语表述出来的。<br>和老哥们猜测的一样，我确实遭遇过不少打击，内心有很多创伤，但我从不恐婚，也不恐女。我仍旧对爱情与婚姻抱有朴素的期望，坚信会有一个善良的人来到我身边。<br>我来人间一趟，我想看看太阳，这大概就是我内心最真实的写照。<br>这句话也送给老哥们，太阳照常升起，没有什么黑暗是冲不破的，至暗时刻后面紧跟着的，一定是万丈光芒。<img src=\"/blog/2021/06/18/blind-date-female-pua/ac37.png\" class=\"\" title=\"羡慕\"></p>\n<p>以下原贴：<br>—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​</p>\n<h2 id=\"女人相亲惯用套路\"><a href=\"#女人相亲惯用套路\" class=\"headerlink\" title=\"女人相亲惯用套路\"></a>女人相亲惯用套路</h2><h3 id=\"第一招：打压你的婚恋价值\"><a href=\"#第一招：打压你的婚恋价值\" class=\"headerlink\" title=\"第一招：打压你的婚恋价值\"></a>第一招：打压你的婚恋价值</h3><p>从长相、条件、性格等角度打压你，让你认为自己存在明显缺陷。<br>比如你有房有车，那就说对你没感觉；比如你家境不错，那就说你工作不行；比如说你什么都不错，那就说你身高不行；没有人是十全十美的，一旦开始打压，总能找到缺陷。<br>一般使用这招的女性，自身条件都十分拉胯，寄希望于嫁给更好的男人，但又害怕男人醒悟，所以想用打压价值的方法强行匹配。<br>辨别的方法很简单，真正善良的人不会主动去打压他人。<br>但换句话说，女人在相亲时选择打压你，大概率是她不太行，你很行(分人，自己判断)。</p>\n<h3 id=\"第二招：享受你的婚恋价值\"><a href=\"#第二招：享受你的婚恋价值\" class=\"headerlink\" title=\"第二招：享受你的婚恋价值\"></a>第二招：享受你的婚恋价值</h3><p>通过最初的阶段后，女性往往会以试试的借口，享受你婚恋价值带来的好处，比如日常接送、买单、送零食奶茶等，美其名曰，培养感情，实际上就是还没想好要不要跟你谈，但想先拿点好处、或者享受一下优越感。<br>我个人认为，任何不给你名分的相亲对象，都必须直接PASS，没有什么所谓“试一试”、“试用期男友”的说法，就像你不可能跑去超市买一瓶水，喝一口又放回去。<br>我曾经给一个女人当过一年半的试用期男友，我想没人比我更懂试用期男友的痛苦。</p>\n<h3 id=\"第三招：强制要求你接受她婚恋价值中的缺陷\"><a href=\"#第三招：强制要求你接受她婚恋价值中的缺陷\" class=\"headerlink\" title=\"第三招：强制要求你接受她婚恋价值中的缺陷\"></a>第三招：强制要求你接受她婚恋价值中的缺陷</h3><p>比如家里穷啊、有无能弟弟啊、父母有性格缺陷啊、工作不好啊、个子矮啊、打过胎啊、惯性流产啊之类的。<br>一开始接触的时候她不会坦白，等感情升温后，她才选择告诉你真相，这时候如果你不能接受，那你就是渣男、就是背叛感情；如果你能接受，那以后你都必须一直接受，你反抗就是你渣男。<br>实际上，很多女性都喜欢使用这一招，将本来该由自己承受的道德压力，转嫁给不知情的男性来承担，这样女性就会立于不败之地。<br>不得不说，女性在这方面简直是天才级别的演员。</p>\n<h3 id=\"第四招：事后补救\"><a href=\"#第四招：事后补救\" class=\"headerlink\" title=\"第四招：事后补救\"></a>第四招：事后补救</h3><p>有别于上述三招，因为使用这一招的女性，大概率是初次相亲或者对自身抱有不切实际幻想的女性，她们难以判断自身的婚恋价值，不知道自己足以匹配什么样的男性，对自己未来的婚恋对象产生了过高而不切实际的期望，所以大概率都是发现问题后秒拒相亲对象。<br>一旦遭遇多次相亲毒打后，她就会发现自己以往碰到的某位男士，就是她能匹配到的最好的男人，然后开始进行撩拨。<br>一般是发条微信、或者带照片的朋友圈，寄希望于你能主动上钩去撩。<br>一旦男性在这时候上钩，女性反而会产生“也许我还值得更好的”的念头。<br>这种女性十分可怕，因为你永远不知道她欲望的尽头在哪里。即便进入婚姻状态，她的欲望也不会消退。我愿称之为骑驴找马的神。</p>\n<p>遇上前三招中任何一招，都白雪公主，因为前三招往往是伴生的组合拳。而第四招往往出现在本身条件OK的女性身上，如果你对自己有信心，可以考虑接触，但我个人是不建议的。</p>\n<p>最后提醒一句，任何善良、真心想要和你继续相亲的女孩子，都不可能对你使用以上任何一招，用了就是有问题，就是不善良。<br>去相亲的老哥千万不要自我怀疑，因为一旦自我怀疑，就会迪化，然后陷入连环PUA陷阱。</p>\n<p>切记！</p>\n<p>—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​—​</p>\n<h3 id=\"第五招：敲山震虎\"><a href=\"#第五招：敲山震虎\" class=\"headerlink\" title=\"第五招：敲山震虎\"></a>第五招：敲山震虎</h3><p>确立关系后也并不安全，女朋友时常会暗示一些奇怪的东西，比如“我有一个朋友，她男朋友blablabla”。<br>切记，一旦出现“我有一个朋友”这个句式，一般就是在表达自己深层的择偶观念，女性一旦混成圈子，就会觉得圈子内的彼此都是条件相似的，<br>而她此时提出“别人家的男朋友blablabla”，就是暗示你“别人有的，我也要有，我没有，不是我的问题，因为我和我朋友差不多条件，所以是你的问题”。<br>该怎么做不用我多说了吧？</p>\n<h3 id=\"第六招：时间尺度错乱之付出收获匹配法\"><a href=\"#第六招：时间尺度错乱之付出收获匹配法\" class=\"headerlink\" title=\"第六招：时间尺度错乱之付出收获匹配法\"></a>第六招：时间尺度错乱之付出收获匹配法</h3><p>很难描述的招数，打个比方，假如你现在对她如何如何如何，她就会把时间拉到“几十年”、“一辈子”这样无法立时衡量的时间尺度上，对你的付出进行打压。<br>一般遇上这一招的男性，都会立刻承诺或是陷入懵逼状态，然后女性就可以趁机把你之前的付出打压下去，然后运用“历史平均”这个手法，将你付出的价值分散，以此掩盖自身没有付出的短板，从而达到所谓婚恋关系中的“付出—收获”公平匹配。</p>\n<h3 id=\"第七招：自我拔高\"><a href=\"#第七招：自我拔高\" class=\"headerlink\" title=\"第七招：自我拔高\"></a>第七招：自我拔高</h3><p>这一招的适用对象，往往是家庭条件极为优秀的大中产家庭出身的孩子，但又存在一定缺陷(比如长相不算帅的路人、性格较为沉闷、为人老实等)。<br>女性在面对这种婚恋价值极高的男性时，反而会表现出“超规格”的矜持，因为她们认为这种矜持可以拔高自身的婚恋价值。<br>对待这一类男性，女性往往喜欢不断用各种“婚恋关系中的无价值条件”，对自身进行自我拔高。<br>打个比方，她会不经意提起自己去过很多地方，见过很多世面，有一些很厉害的朋友，以此来彰显自身的一些价值，但她就是不提“自己在工作上有什么进步”、“自己在理财上有什么收益”、“自己在家庭教育上有什么观点”，众所周知，前者在男方眼里都是“无价值婚恋条件”，后者才是“有价值的婚恋条件”，一旦女性主动提出前者而忽略后者，就是在试图强制性把一些“无价值”的条件打造为“有价值”的条件。<br>男性一旦被忽悠，认同了这些“无价值婚恋条件”，就会在心底拔高女性的婚恋价值，然后达成一种非常强行的“匹配”。</p>\n<p>所以，男性必须要深刻明白，什么是有价值的婚恋条件，什么是无价值的婚恋条件。<br>打个比方：<br>有价值的婚恋条件：女方的家世清白、女方的父母没有犯罪记录不会导致孩子政审失败、女方有一份稳定而达到平均收入水平的工作、女方对未来有自我规划(不是白日做梦，是真正的自我规范)、女方的容貌身材、女方持有较为稳定的人格与性格等</p>\n<p>无价值的婚恋条件：女方有一门不能带来任何收益、也不能陶冶情操的兴趣爱好、女方有很多自认为很厉害的朋友、女方看过世界、女方因工作原因见识过更好的生活等。</p>\n<h3 id=\"第八招：负面情绪转移与正面情绪控制\"><a href=\"#第八招：负面情绪转移与正面情绪控制\" class=\"headerlink\" title=\"第八招：负面情绪转移与正面情绪控制\"></a>第八招：负面情绪转移与正面情绪控制</h3><p>很多男性遇到过，女朋友或预期会成为女朋友的女性，突然因为与你不相关的事情，产生了负面情绪，并要求你共同承担。<br>这种手法往往是将自身的不幸强行发泄在男性身上，以此达到情绪的宣泄与平衡，还美其名曰“共同成长”。</p>\n<p>而正面情绪控制就更简单了，你有什么想分享的快乐，她不但不接收，反而立刻对你的快乐进行控制。<br>打个比方，你听到一首很好听的歌，她就说听歌没用，不如上进一些；你学会了某项兴趣爱好，来宣泄自身的情绪，她还是会说这些东西没用，不如赚钱；你要是多赚钱，她就说钱不是唯一的快乐。<br>总之，你想快乐，她就不让你快乐，你的快乐必须建立在她允许的范围内，她让你快乐，你才能快乐，她不快乐，你也不能快乐。</p>\n<p>其实这是精神控制的一种，字母圈常用来调教M。终极目标就是让你变成一个“完全与她情绪同步的工具人”，一方面可以让你失去对自身情绪的掌控能力，逐步沦为玩偶，另一方面也可以将你变成一个纯粹的“情绪垃圾桶”，以此宣泄自身无能带来的负面情绪。</p>\n<h3 id=\"第九招：薛定谔的受害者\"><a href=\"#第九招：薛定谔的受害者\" class=\"headerlink\" title=\"第九招：薛定谔的受害者\"></a>第九招：薛定谔的受害者</h3><p>打个比方，在一段婚恋关系中，女性一旦出轨，就会将锅甩给男性，提出“是你一直不在我身边”、“是你X能力不强无法满足我”、“是你不能平衡工作与生活”。<br>可实际上大家都明白，出轨才是过错方，女性这样做无非是想减轻自身面对的心理层面上的道德压力与社会层面上的舆论压力，将自身转变为受害者，使自身处于“受害者与加害者的叠加状态”，以此迷惑男性直观感受。<br>实现心理层面与社会层面的翻盘。<br>这一招不一定是用在出轨上，但一经使用，大概率不是已经出轨，就是在出轨的边界线上左右横跳了。</p>\n<p>以第九招为基础衍生出的第十招：舆论伏笔</p>\n<p>女性是天生的舆论控制者，而且极其擅长埋伏笔。<br>打个比方，她会提前向你们共同的朋友倾诉感情，以个人角度描述你们之间的关系，让你们共同的朋友觉得你不对劲，<br>以此为基础，当她终于犯错时，她就会使用第九招，这样，被她埋下的舆论伏笔所长期影响的那些朋友们，天然就会对她产生同情，反过来指责并没有产生“实际加害行为”的男性。<br>以此，女性得到了舆论上的胜利，而一些较为软弱善良的男性，反而可能陷入自我怀疑、长时间无法从中走出。</p>\n<h3 id=\"第十一招：预设立场\"><a href=\"#第十一招：预设立场\" class=\"headerlink\" title=\"第十一招：预设立场\"></a>第十一招：预设立场</h3><p>相信很多朋友在婚恋关系中都遇到过这个问题，比如，女性看到一则婚恋有关的人类迷惑行为大赏，就会预设立场，将自己预设为受害者，将男性预设为加害者，然后要求男性从加害者的角度出发，阐述自身观点。<br>男性在此时往往陷入圈套，然后陷入争吵。<br>打个比方，一桩离婚案，男性出轨，女性受难，然后女朋友借机发挥，预设你就是出轨方，然后要求你从出轨方角度进行阐述，分析自身的一些行为，做出一定的保证。<br>再打个比方，同样是上述案例，女性直接带入被害者视角，将你想象成加害者，直接了当将自己和你的立场进行预设，然后对你进行粗暴的价值观输出。<br>即便你根本没犯这个错，但价值观是一定要输出给你的，而且一定会将你预设为加害者那一方。</p>\n<p>准确些说，这也是情绪控制的一种延伸——价值观控制。<br>但手法更为高明，因为一旦将自己预设为被害者，将男性预设为加害者，就可以立于不败之地，因为吵到最后，有一个已经出现受害者的案例就摆在你们眼前，一旦男性从加害者角度出发进行阐述，是怎么也不可能吵赢的。<br>女性从而输出自身的价值观，对男性的价值观进行打压，达到控制的目的。</p>\n<h3 id=\"第十二招：饱和式恋爱\"><a href=\"#第十二招：饱和式恋爱\" class=\"headerlink\" title=\"第十二招：饱和式恋爱\"></a>第十二招：饱和式恋爱</h3><p>女性最喜欢纠结一个问题：异性间是否存在纯粹的友谊。<br>以此为基础对男性进行迷惑，实则女性十分清楚自己身边男性们的想法，并对此加以利用。<br>举个例子：<br>一位女性即便拥有了男朋友或是老公，她也会不自觉开发其他男性，以作备用，这是一种饱和式的恋爱方法，一旦男友或老公出现问题，女性立刻就可以踢掉换人。<br>或者换一种说法，女性十分擅长给男性添加“定位”，男朋友是“男朋友”，另一位男性是“可以进行情绪宣泄的二号垃圾桶”，再一位男性是“可以帮忙完成工作或课业的工具人”，以此类推。<br>即便步入婚恋关系，这种饱和式恋爱手段也不会停止。</p>\n<h3 id=\"第十三招：历史投影\"><a href=\"#第十三招：历史投影\" class=\"headerlink\" title=\"第十三招：历史投影\"></a>第十三招：历史投影</h3><p>女性擅长从时间长河中召唤前男友的历史投影，这些历史投影往往不具备独立人格，是完全利于女性、完全辅助女性观点的人偶。<br>这些人偶的存在就是为了单方面证明女性想要阐述的观点、想要输出的价值观、想要达成的目的。<br>当前男友的历史投影降临时，老哥们往往被打得束手无策，因为你不可能击杀历史投影，那只是虚无的一个片面人格，更别说女性可以召唤大量历史投影对你进行围攻，你是万万不可能战胜一切的。</p>\n<p>这里需要注意的是：<br>1.历史投影的选取目标，不局限于前男友，有时候优秀的前追求者也在被选召的范围内。<br>打个比方：一名女性年轻时被高富帅追求过，那么在年轻时，她就觉得自己的婚恋价值足以匹配这位高富帅；等到年纪大了，被毒打过后，她虽然心里明白自己不匹配，但嘴上不会承认，不仅不会承认，反而会利用这些优秀的前追求者，对老哥们进行降维打击，以此达到自身的目的。</p>\n<p>2.历史投影很可能并不存在，是女性依靠身边朋友的经历、网上的段子，进行编造的、彻底的虚无造物。</p>\n<p>所以说，一旦女性从时间长河中召唤历史投影，老哥们是万万打不过的。</p>\n<h3 id=\"第十四招，也是我最厌恶的招数：旁敲侧击、步步为营\"><a href=\"#第十四招，也是我最厌恶的招数：旁敲侧击、步步为营\" class=\"headerlink\" title=\"第十四招，也是我最厌恶的招数：旁敲侧击、步步为营\"></a>第十四招，也是我最厌恶的招数：旁敲侧击、步步为营</h3><p>打个比方：<br>1、女性开始若有若无地跟你讨论某些问题，频率极大时，就是在试探你的价值观，试探你对这些问题的态度，而往往，问这些的女性本身就存在这些问题(比如流产、是不是处女、婚前同居、出轨等)</p>\n<p>2.女性开始不断用各种小的方面突破男性的底限，举例子：你恐高，那就非要你陪着坐过山车；你怕水，就非要你一起去游泳；你比较害羞，就要你疯狂地在大众面前展现爱意；你比较古板，就要你学会少年气。<br>总之，你原先的原则都要被逐步瓦解，最终的试探是：如果我出轨，你还能接受我吗？如果我毁容，你还会接受我吗？如果我重病，你还会接受我吗？<br>通过不断突破男性的底限，达到控制与预埋伏笔，为自己日后犯错寻找适当的借口。</p>\n<p>以上两种方式，往往不会集中体现，一旦男性表现出反抗，女性就会顾左而言他，冷却一段时间，然后利用别的方法再次试探。<br>女性在婚恋关系中这种不正常的试探底限的心理，以及以婚恋关系为要挟手段，所进行的强制突破底限行为，在字母圈里一般称为“调教”。</p>\n<p>在字母圈里，一旦你被“调教”，你的XP就再也刹不住车；同样的道理，在现实生活中，一旦你被“试探、突破”，你生为正常男性的底线也将不复存在，得到的只会是女性不断的、肆意妄为的、更多的“试探与突破”。</p>\n<h3 id=\"第十五招：医生\"><a href=\"#第十五招：医生\" class=\"headerlink\" title=\"第十五招：医生\"></a>第十五招：医生</h3><p>有不少女性经历过婚恋关系后，逐渐将自己视作“病人”，将后来的男性视作“医生”，她们将上一段失败的感情所留下的创伤视作“病症”，她们要求“医生”必须能治疗“病人”，一旦无法痊愈，就会将所有罪责怪在“医生”身上。<br>打个比方，一位女性曾遭遇过海王，有很强的不安全感，所以当她遇见新男友时，就会强制把上一段关系中受到的伤害转移到新男友身上，她对上一段关系的总结和应对手段，全部都会施加在这位新男友身上。<br>包括但不限于“对安全感的不断强调”、“对新男友的人身控制、社交控制，乃至于精神控制”，虽然新男友并不是造成她这些“病症”的加害者，但作为新“医生”，新男友必须负责治疗，且要治疗好，否则就是新男友的问题。</p>\n<p>可众所周知，再好的医生也不能治百病，心病还需自愈，莫要折磨他人。</p>\n<h3 id=\"第十六招：人设\"><a href=\"#第十六招：人设\" class=\"headerlink\" title=\"第十六招：人设\"></a>第十六招：人设</h3><p>女性对人设的痴迷可以说达到了可怕的地步。<br>对于新认识的异性，女性擅长通过碎片化的信息，对这些异性进行“人设预构建”，也就是我们常说的“贴标签”，你表现得很有钱，给你贴上“富人”标签，你表现得很温柔，给你贴“暖男”标签，以此类推。<br>当女性为男性贴上这些由碎片化信息营造出的“人设”后，她们的大脑会不自觉遗忘本来的男性，而开始对这些反复加深记忆的“人设”，进行二次加工。<br>很多男性可能很疑惑，为什么我明明不是那样的人，但女性就认为我是那样的人，其实很简单，因为你被预先构建了一个“人设”，你的所有行为，都是这些“人设”的二次加工和深化改造，你跳不出这些预设定的“人设”，自然会成为被误解的那个人。</p>\n<p>这一招说实话，不算坏，但主要是阻碍男性与女性进一步交流，因为男性一旦被预设人设，后续的动作都会被归入这个初始人设中，一旦超出这个人设的设定，就会带来毁灭性打击，也就是男性经常遭遇的，女性突发暴躁情况，实际上就是你在她心中的人设被破坏掉了。</p>\n<p>现实中很多男性不会创立自己的人设，所以才被牵着鼻子走，一旦有心利用女性这种心理，可以大大缩短与女性接触的麻烦，快速在她心底强化自身形象，而后达成一些不可告人的目的。<br>实际上，很多PUA案例中的被害者女性，就是被“人设”欺骗，然后自动开始为这些诈骗者的“人设”添砖加瓦，以至于落入PUA陷阱。</p>\n<p>我个人不太提倡善良的老哥去营造自己的人设，因为这很不善良，同时也提醒女性朋友，人设终究是假象，不要试图用碎片化信息结构一个活生生的人，这样得到的只会是你预先想要的答案。</p>\n<h3 id=\"第十七招：围点打援\"><a href=\"#第十七招：围点打援\" class=\"headerlink\" title=\"第十七招：围点打援\"></a>第十七招：围点打援</h3><p>女性经常会揪住男友或老公的某一个缺点不断攻击，但如果你认为，女性只是对这一点有抱怨，那你就大错特错了。<br>女性实际上是不好对你直接进行全面批判，所以才从你的诸多“缺点”中选取某一个，然后重兵围困，这种时候，老哥们常用的方法就是派出“援军”。<br>这里所说的“援军”，就是老哥们自认为的自身优点，老哥们以为“援军”到了，围城可以被破掉，可实际上女性就是等你的“援军”过来，然后对“援军”进行伏击，从而达成以点破面，以局部优势打整体优势，分而治之的目的。</p>\n<p>打个比方：<br>老哥洗澡不频繁，然后女性指责你，你会说“我工作很努力，只是太累了才不洗澡”、“我很用心对你，但我确实洗澡不频繁”之类的话，然后女性就会放弃“不洗澡”这个点，一一击破你派出的“援军”。<br>到最后，你发现自己被骂了个通透，好像一无是处，而女人也发泄了心中长期的不满，将自己的隐性要求展露，并再一次巩固了自己的优势地位。</p>\n<p>引申一下：这一招一旦使用，后患无穷，因为她的指责全部都是她潜藏的目的，是对老哥未来人生规划的硬性要求，一旦达不到，她就可以借题发挥，然后引申回最初那一幕，表示是老哥的问题，是老哥没有理解她的意思，她明明已经表达过了，是老哥没有用心。</p>\n<h3 id=\"第十八招：标准指定-定价权-市场垄断\"><a href=\"#第十八招：标准指定-定价权-市场垄断\" class=\"headerlink\" title=\"第十八招：标准指定+定价权+市场垄断\"></a>第十八招：标准指定+定价权+市场垄断</h3><p>1.标准制定，这很好理解，也就是婚恋关系中，所有的规则都由女性来制定、修改、补充，男性只能在女性制定的规则内玩。</p>\n<p>2.定价权，婚恋关系中，双方的投入所换算的价值，完全由女方来决定其高低。</p>\n<p>打个比方，男方日常接送、投喂、倾听甚至负担更多账单，男方认为自己付出更多。<br>可一旦和女方发生争辩，从女方口中再次听到这些行为的价值，男方就傻了。<br>因为女方可以随口改变你自认为的高价值婚恋行为，并进行压价，而你没有定价权，你只能傻听着，说不定还会在潜移默化下，认可女性对你所投入的价值的定价。<br>同时，女方即便付出更少，但通过定价权，也可以直接提高自身婚恋行为的价值，以此维持一种”虚假”的公平。</p>\n<p>3.市场垄断，进入婚恋关系后，女性往往会要求男性断绝异性联系，而她自己会找各种借口，保存自身的异性人脉。<br>这就是垄断，将男性的选择权彻底夺走，却保留自身的选择权，配合第十二招的饱和式恋爱，长久下来，男性会逐渐失去正向的婚恋价值(没错，和异性多接触，就能提高自身的婚恋价值)，而女性得以保存这种价值。<br>当感情真的走到陌路的时候，哪一边吃亏，不言自明。</p>\n<p>相信上过班的老哥，比较理解这种手段的可怕性。</p>\n<h3 id=\"第十九招：啄木鸟\"><a href=\"#第十九招：啄木鸟\" class=\"headerlink\" title=\"第十九招：啄木鸟\"></a>第十九招：啄木鸟</h3><p>招如其名，啄木鸟不断啄击大树，看起来没多大影响，实则会在大树身上留下数不清的小孔，还美其名曰“捉虫”。</p>\n<p>这种战术在实战中一般表现为：突发性在你身边叹口气，你去问又说没有；突然表现得极为沉默，不接你的话，让你很尴尬；突发性表现出萎靡不振的样子，让你担心又不说清楚原因。<br>不是一次，不是几次，是分成上百上千次，隐藏在你生活的每一个片段里。<br>可能有老哥要问了，这有什么用吗？<br>当然有用。<br>这个战术一旦潜移默化开始影响老哥，就会达到浅层次的情绪控制(到最后，她只要啄一下，你的情绪就会开始波动、害怕、担忧，怀疑自己身上出现了“虫子”)，实现低层次情绪暴力的效用(你的情绪因她的情绪而波动，每日都担心她会啄一下，严重的情况下，一天可以被啄很多下)。</p>\n<p>这招最可怕的是，不易判别，不易发现，即便发现了，也没有太好的应对方式，大多数时候，男性因为本身被要求坚强，是难以对啄木鸟说不的。<br>可就我观察来看，男性的心理其实相当脆弱，在啄木鸟的不断啄击下，男性内心遗留的破防效果是连续且久远的，处于啄木鸟长期不间断打击下的老哥，最严重的情况下，会出现完全丧失自信心、完全丧失生活乐趣的情况(详细参考40岁左右的中年男性的心理状态)。</p>\n<p>这一条，女性也经常用来对付孩子，所以老哥们家里如果有孩子，老婆又不经意使用啄木鸟战术，老哥们最好能和自己老婆谈谈，这种战术会像慢性毒药一样，缓慢摧毁掉孩子的信心。</p>\n<p>其实在人际交往中，啄木鸟也很可怕。比如一个不算亲近的朋友，每天找你借点什么，可能是从卷纸上撕一点点纸，可能是拿走你一根笔，也有可能是找你带顿早饭不给钱，日积月累的占便宜行为，实际上就是一种啄击，让你这颗大树很不爽，但又不能反抗。久而久之，朋友占了便宜，你反而心情越来越差，内心中还产生了“不就是那么点东西吗，我到底在生什么气”的道德枷锁，最严重的情况下，你一看见那位朋友，就浑身不舒坦。<br>这种人际交往中的啄木鸟，多发于住校学生中，为人父母的老哥可以常常和孩子们交流、交流，免得孩子一直沉浸在“因小事产生的道德疑惑，继而产生的看似对他人厌弃，实则是自我厌弃”的情绪中。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"在docker中编译vsto应用","url":"/blog/2022/12/15/build-vsto-in-docker/","content":"<h2 id=\"限定windows容器\"><a href=\"#限定windows容器\" class=\"headerlink\" title=\"限定windows容器\"></a>限定windows容器</h2><p>首先，正如<a href=\"/blog/2022/12/09/dotnet-build-vs-msbuild/\" title=\"dotnet build和msbuild的区别\">这里</a>所验证的，vsto的编译与调试需要使用Visual Studio的<a href=\"https://visualstudio.microsoft.com/zh-hans/vs/features/office-tools/\">Office build tools</a>。</p>\n<p>而且<a href=\"https://developercommunity.visualstudio.com/t/please-port-visual-studio-tools-for-office-vsto-to/757925#T-N1439688\">微软表示</a>由于COM宿主（在这里是Office）<a href=\"https://github.com/dotnet/runtime/issues/12018#issuecomment-551214265\">只能支持一个.NET版本</a>（.NET Framework 4.8），所以为了兼容以前的插件，将<a href=\"https://github.com/dotnet/core/issues/5156#issuecomment-853430132\">不会更新vsto至支持.net 5+</a>，建议大家使用跨平台的<a href=\"https://learn.microsoft.com/en-us/office/dev/add-ins/overview/office-add-ins\">Javascript APIs</a>。虽然大家<a href=\"https://developercommunity.visualstudio.com/t/please-port-visual-studio-tools-for-office-vsto-to/757925#T-N1440449\">纷纷表示</a>Javascript APIs就是一陀屎，但也只能被迫接受<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/getting-started-programming-vsto-add-ins\">这个现实</a>：vsto不支持跨平台的.net core。</p>\n<p>综上，虽然我们可以用<a href=\"https://www.winehq.org/\">wine</a>来支持msbuild(比如<a href=\"https://github.com/RektInator/msbuild-docker\">msbuild-docker</a>)，但想要编译vsto应用，只能够在windows容器中。</p>\n<h2 id=\"极其不愿意的使用windows容器\"><a href=\"#极其不愿意的使用windows容器\" class=\"headerlink\" title=\"极其不愿意的使用windows容器\"></a>极其不愿意的使用windows容器</h2><p>微软有官文档指导如何<a href=\"https://learn.microsoft.com/en-us/visualstudio/install/build-tools-container\">在windows容器上安装编译工具</a>。</p>\n<p>基于官方示例，我们有两个修改点：</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility\">使用Windows Server 2019</a></li>\n<li>添加<a href=\"https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools#officesharepoint-build-tools\">vsto的开发套件</a></li>\n</ul>\n<p>注意：如果宿主是Windows Server 2022，那就改回<a href=\"https://hub.docker.com/_/microsoft-windows-servercore\">mcr.microsoft.com&#x2F;windows&#x2F;servercore:ltsc2022</a>。除此之外与2019别无二致。</p>\n<p>完整的Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># escape=`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Use the latest Windows Server Core 2019 image.</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/windows/servercore:ltsc2019</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restore the default Windows shell for correct batch processing.</span></span><br><span class=\"line\"><span class=\"keyword\">SHELL</span><span class=\"language-bash\"> [<span class=\"string\">&quot;cmd&quot;</span>, <span class=\"string\">&quot;/S&quot;</span>, <span class=\"string\">&quot;/C&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> `</span></span><br><span class=\"line\">    <span class=\"comment\"># Download the Build Tools bootstrapper.</span></span><br><span class=\"line\">    curl -SL --output vs_buildtools.exe https://aka.ms/vs/<span class=\"number\">17</span>/release/vs_buildtools.exe `</span><br><span class=\"line\">    `</span><br><span class=\"line\">    <span class=\"comment\"># Install Build Tools with the Microsoft.VisualStudio.Workload.OfficeBuildTools workload, excluding workloads and components with known issues.</span></span><br><span class=\"line\">    &amp;&amp; (start /w vs_buildtools.exe --quiet --wait --norestart --nocache `</span><br><span class=\"line\">        --installPath <span class=\"string\">&quot;%ProgramFiles(x86)%\\Microsoft Visual Studio\\2022\\BuildTools&quot;</span> `</span><br><span class=\"line\">        --<span class=\"keyword\">add</span><span class=\"language-bash\"> Microsoft.VisualStudio.Workload.OfficeBuildTools --includeRecommended `</span></span><br><span class=\"line\">        --<span class=\"keyword\">add</span><span class=\"language-bash\"> Microsoft.VisualStudio.Component.TeamOffice.BuildTools `</span></span><br><span class=\"line\">        --remove Microsoft.VisualStudio.Component.Windows10SDK.<span class=\"number\">10240</span> `</span><br><span class=\"line\">        --remove Microsoft.VisualStudio.Component.Windows10SDK.<span class=\"number\">10586</span> `</span><br><span class=\"line\">        --remove Microsoft.VisualStudio.Component.Windows10SDK.<span class=\"number\">14393</span> `</span><br><span class=\"line\">        --remove Microsoft.VisualStudio.Component.Windows81SDK `</span><br><span class=\"line\">        || IF <span class=\"string\">&quot;%ERRORLEVEL%&quot;</span>==<span class=\"string\">&quot;3010&quot;</span> EXIT <span class=\"number\">0</span>) `</span><br><span class=\"line\">    `</span><br><span class=\"line\">    <span class=\"comment\"># Cleanup</span></span><br><span class=\"line\">    &amp;&amp; del /q vs_buildtools.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define the entry point for the docker container.</span></span><br><span class=\"line\"><span class=\"comment\"># This entry point starts the developer command prompt and launches the PowerShell shell.</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2022\\\\BuildTools\\\\Common7\\\\Tools\\\\VsDevCmd.bat&quot;</span>, <span class=\"string\">&quot;&amp;&amp;&quot;</span>, <span class=\"string\">&quot;powershell.exe&quot;</span>, <span class=\"string\">&quot;-NoLogo&quot;</span>, <span class=\"string\">&quot;-ExecutionPolicy&quot;</span>, <span class=\"string\">&quot;Bypass&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>编译docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t buildtools:latest -m 4GB --progress=plain .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用vsto-add-in-example项目来验证\"><a href=\"#使用vsto-add-in-example项目来验证\" class=\"headerlink\" title=\"使用vsto-add-in-example项目来验证\"></a>使用<a href=\"https://github.com/suyu0925/vsto-add-in-example\">vsto-add-in-example</a>项目来验证</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Invoke-WebRequest</span> <span class=\"literal\">-Uri</span> https://github.com/suyu0925/vsto<span class=\"literal\">-add-in-example</span>/archive/refs/heads/main.zip <span class=\"literal\">-OutFile</span> vsto<span class=\"literal\">-add-in-example</span>.zip</span><br><span class=\"line\"><span class=\"built_in\">Expand-Archive</span> vsto<span class=\"literal\">-add-in-example</span>.zip <span class=\"literal\">-DestinationPath</span> .</span><br><span class=\"line\"><span class=\"built_in\">Rename-Item</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;vsto-add-in-example-main&quot;</span> <span class=\"literal\">-NewName</span> <span class=\"string\">&quot;vsto-add-in-example&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用msbuild<a href=\"https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild\">还原</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"literal\">-it</span> <span class=\"literal\">-v</span> <span class=\"variable\">$</span>&#123;<span class=\"built_in\">pwd</span>&#125;/vsto<span class=\"literal\">-add-in-example</span>:C:/app buildtools</span><br><span class=\"line\">**********************************************************************</span><br><span class=\"line\">** Visual Studio <span class=\"number\">2022</span> Developer Command Prompt v17.<span class=\"number\">4.3</span></span><br><span class=\"line\">** Copyright (c) <span class=\"number\">2022</span> Microsoft Corporation</span><br><span class=\"line\">**********************************************************************</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt; <span class=\"built_in\">cd</span> app; msbuild <span class=\"literal\">-m</span> .\\ExcelAddIn.sln <span class=\"literal\">-t</span>:restore</span><br></pre></td></tr></table></figure>\n\n<p>修改发布网址</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\app&gt; (<span class=\"built_in\">Get-Content</span> .\\ExcelAddIn\\ExcelAddIn.csproj).replace(<span class=\"string\">&#x27;http://your.domain.com&#x27;</span>, <span class=\"string\">&#x27;http://debug.yourdomain.com&#x27;</span>) | <span class=\"built_in\">Set-Content</span> .\\ExcelAddIn\\ExcelAddIn.csproj</span><br></pre></td></tr></table></figure>\n<p>也可以直接使用<a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/select-xml#examples\">xml</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$xmlFileName</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>&#123;pwd&#125;\\ExcelAddIn\\ExcelAddIn.csproj&quot;</span></span><br><span class=\"line\">[<span class=\"built_in\">xml</span>]<span class=\"variable\">$xml</span> = <span class=\"built_in\">Get-Content</span> <span class=\"variable\">$xmlFileName</span></span><br><span class=\"line\"><span class=\"variable\">$installUrl</span> = <span class=\"built_in\">Select-Xml</span> <span class=\"literal\">-Xml</span> <span class=\"variable\">$xml</span> //ns:InstallUrl <span class=\"literal\">-Namespace</span> <span class=\"selector-tag\">@</span>&#123; ns=<span class=\"string\">&#x27;http://schemas.microsoft.com/developer/msbuild/2003&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"variable\">$installUrl</span>.Node.<span class=\"string\">&#x27;#text&#x27;</span> = <span class=\"string\">&#x27;http://debug.yourdomain.com&#x27;</span></span><br><span class=\"line\"><span class=\"variable\">$xml</span>.Save(<span class=\"variable\">$xmlFileName</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用msbuild<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/building-clickonce-applications-from-the-command-line\">发布</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\app&gt; msbuild <span class=\"literal\">-m</span> <span class=\"literal\">-t</span>:publish /p:PublishDir=<span class=\"string\">&quot;<span class=\"variable\">$</span>&#123;pwd&#125;.\\publish&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>bump版本号</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$xmlFileName</span> = <span class=\"string\">&quot;<span class=\"variable\">$</span>&#123;pwd&#125;\\ExcelAddIn\\ExcelAddIn.csproj&quot;</span></span><br><span class=\"line\">[<span class=\"built_in\">xml</span>]<span class=\"variable\">$xml</span> = <span class=\"built_in\">Get-Content</span> <span class=\"variable\">$xmlFileName</span></span><br><span class=\"line\"><span class=\"variable\">$appVersion</span> = <span class=\"built_in\">Select-Xml</span> <span class=\"literal\">-Xml</span> <span class=\"variable\">$xml</span> //ns:ApplicationVersion <span class=\"literal\">-Namespace</span> <span class=\"selector-tag\">@</span>&#123; ns=<span class=\"string\">&#x27;http://schemas.microsoft.com/developer/msbuild/2003&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"variable\">$appVersion</span>.Node.<span class=\"string\">&#x27;#text&#x27;</span> = <span class=\"string\">&#x27;1.0.1.0&#x27;</span></span><br><span class=\"line\"><span class=\"variable\">$xml</span>.Save(<span class=\"variable\">$xmlFileName</span>)</span><br></pre></td></tr></table></figure>\n\n<p>验证成功。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"在对html中文件上传对话框中点取消的处理","url":"/blog/2023/03/02/cancel-in-upload-file-dialog/","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>首先，我们先添加一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\">文件上传控件</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>Choose File</code>（在firefox中是Browse…），弹出文件对话框后，先随便选择一个文件，选<code>打开</code>。</p>\n<p>再次点击<code>Choose File</code>，弹出文件对话框后，这次不选择文件，直接选<code>取消</code>。</p>\n<p>如果你使用的浏览器也是edge，你会发现刚才选择的文件被移除了。</p>\n<p>这会让人有点疑惑，毕竟像我这样手欠的人还挺多，取消选择后会移除已选择的文件，感觉还挺奇怪的。</p>\n<h2 id=\"不同浏览器\"><a href=\"#不同浏览器\" class=\"headerlink\" title=\"不同浏览器\"></a>不同浏览器</h2><p>抱着试试看的想法，用chrome试了下。发现结果一样。</p>\n<p>再拿firefox试了下，咦？咦！怎么表现不一样？并不会移除已选择的文件。以前都没发现过还有这种区别。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>稍微做了下搜索。找到两个对立的issue。</p>\n<p>一个是chromium社区2008年提出的<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=2508\">issue</a>，要求取消文件选择对话框后不要清除文件；<br>一个是firefox社区同样也是2008年提出的<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=431098\">issue</a>，要求增加清除文件的方法：比如取消文件选择对话框。</p>\n<p>还真是……围城是吧。</p>\n<p>两边社区的维护者也都有很好的理由：</p>\n<ul>\n<li>赞成移除派(blink&#x2F;webkit)<br>如果用户想移除已经选择的文件，弹出对话框后点取消，这是唯一的途径；</li>\n<li>反对移除派(gecko)<br>取消是空操作，不应该强加于用户。</li>\n</ul>\n<p>最终，两边的维护者都维持原状。</p>\n<h2 id=\"统一体验\"><a href=\"#统一体验\" class=\"headerlink\" title=\"统一体验\"></a>统一体验</h2><p>对开发者来说，最好能够统一使用不同浏览器的用户体验。我倾向于统一成firefox的做法，因为想要移除已选择的文件，我们简单的加一个叉叉图标就解决了。</p>\n<p>想要hack掉edge中取消文件对话框移除已选择文件的做法，我们可以这样做：</p>\n<ol>\n<li>在用户打开文件对话框时，克隆input控件；</li>\n<li>在用户关闭文件对话框时，判断用户是否选择了取消，如果是，恢复input控件。</li>\n</ol>\n<p>代码片段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;changeFile(event)&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;clickFile(event)&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;removeFile()&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;remove&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> clone = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">changeFile</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> fileElement = event.<span class=\"property\">target</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;file changed: &quot;</span>, fileElement.<span class=\"property\">value</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (fileElement.<span class=\"property\">value</span> == <span class=\"string\">&quot;&quot;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            fileElement.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(clone[fileElement.<span class=\"property\">id</span>], fileElement.<span class=\"property\">nextSibling</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            fileElement.<span class=\"property\">parentNode</span>.<span class=\"title function_\">removeChild</span>(fileElement); <span class=\"comment\">//removing parent </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">clickFile</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;click event is fired&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> fileElement = event.<span class=\"property\">target</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (fileElement.<span class=\"property\">value</span> != <span class=\"string\">&quot;&quot;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            clone[fileElement.<span class=\"property\">id</span>] = fileElement.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>); <span class=\"comment\">//cpoying clone</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">removeFile</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;file&quot;</span>).<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"如何应对并发(1) - 关于数据索引","url":"/blog/2019/06/04/caoz-concurrent-1/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=400470606&idx=1&sn=eff5350f80190ad6e32659f434aac970&scene=21#wechat_redirect\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-1-关于数据索引\"><a href=\"#如何应对并发-1-关于数据索引\" class=\"headerlink\" title=\"如何应对并发(1) - 关于数据索引\"></a>如何应对并发(1) - 关于数据索引</h2><p>前两天收到一个消息是这样说的，一个学生去面试，题目赫然就是从浏览器输入url到网页打开，都发生了什么。这个学生特别开心，因为订阅了我的公众号，所以对这类问题早有准备。希望他能顺利拿到心仪的offer。</p>\n<p>参见旧文 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=209679438&idx=1&sn=d68c1512ad23f6e164f69bd351a18c62&scene=21#wechat_redirect\">一则经典技术面试题目的解读</a></p>\n<p>书归正传，应对并发，其实从整体架构来说分很多部分，比如常见的，存储层的i&#x2F;o优化，网络层负载均衡，通讯层的连接池等等，不过我这里不讲这些。不讲这些的原因第一呢，是这些我基本都不太会；第二呢，是在实践过程中发现，特别是创业公司，中小企业，一般最容易出问题，也是最难处理的，往往是数据库方面的问题。 </p>\n<p>非技术人员往往会认为，负载高了，请求多了，加服务器加硬件不就完了？ 如果是只是应用程序处理，常见的负载均衡方案很成熟，加加硬件的确可以快速，有效的分担负载，提高支撑能力；但是且慢，通常到了数据库这里，如果你前期设计不合理，或者对这类问题考虑不全，那么，加硬件，很遗憾，是没用的。</p>\n<p>我们常说运维中要关注所谓的单点隐患，什么是单点隐患呢？就是这个点一旦崩溃，无法实现自动的灾难容错响应，从而导致全盘崩溃。一般比如说web服务器，负载均衡轮询，一台出问题了，系统会自动将负载转移到其他服务器，那么数据库可以不可以呢？其实不是不可以，但是就比较需要做好设计，否则很可能直接就死在这个环节上。而发展趋势不错的创业公司死在数据库的并发能力上的案例，可以说，比比皆是。</p>\n<p>再插一些题外话，如果你还是学生，你有意未来往互联网技术领域发展，那么数据结构这么课特别的重要，特别的关键。我上大学的时候糊里糊涂，选中了这门课却天天翘课，工作后特别后悔。就算你不想从事技术，而只是想从事一些产品方面的工作，我个人建议有可能也认真学习一下这门课，目前不少互联网公司都希望产品经理有一点技术背景，这样和技术沟通的时候会更顺畅一些。对研发工作的跟进也会能理解更多一些。</p>\n<p>今天的第一课，我们先要对数据索引和查询效率有个基本认识，连基本优化都做不好去讲什么架构是没意义的。</p>\n<p>第一个问题，为什么一条查询语句，使用了数据索引会提高效率？</p>\n<p>以及，通过一条SQL语句，能否估算出其执行开销和最佳索引选择？</p>\n<p>熟悉数据结构同学大概知道，一般数据库的索引大概是btree，b+tree，类似这样的结构，那么现在非关系型数据库特别流行，也就是所谓的key-value数据库，最求极端效率，通常是 hash结构的数据索引。但其实这些，我认为对于我这样笨的人来说，通常，只需要理解最基本的概念就行，最基本的是什么呢？就是数据索引提供了一种有序，在有序的情况下，进行检索，二分法效率最高，n条记录中定位查询开销是 log2(N)，（hash索引效率更高，但不提供关系型查询，应用场景比较受局限）。 那么所谓的btree结构也好，或其他的类似结构也好，把握一个原则，接近二分法的查询效率，因为如果做一个完全有序的队列，那么插入，删除，修改需要做的操作开销太大了，大家可以思考一下，所以才会有人设计树形结构，兼顾查询和更新操作。理解这一点对理解整个数据查询效率和索引结构，帮助极大。</p>\n<p>简单复习就是，查询效率的关键是有序，二分，反过来理解就是，无需遍历所有数据，即可实现快速的定位。</p>\n<p>这里就引出了一个特别经典的题目，ip地址反查。</p>\n<p>应用场景非常常见，你上一个什么旅游订票的网站，社区，或者上百度，该网站都希望立即知道你的地理位置，从而基于你的位置定向投放内容，比如当地酒店，或者当地的本地广告。网站一般是获取用户的ip地址，然后在ip-&gt;地区的对应表里去查询比对，通常，ip - 地区的对应表，有大约十万到数十万条记录（看地区粒度），格式是 ipstart, ipend, area 这样的数据结构。如果用纯粹的SQL查询是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> iparea <span class=\"keyword\">where</span> $ip <span class=\"keyword\">between</span> ipstart <span class=\"keyword\">and</span> ipend;</span><br></pre></td></tr></table></figure>\n\n<p>在早期mysql及大部分数据库是不支持between and 中使用索引的，据说最新版本已经提供了支持，但是最近几年没有从事技术，没有测试，不知道效率如何，那么在早期，如果数据查询，这样一条SQL,无法使用索引，就要遍历所有结果，这个开销是不能忍受的，（虽然不用1秒就可以执行出结果，但是开销依然比较大，一秒钟可以处理的查询最多几十次，而我们的要求是，一秒钟几千次！）</p>\n<p>那么这个问题的特点是什么呢，ip地址区间表并不是经常变化的，比较固定，那么在这种情况下，其实不用数据库都可以，一个完全排好序的队列放在内存里，程序用二分法来查询，每秒种处理几千个非常轻松（这程序不用教了吧），当然，其实还有更极端效率的处理途径，这里不展开，有兴趣的同学自己思考。</p>\n<p>此处插播一条广告，目前国内最好最权威的ip地址区间表来自于高春辉，利益相关，我超过15年的好基友，互联网传奇人物，需要定期更新ip地址区间表的建议找他购买，联系方式，去微博搜索 高春辉 。</p>\n<p>再插播一个题外话，我在微博上说过，百度最应该购买，这是不耍流氓的情况下提升收入最快的方法，可能很多人不理解，其实百度有很多广告投放是按地区投放的，04年底 我刚进百度的时候闲着没事就给升级了一个ip地区对应表，把大量未知地区的ip定位到了已知地区，很多分地区投放的广告展现率一下子就提高了，收入自然随之增长，这玩意虽然看上去不是什么高大上的算法，但是勤更新对收入影响杠杠的。（小贴士，国际ip管理机构会不定期释放ip资源出来给新的网络设施和上网服务商，所以在最近这些年，ip地址区间表还是不断的扩充中）</p>\n<p>第二个问题，从一个常见SQL如何确定索引的构成</p>\n<p>以下所有案例均以mysql 为例，原因是，这个我熟悉。</p>\n<p>非mysql可能部分语法不同，但逻辑和思路相同。</p>\n<p>发现有一个简单问题很多人会答错，一个SQL可以用到几个索引？很多人会说是多个，其实是一个，目前一些第三方的数据引擎似乎开始支持一条SQL使用多索引了，比如我前几天看淘宝公开的那个开源数据结构的文档，从官方博客的描述中似乎有这样的提法，但是我最近确实很懒惰也脱离技术，所以没有去测试和仔细研究，这个留给有兴趣的同学吧，我还是回头说通常，我们用mysql或其他常见数据库的，一个查询只能用到一个索引；但是这里要强调的是，一个索引可以用到多个字段，也就是所谓的复合索引。</p>\n<p>那么，按照刚才提到的，基于有序这个概念，如何理解索引的使用和效率呢？特简单，你就把索引当作是一个有序数列放在脑子里，然后思考这个SQL，这个条件子句和排序子句，能否在这个索引的连续范围内精确命中结果，也就是所谓索引命中率高，这个查询就效率高，如果无法在索引这个有序数列连续范围内精确命中，查询效率就不高。</p>\n<p>那有人说了，索引并不是真的有序数列啊，我说的是一种模拟的思考方式，这样思考效率最高，当然，必须案例说话。</p>\n<p>比如一个社区，我希望用户进来，就能看到本地的用户，当然，是最新在线的，否则都是死用户就无法交流了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> area<span class=\"operator\">=</span><span class=\"string\">&#x27;$area&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> lastlogin <span class=\"keyword\">desc</span> limit <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>(这个 limit 特别重要)</p>\n<p>稍微懂一点索引的同学都应该知道，正确的索引是area+lastlogin 复合索引，那么，我们把这个思考方式推演一下。</p>\n<p>如果只把area当作索引会怎样，数据库会把符合这个area的所有结果拿出来，然后按照lastlogin排好序给你，这样就要遍历所有符合这个area的用户记录；</p>\n<p>如果只把lastlogin作为索引会如何，我们想象，lastlogin是一个有序的数列，数据库会从最后一条开始往前挨条遍历，每条都去比对area是不是符合查询条件，直到数出30条，遍历结束，请注意，不是全部遍历，在这里，如果area 是个热门城市，比如上海，北京，可能遍历200次左右就出结果了，效率很快，但如果是个冷门城市，可能要遍历几千条几万条结果，甚至全部数据表遍历都凑不出符合条件的30条。这样效率就要命了。 所以用lastlogin为索引，效率存在风险。</p>\n<p>那么两个我都建立索引呢？这个mysql只会选择一个索引，我记得不同数据库版本的选择策略都不同（实战中遇到过测试服务器用的索引很正确，线上服务器使用了错误索引，因为数据库版本不同），所以我给不出肯定的答案，但是有一点，两个索引没有意义，都不是最优解。</p>\n<p>那么如果把lastlogin+area建立索引呢？你们设想一下，两个字段拼在一起，作为有序数列，然后数据库去查询的时候，lastlogin+area,这时候area是没用的后缀，在排序中根本体现不出他存在的意义，和单独lastlogin索引是完全一样的。</p>\n<p>而area+lastlogin呢，把两个字段拼接然后排好序后，看这条SQL在这个数列中查询的体现，所命中的完全是连续的30条，也就是数据库只遍历30条索引记录即完成搜索，效率最好。</p>\n<p>这段有点啰嗦，如果不理解，建议多读几遍，理解这个思路，对理解索引的效率帮助特别大，我刚工作的时候写SQL也是瞎写，对索引一知半解全靠蒙，有了这个概念后豁然开朗，从此对索引效率的认识精进了一大截，我看网上各种索引优化的教程，各种规律总结，其实你把这个认识达到了，那些规律基本上不用记，都浅显的如1+1一样。</p>\n<p>理解如上思路，就能一并理解如下策略</p>\n<p>A+B索引可以替代A索引，而不能替代B索引。</p>\n<p>where key like ‘keyword%’ 可以用到key 索引</p>\n<p>where key like ‘%keyword%’ 不能用到key索引</p>\n<p>我很笨，所以我的理解方式都是基于中学生知识基础的思路，如果您有更好的理解思路，也可以忽略本文。</p>\n<p>第三个问题，如何评估SQL的执行开销</p>\n<p>刚才提到一个重要的概念，就是索引中遍历的记录越少，效率越高，遍历的记录越多，效率越差。 在慢查询日志或者explain分析中，一个重要的指标是 affected rows，（好像也有别的叫法，不查证了，大家应该能知道我说的是什么），这个就是索引遍历的记录说，我以前硬翻译叫做影响结果集，我后来看其他人写的数据库文档叫索引扫描行数，概念是一样的。</p>\n<p>那么，要强调一点，一条查询语句，其执行开销，在大多数情况下，与影响结果集，也就是索引扫描行数，呈线性相关，举两个常见经典数据优化的问题案例。</p>\n<p>经典案例1，大翻页问题</p>\n<p>论坛社区常见，翻页越靠后效率越低，很多论坛本身访客到没事，访客不太会翻几百页几千页，但是被搜索引擎蜘蛛抓取的时候，因为连续抓取大翻页，导致数据库崩溃，这案例太多了，很多站长为此郁闷莫名，不知所措。</p>\n<p>案例SQL如下</p>\n<p>按最新更新的板块第一页帖子</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> post <span class=\"keyword\">where</span> boardid<span class=\"operator\">=</span>$id <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> lastupd <span class=\"keyword\">desc</span> limit <span class=\"number\">0</span>,<span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>按最新更新的板块第100页帖子</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> post <span class=\"keyword\">where</span> boardid<span class=\"operator\">=</span>$id <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> lastupd <span class=\"keyword\">desc</span> limit <span class=\"number\">3000</span>,<span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这两个SQL 看上去只有limit有区别，索引都是boardid+lastupd (不要搞错顺序，理解一下)</p>\n<p>但第一条SQL索引只扫描30行；第二条SQL索引扫描了3030行，其效率是第一条SQL的1&#x2F;100.</p>\n<p>搜索引擎的蜘蛛抓取 大翻页就是 这样把论坛搞死的。</p>\n<p>经典案例2，积分排行问题</p>\n<p>比如很多小游戏提交成绩，告诉你排名全球多少名，有印象吧。</p>\n<p>这个问题我依稀记得云风大神吐槽过，好像曾经陌陌有一款游戏在这里有非常严重的性能问题，被他狠狠BS了一把。</p>\n<p>案例SQL如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> gamescore <span class=\"keyword\">where</span> gameid<span class=\"operator\">=</span>$gameid <span class=\"keyword\">and</span> score<span class=\"operator\">&gt;</span><span class=\"string\">&#x27;$score&#x27;</span> ;</span><br></pre></td></tr></table></figure>\n\n<p>索引怎么建？</p>\n<p>gameid+score复合索引，顺序不能错，为什么，按照上面说的思路，自己思考一下。</p>\n<p>那么这个效率怎么评估？</p>\n<p>看结果，如果你游戏成绩特别好，前几名，前几十名，你的结果就是索引扫描行数，（如果索引都设计错了那就不要提了）。</p>\n<p>如果你的游戏成绩很烂，几万名，几十万名，那么索引扫描了几万条，几十万条，就效率非常低了，如果有一批人同时在提交成绩，又都是这种几万名，几十万名的用户，数据库非崩溃不可，你再多服务器也白搭。</p>\n<p>所以，常见的解决方法是，积分排行只针对最靠前的用户提供，后面只给估算或区间了。</p>\n<p>当然，这里有个终极方案，用redis的有序数组结构，一劳永逸的解决这个问题，redis四种数据结构，各有所长，有兴趣的可以深入研究一下，今天这里不展开。</p>\n<p>第四个常见问题，MYSQL 分析和优化的方法</p>\n<p>刚才我说了索引扫描行数，或者说影响结果集，对查询效率的影响极大，那么有人说了，怎么证明呢？</p>\n<p>给大家一个日常SQL分析和自我测试的方法。</p>\n<p>首先，你一条SQL如果执行很慢，你用explain 解析一下，看看是否影响结果集很大，这是其一。</p>\n<p>其二，对这条很慢的SQL做一个状态拆解，在mysql中是这样操作的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> profiling<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>执行问题SQL;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> profile <span class=\"keyword\">for</span> query <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>通常，如果这个问题SQL确实是索引出了问题，也就是影响结果集，或者说索引扫描行数较多，那么他的执行状态最多的消耗就在 sending data这个状态上，这个状态不要被名字骗了，其实负载是在i&#x2F;o，硬盘扫描上。</p>\n<p>你测试的时候就可以看，影响结果集的数字，和sending data上状态的开销，是不是线性相关，对一个复杂的数据表结构，导入上百万条记录，然后用不同索引方式和不同SQL查询，利用 explain 和set profiling 这些操作反复分析SQL的影响结果集和开销构成。结合我今天说的思考方式，就可以更好理解了。</p>\n<p>而且对于日常疑难的分析，这一招也是特别关键特别重要的。</p>\n<p>今天啰嗦的，都是数据优化分析的基本功，其实对某些高手来说，简直都弱爆了，但是我发现大部分一线程序员，特别是从业时间不长的年轻人，并不能完全了解和认识这些。</p>\n<p>我不是计算机科班出身，数据结构这门课也没好好上过，很多东西都是工作中慢慢琢磨出来的，如果有不严谨不准确的，万望指出，但我只自嗨的说一点，我这些招数，对大部分创业公司，中小型企业，应对百万级，千万级请求的问题而言，还是颇为管用，当然，今天只是一个开始，这一系列还将继续。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"如何应对并发(2) - 请求合并及异步处理","url":"/blog/2019/06/04/caoz-concurrent-2/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=400480069&idx=1&sn=4119397d0e3b0444f04d25f76ecdfbe3&scene=21#wechat_redirect\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-2-请求合并及异步处理\"><a href=\"#如何应对并发-2-请求合并及异步处理\" class=\"headerlink\" title=\"如何应对并发(2) - 请求合并及异步处理\"></a>如何应对并发(2) - 请求合并及异步处理</h2><p>先说昨天有人反应的问题</p>\n<p>有网友提醒，说数据查询只能用到一个索引，这个表达不精确，只限于单表的查询，而联表查询实际上每个表都可以有其独立的索引被用到。</p>\n<p>非常感谢这个提醒，其实呢，这里必须额外解释一下。</p>\n<p>我刚工作的时候呢，特别喜欢写复杂的SQL，觉得自己特酷，写出一个复杂的连表查询逻辑感觉智商优越感爆棚，然后还十分得瑟的给人看这SQL写的思路多牛逼。但是工作十多年后呢，慢慢意识到这样其实不对，特别是面对高并发，高处理请求的时候，联表查询所带来的问题不仅仅是效率的问题，更包括分布式，扩展性的问题，后来我们就制定了一个原则，禁止使用联表查询。所以我系列文章里不会提及任何涉及联表查询的优化问题。可能有的朋友会觉得这样是不是有些极端，是的。但是对于应对高并发的业务场景，这一条其实并不是我个人的规定，很多公司和架构师也都有这样的规定。</p>\n<p>那么禁止联表查询会带来一系列无法满足查询需求的问题，这个在后面的文章我会提到，在计划中这是第四篇的内容。</p>\n<p>另外，我可能是跟草根打交道比较多，加上我自己学数据库和编程基本都是野路子，所以特别理解草根创业者，以及野路子程序员面对技术问题的困境和纠结，实话说，因为一直以来跟草根创业者沟通比较多，在实战中遇到的各种优化问题和处理场景，我敢说要比很多大公司的架构师还要多，但也实话说可能并不是那些大公司所遇到的问题那么深。所以我的风格一直是，让菜鸟能够更容易理解和领悟，达到处理较高量级的性能优化水平。但是从几年前架构师大会上，就总有一些逼格很高的技术人员瞧不起我的路数，觉得太low太没技术含量，这个，我也是承认的，不过，敬请自便吧。</p>\n<p>我所提到的几个案例大家可以看到，其实都是非常典型的，使用场景广泛的，一般小公司很可能撞死在里面的案例，昨天还有人留言以前一直被蜘蛛拖死论坛，看了我的文章后才恍然大悟。但是昨天没有完全解读解决方案，请允许我挖个坑，因为饭要一口口吃，我这个系列会逐渐把处理思路一步步贯通。</p>\n<p>很多人都知道说，如果查询请求过多，其实可以用内存来做缓存，比如memcache，比如redis，很多缓存方案，但是如果更新请求过多，那么缓存就没法用了。而更新请求往往比查询请求更消耗资源，这样系统i&#x2F;o压力就非常大。</p>\n<p>当然，这里我要额外说一句，并不是查询请求缓存化了系统效率就会提升，和缓存设计有关，同时缓存的使用也会带来新的风险。</p>\n<p>1、如果缓存命中率不高，可能反而是负担</p>\n<p>很多人觉得加了缓存就能提高效率，未必。如果缓存命中率不高，查询完缓存没有再去查询数据库，那么实际上是额外开销，只有命中率超过50%，才是有价值的缓存。</p>\n<p>2、如果缓存设计不合理，系统开销只会更高</p>\n<p>这个我们自己也遇到过，比如有些人喜欢把大量记录扔在缓存里，一条记录可能内容几百k甚至几兆，但是在我们用的时候可能只用到这个记录的某几个字段，这时候通过缓存去读取记录然后再从记录中拆解到这个字段的开销，比直接从数据库中读取这个记录的指定字段，系统开销要大不少。导致你需要更多的缓存服务器，当然，好处是数据库毕竟压力降了（数据库分布式比缓存服务器分布式设计上要复杂一些），但是对于我这样的抠门屌丝程序员，这种开销我是不能忍受的，有钱任性的人可以无视。</p>\n<p>3、雪崩效应的风险，</p>\n<p>缓存使用分两种，一种是只通过缓存调用，系统后台定时更新的，如果数据丢失或损坏无需从数据库读取；另一种是先从缓存查询，如果没有符合的记录再找数据库，那么就存在这样的风险，一旦缓存内容被重置或缓存服务器出现问题导致大量内容丢失，那么所有请求全部回源，数据库瞬间过载崩溃，导致系统架构响应崩溃。</p>\n<p>所以，缓存设计也是一门重要的学问，然而，这部分，很抱歉，不展开。</p>\n<p>部分内容明天可能会说一下。</p>\n<p>今天说的重点是，关于更新请求，是不是真的不能缓存呢？其实不是。</p>\n<p>这就是今天要明确的，请求合并，异步处理。</p>\n<p>第一，请求合并。</p>\n<p>先说个极端案例，以前有个挺不错的技术，但是早期接触数据库不多，刚开始做服务端的时候，设计了一套框架，然后用框架来实现业务逻辑，但是后来做性能压测就不行，我当时帮他分析，一下子就发现问题了。</p>\n<p>一个游戏角色，设置了一个操作对象，那么比如说角色生命的增加或减少，是一个方法，经验的增加或减少，是一个方法，金钱的增加和减少，是一个方法，以此类推， 那么游戏角色pk后，很多数值发生了改变，就依次执行这些方法，这不挺正常的逻辑么？但是我们看到的是，对同一个数据表同一条记录的不同字段，执行了多次更新操作，这些请求就是没必要的，完全可以合并成一条update语句。</p>\n<p>再说个常见初级程序员易犯错误，比如要列一个列表，显示符合条件的图书目录和作者信息，那么这人设置了如下方法，book.search(条件)， book.read(id)，先执行book.search，返回所有符合条件的图书id列表，然后循环执行book.read，读取所需要的作者信息，问题就来了，先执行了一个查询，然后在循环中不断执行查询操作。而实际上我们知道，其实一条SQL就解决了。</p>\n<p>以上两个案例都来源于一种思考习惯，就是我们常见的使用框架，使用面向对象的开发方式，这种方式当然优点多多，但在涉及性能优化的场合，往往其中存在大量的重复逻辑和冗余请求，往往很多可以合并的操作没有合并，很多程序员习惯用这样的方式思考，当然你说协同方便，开发效率高（其实我觉得也未必），但是调优成本就高很多了。 我可能属于上古时期学编程的，面向对象的思路一直不太灵光，所以我写程序的时候偏重于面向过程，缺点就是写出来的东西很low很让某些人不齿，优点就是调优的时候往往看的更清楚。</p>\n<p>以上这两个案例都是指在同一个用户操作行为中程序员编码不注意出现的重复请求操作，都是面向对象的编程中容易犯的错误，但是稍微有一些经验的程序员应该都能避免。</p>\n<p>下面说另一类常见问题，就是不同用户操作行为中出现的类重复请求操作，是否可以合并呢？答案是，其实也可以，这就是今天说的第二点，异步处理。</p>\n<p>常见案例，一个论坛，帖子页，用户每访问一次，就要 update post set views&#x3D;views+1 where postid &#x3D; $postid；一个热门论坛一天访问几百万次，上千万次，这个update操作就会执行几百万次，上千万次，别忘了这个post表又是访问请求最高的，会不会锁死？会不会响应不过来？</p>\n<p>第二个常见案例，还是一个社区，用户每次刷新页面，每次访问，都要记录 update users set lastact &#x3D;$now where userid&#x3D;$uid; 为了记录这个用户是否一致活跃及最后活跃的时间，（展示在社区中可以提高社区的活跃度，提高用户间交流的成功率），那么这个网站登录用户每天访问了多少pv，这个更新就执行了多少次。而users表显然也是一个高频率的查询需求的表。</p>\n<p>那么这两个案例，有优化空间么？</p>\n<p>其实有，而且很简单，这两个数据，其实你说实时性需要是不是那么高，是不是每个请求都必须立即处理，实际上并不一定，但是我还是希望处理更快一些，因为毕竟希望别人看到这个帖子的访问数，以及别人看到这个用户的最后时间，是非常接近的，而不是很久之后才处理的。那么怎么处理呢？就是当发生这样的行为的时候，把这个行为写到缓存里，在缓存里维持一个队列，最好用队列方式，（如果用memcache，数组的下标用increment方法，否则高访问量可能会导致数据覆盖，不展开解释了），然后后台启用一个cron任务，每分钟执行，把队列里的数据拿出来，</p>\n<p>案例1，对同一个帖子的views做汇总。（热门帖子往往点击特别频繁）</p>\n<p>案例2，对同一个用户最后活跃时间的更新请求，只保留最后一条。</p>\n<p>实测数据，越是火爆的社区，合并率越高，更新请求可以合并掉70%左右。异步更新的延迟时间不超过1分钟。如果延时加长，比如2分钟一执行，或5分钟一执行，合并率效率会更高，但是可能导致用户体验下降。</p>\n<p>以上就是今天要说的，请求合并和异步更新，这里注意的是，异步更新的内容，属于“丢了其实关系也不大”的数据，如果是非常核心的数据，异步更新要注意数据丢失的危险。</p>\n<p>那么肯定有人会问，我用了一个开源系统，我怎么知道哪些可以合并，哪些不能？</p>\n<p>下面继续讲方法论，就是你对一个毫不熟悉的系统，如何快速分析其冗余请求的构成和合并的可能性，以及合并可能带来的开销降低呢？</p>\n<p>之前有个朋友的公司，几年前做社交游戏的时候，腾讯合作，腾讯一推用户数咔嚓就上去了，然后后台就有点撑不住，请我过去看看，那么，对他们的游戏的产品，怎么开发的，代码怎么写的，我肯定是毫不知情，就是突然叫过去来分析，这怎么分析呢？</p>\n<p>慢查询日志肯定是要看的。</p>\n<p>昨天讲的 去数据库里，先show processlist;看到有疑问的SQL，去explain，然后set profiling&#x3D;1；大家回忆一下，看看索引是不是对的，看看哪些SQL本身是有问题的。这些不赘述了。</p>\n<p>下面，重点是，一般大家都会把数据查询封装成一个类对吧，让他们从这个类里加一段代码，干嘛呢，输出都执行了哪些SQL。（每秒请求非常高，所以增加日志的i&#x2F;o压力也很大，为了避免线上业务受影响，采用抽样输出，比如先算个随机数，符合什么数的才输出，然后根据抽样比例反推请求规模，输出结果存到 &#x2F;dev&#x2F;shm 目录下，为什么是这个目录，自己想一下。）</p>\n<p>打开日志我看什么呢？</p>\n<p>第一，看查询和更新的比例。</p>\n<p>第二，看最多查询的数据表有哪些，最多更新的数据表有哪些。</p>\n<p>第三，看最多查询的数据表最多查询的SQL是什么样子的，最多更新的数据表最多执行更新的SQL是怎样的，算出各自每秒的请求频率。</p>\n<p>第四，关键分析，最多查询的SQL，基于同一主键查询的比例多不多（潜台词，可以缓存化）。最多更新的SQL，基于同一主键的更新的比例高不高（潜台词，可以合并请求，异步处理，当然必须根据具体业务诉求再核对一遍）</p>\n<p>以上的操作并不需要额外编程或复杂的处理，首先用眼睛看日志找规律，其次基于规律用grep 来统计。 然后把内容整理后，询问相关的程序员，每条问题SQL的业务逻辑是什么，然后毕竟还是要让他们一线的程序员来评估业务逻辑上这些操作是否可以合并，缓存，或者异步处理。 但我想说的是，通过这种分析方式，很多非常重复的查询，非常重复的更新请求可以快速定位，即便是一个陌生系统，也可以快速找到症结所在，掌握这一种分析方法，你对系统性能优化的理解和处理能力，就会上升一个台阶。</p>\n<p>其实，其实根据两个多月运营公众号的观察和分析，我发现，写技术文章挺受累不讨好的，转发也不多，赞赏也不多，也不太容易拉粉； 公众号运营有一个规律，和知乎上皮去获取赞的规律一样，写实不如写虚，写内容不如写立场。</p>\n<p>真的，但是我还是想把这个系列写下去。</p>\n<p>这么多文章，我总结两条分享给大家，一是思考方式，二是分析方法，不论是做产品，做运营，创业，做投资，还是做技术。正确的思考方式，正确的分析方法，是最重要的。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"如何应对并发(3) - 需求裁剪","url":"/blog/2019/06/04/caoz-concurrent-3/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=400516974&idx=1&sn=66a65b0900a8a410b7268d4b9c7bbddb&scene=21#wechat_redirect\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-3-需求裁剪\"><a href=\"#如何应对并发-3-需求裁剪\" class=\"headerlink\" title=\"如何应对并发(3) - 需求裁剪\"></a>如何应对并发(3) - 需求裁剪</h2><p>今天讲一下，应对并发，应对海量数据请求的一个关键策略，也是很多程序员的盲区，需求裁剪。</p>\n<p>这个，很多公司，技术人员会说，产品经理提需求，我们完成需求，怎么可能去裁剪需求，而且，裁剪需求会不会显得很low，说明水平很差呢。</p>\n<p>其实，这是一个对需求理解的问题。</p>\n<p>所谓需求，并不仅仅是功能实现，还包括性能指标，以及所谓的边界条件。</p>\n<p>实际上，即便是我们所熟知的巨头，面对性能负载问题，也会采取限定边界条件的方式来满足绝大部分用户的正常请求。</p>\n<p>下面，案例说话</p>\n<p>案例1：搜索大翻页问题，还记得我提过的这个搜索翻页越多，负载越高的问题么。</p>\n<p>请问，</p>\n<p>淘宝搜索一个关键词，最多翻多少页？百度呢？google呢？</p>\n<p>你们自行测试一下，这些巨头给出的搜索结果条目数，我跟你们实话说，都是估算值，最大翻页数，基本不超过100页。</p>\n<p>这就是设定了边界条件。</p>\n<p>正好前几天一个做比价的创业公司问我技术问题，他们抓了很多商品定价数据，虽然并发不高，但是数据量很大，要在每个搜索中给出结果数和精确翻页数，结果一个带搜索条件的 count(*)的问题出来了，效率特别低，执行开销特别大，跑来问我怎么优化，我告诉他，连百度和谷歌都没法做这样的精确结果，你让我怎么优化。这事就必须从需求出发，第一，不需要精确的返回结果数，第二，翻页做限定。</p>\n<p>案例2：雪崩效应的处理。</p>\n<p>前天讲的，当缓存扛不住，负载传递给数据库，瞬间过载，怎么处理？你说我多加数据库行不行？那要缓存干嘛用的呢？你说我缓存做实时同步实时备份？这缓存的存储效率多高啊，网速能跟的上？ </p>\n<p>这就涉及一个灾难应急机制，简单说就是 降级服务，有损服务。</p>\n<p>在出现类似问题的时候，系统自动降级，将部分用户请求频次低，价值低但是系统开销不低的功能或者数据临时阻断停止响应，确保整体系统的稳定性。</p>\n<p>比如说，大量用户会订阅热门内容，而少数用户会订阅冷门内容，那么在缓存崩溃的情况下，系统优先恢复热门内容，暂停冷门内容的请求的响应，可能可以在开销可控的情况下先满足了90%的访问请求，当数据库负载已经回落后再逐步恢复冷门内容的请求，从而使系统在开销可控的情况下自动完全恢复，避免雪崩效应导致全局崩溃。</p>\n<p>那么，有人会问，这个降级会不会很low？ 其实腾讯邮箱和新浪微博都有过类似的处理策略。</p>\n<p>在 caoz谈能力成长 - 取舍之道 这篇其实提过一些类似案例，在早期我技术并不高明的时候，实现CNZZ统计的功能，其实有非常多的数据是有损服务的，但是实际上用户并不会感受到，因为你损失的那些边界条件外的数据是1000个用户也不会有1个去查询的内容，而如果你要满足这些可能需要付出500%甚至更多的系统开销和研发工作量，这种对于很多早期创业公司来说，非常非常重要。</p>\n<p>我们说需求裁剪，说有损服务，并不是说不满足用户需求，我知道很多人有技术洁癖或者说追求技术完美，某些文章会说中国的创业太山寨太草根，美国人的创业都是以完美为导向。那么今天我就说一点，如果不看这篇文章，有几个人知道，google原来搜索的结果是不能翻出超过100页的？大家天天用淘宝吧，请问有谁知道淘宝搜索的最大翻页是100页？ 除了写蜘蛛抓人家数据的人之外，who care ?</p>\n<p>很多站长都用CNZZ，或其他第三方统计对吧，看数据的时候，看看自己网站的来源网页，请问谁会翻到第20页之后？</p>\n<p>这就是思路的关键，用户对功能的需求，你的满足度的边界在哪里？很多程序员没有这个概念，对于数据规模小，请求并发少的应用来说，这个东西你不考虑也没什么大不了，但是如果面对数据规模大，请求并发大，你就应该有一个概念，如何设定需求的边界条件，既能满足用户的正常请求可以顺畅的响应，同时保证系统在开销可控的情况下稳定健壮的运营；而当系统出现类似单点故障，雪崩效应呈现的时候，如何设定新的边界条件，让用户在基本可用的情况下给系统一个恢复周期。这些问题都是需要提前思考，并且不断随着业务规模的增加而调整的。</p>\n<p>案例3：关于主从分离同步的案例</p>\n<p>这个案例很好玩，我们刚开始做数据库主从读写分离的时候，经验也不是很丰富，然后发现一个问题，主从同步经常会有一个时延，虽然时间很短，大部分在1秒以内，但是在应用中，我们发现，用户发一个帖子，然后发完后就应该进入这个帖子的展示页吧，帖子发布到主数据库，而展示页调用的是从数据库，结果部分用户发完帖子，因为延迟，就看到了一个该帖子不存在的界面，这肯定是一个不好的情况么。当然，技术上肯定有各种解决方法，比如对这种新内容选择从主数据库访问，做一些标定等等，但是呢，我们就做了一个特别偷懒取巧的方案。什么方案呢？用户发完帖子后，先进入一个中转页，告诉用户您的帖子发布成功，3秒后自动进入帖子页。（对这个场景很多人都熟悉吧），就这么一个特简单甚至有点不是很友好的设计，主从同步延迟的问题就基本解决了。</p>\n<p>这不是一个完美方案，但是简单有效，而且对用户来说，虽然体验略有不好，但其实也不会有非常大的困扰。 当然，今天，我不推荐这样的方案，但是小团队，创业公司，遇到一些比较头疼的技术问题，其实完全可以通过需求的一点点微调就绕开，我希望分享的是这个观点。</p>\n<p>每次看到创业团队的技术把一个简单的项目做的又累又复杂的时候，我都想说一句，能不能简化一下，从需求到技术方案。很多所谓的复杂根本没有任何实际意义，除了浪费时间和精力外。</p>\n<p>最后，留一个思考题</p>\n<p>还是大翻页问题，一些论坛系统确实有大翻页的实际需要，在这种情况下，我说，只要不允许任意指定页码的跳转翻页，而是只允许上翻页下翻页（或者可以加上上五页，下五页这样的快速翻页）那么就会有特别高的效率的实现方法，有兴趣的同学思考一下。 就是用索引的思路去思考。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"如何应对并发(4) - 分布式数据库及反范式设计","url":"/blog/2019/06/04/caoz-concurrent-4/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=400516974&idx=1&sn=66a65b0900a8a410b7268d4b9c7bbddb&scene=21#wechat_redirect\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-4-分布式数据库及反范式设计\"><a href=\"#如何应对并发-4-分布式数据库及反范式设计\" class=\"headerlink\" title=\"如何应对并发(4) - 分布式数据库及反范式设计\"></a>如何应对并发(4) - 分布式数据库及反范式设计</h2><p>分布式数据库及反范式设计</p>\n<p>当数据容量非常大，请求频次非常高，索引优化，异步更新，合并操作，需求裁剪这些都做到位了，你发现系统依然存在严重的瓶颈，需要扩展，这时候，我们再来谈分布式方案。</p>\n<p>这个课题我四年前在Qcon架构师大会分享过，当场我看记录，好评数还可以，但事后有高手吐槽说我讲的玩意根本不算什么分布式数据库，可能他们看中硬核的东西，不过我这种野路子，关心的是实战中，中小型互联网公司遇到的数据库压力问题如何高效解决，简单有效是第一宗旨，您要是问一线的，比如淘宝怎么解决数据库压力，别问我，我不会。</p>\n<p>今天偷懒了，我把以前文档的内容贴出来。 不过这也是原创哦，四年前的原创。</p>\n<h2 id=\"分库-amp-拆表方案\"><a href=\"#分库-amp-拆表方案\" class=\"headerlink\" title=\"分库&amp;拆表方案\"></a>分库&amp;拆表方案</h2><ul>\n<li><p>基本认识</p>\n<ul>\n<li><p>用分库&amp;拆表是解决数据库容量问题的唯一途径。</p>\n</li>\n<li><p>分库&amp;拆表也是解决性能压力的最优选择。</p>\n</li>\n<li><p>分库 – 不同的数据表放到不同的数据库服务器中（也可能是虚拟服务器）</p>\n</li>\n<li><p>拆表 – 一张数据表拆成多张数据表，可能位于同一台服务器，也可能位于多台服务器（含虚拟服务器）。</p>\n</li>\n</ul>\n</li>\n<li><p>去关联化原则</p>\n<ul>\n<li><p>摘除数据表之间的关联，是分库的基础工作。</p>\n</li>\n<li><p>摘除关联的目的是，当数据表分布到不同服务器时，查询请求容易分发和处理。</p>\n</li>\n<li><p>学会理解反范式数据结构设计，所谓反范式，第一要点是不用外键，不允许Join操作，不允许任何需要跨越两个表的查询请求。第二要点是适度冗余减少查询请求，比如说，信息表，fromuid, touid, message字段外，还需要一个fromuname字段记录用户名，这样查询者通过touid查询后，能够立即得到发信人的用户名，而无需进行另一个数据表的查询。</p>\n</li>\n<li><p>去关联化处理会带来额外的考虑，比如说，某一个数据表内容的修改，对另一个数据表的影响。这一点需要在程序或其他途径去考虑。</p>\n</li>\n</ul>\n</li>\n<li><p>分库方案</p>\n<ul>\n<li><p>安全性拆分</p>\n<ul>\n<li>将高安全性数据与低安全性数据分库，这样的好处第一是便于维护，第二是高安全性数据的数据库参数配置可以以安全优先，而低安全性数据的参数配置以性能优先。参见运维优化相关部分。</li>\n</ul>\n</li>\n<li><p>基于业务逻辑拆分</p>\n<ul>\n<li><p>根据数据表的内容构成，业务逻辑拆分，便于日常维护和前端调用。</p>\n</li>\n<li><p>基于业务逻辑拆分，可以减少前端应用请求发送到不同数据库服务器的频次，从而减少链接开销。</p>\n</li>\n<li><p>基于业务逻辑拆分，可保留部分数据关联，前端web工程师可在限度范围内执行关联查询。</p>\n</li>\n</ul>\n</li>\n<li><p>基于负载压力拆分</p>\n<ul>\n<li><p>基于负载压力对数据结构拆分，便于直接将负载分担给不同的服务器。</p>\n</li>\n<li><p>基于负载压力拆分，可能拆分后的数据库包含不同业务类型的数据表，日常维护会有一定的烦恼。</p>\n</li>\n</ul>\n</li>\n<li><p>混合拆分组合</p>\n<ul>\n<li><p>基于安全与业务拆分为数据库实例，但是可以使用不同端口放在同一个服务器上。</p>\n</li>\n<li><p>基于负载可以拆分为更多数据库实例分布在不同数据库上</p>\n<p>例如，</p>\n<ul>\n<li><p>基于安全拆分出A数据库实例，</p>\n</li>\n<li><p>基于业务拆分出B,C数据库实例，</p>\n</li>\n<li><p>C数据库存在较高负载，基于负载拆分为C1,C2,C3,C4等 实例。</p>\n</li>\n<li><p>数据库服务器完全可以做到 A+B+C1 为一台，C2,C3,C4各单独一台。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分表方案</p>\n<p>数据量过大或者访问压力过大的数据表需要切分</p>\n<ul>\n<li><p>纵向分表（常见为忙闲分表）</p>\n<ul>\n<li><p>单数据表字段过多，可将频繁更新的整数数据与非频繁更新的字符串数据切分</p>\n<p>范例 user表 ，个人简介，地址，QQ号，联系方式，头像 这些字段为字符串类型，更新请求少； 最后登录时间，在线时常，访问次数，信件数这些字段为整数型字段，更新频繁，可以将后面这些更新频繁的字段独立拆出一张数据表，表内容变少，索引结构变少，读写请求变快。</p>\n</li>\n</ul>\n</li>\n<li><p>横向切表</p>\n<ul>\n<li><p>等分切表，如哈希切表或其他基于对某数字取余的切表。等分切表的优点是负载很方便的分布到不同服务器；缺点是当容量继续增加时无法方便的扩容，需要重新进行数据的切分或转表。而且一些关键主键不易处理。</p>\n</li>\n<li><p>递增切表，比如每1kw用户开一个新表，优点是可以适应数据的自增趋势；缺点是往往新数据负载高，压力分配不平均。</p>\n</li>\n<li><p>日期切表，适用于日志记录式数据，优缺点等同于递增切表。</p>\n</li>\n</ul>\n<p>个人倾向于递增切表，具体根据应用场景决定。</p>\n</li>\n<li><p>热点数据分表</p>\n<ul>\n<li><p>将数据量较大的数据表中将读写频繁的数据抽取出来，形成热点数据表。通常一个庞大数据表经常被读写的内容往往具有一定的集中性，如果这些集中数据单独处理，就会极大减少整体系统的负载。</p>\n</li>\n<li><p>热点数据表与旧有数据关系</p>\n<ul>\n<li><p>可以是一张冗余表，即该表数据丢失不会妨碍使用，因源数据仍存在于旧有结构中。优点是安全性高，维护方便，缺点是写压力不能分担，仍需要同步写回原系统。</p>\n</li>\n<li><p>可以是非冗余表，即热点数据的内容原有结构不再保存，优点是读写效率全部优化；缺点是当热点数据发生变化时，维护量较大。</p>\n</li>\n<li><p>具体方案选择需要根据读写比例决定，在读频率远高于写频率情况下，优先考虑冗余表方案。</p>\n</li>\n</ul>\n</li>\n<li><p>热点数据表可以用单独的优化的硬件存储，比如昂贵的闪存卡或大内存系统。</p>\n</li>\n</ul>\n</li>\n<li><p>热点数据表的重要指标</p>\n<ul>\n<li><p>热点数据的定义需要根据业务模式自行制定策略，常见策略为，按照最新的操作时间；按照内容丰富度等等。</p>\n</li>\n<li><p>数据规模，比如从1000万条数据，抽取出100万条热点数据。</p>\n</li>\n<li><p>热点命中率，比如查询10次，多少次命中在热点数据内。</p>\n</li>\n<li><p>理论上，数据规模越小，热点命中率越高，说明效果越好。需要根据业务自行评估。</p>\n</li>\n</ul>\n</li>\n<li><p>热点数据表的动态维护</p>\n<ul>\n<li><p>加载热点数据方案选择</p>\n<ul>\n<li><p>定时从旧有数据结构中按照新的策略获取</p>\n</li>\n<li><p>在从旧有数据结构读取时动态加载到热点数据</p>\n</li>\n</ul>\n</li>\n<li><p>剔除热点数据方案选择</p>\n<ul>\n<li><p>基于特定策略，定时将热点数据中访问频次较少的数据剔除</p>\n</li>\n<li><p>如热点数据是冗余表，则直接删除即可，如不是冗余表，需要回写给旧有数据结构。</p>\n</li>\n<li><p>通常，热点数据往往是基于缓存或者key-value 方案冗余存储，所以这里提到的热点数据表，其实更多是理解思路，用到的场合可能并不多….</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>反范式设计（冗余结构设计）<br>l 反范式设计的概念</p>\n<p>n 无外键，无连表查询。</p>\n<p>n 便于分布式设计，允许适度冗余，为了容量扩展允许适度开销。</p>\n<p>n 基于业务自由优化，基于i&#x2F;o 或查询设计，无须遵循范式结构设计。</p>\n<p>l 冗余结构设计所面临的典型场景</p>\n<p>n 原有展现程序涉及多个表的查询，希望精简查询程序</p>\n<p>n 数据表拆分往往基于主键，而原有数据表往往存在非基于主键的关键查询，无法在分表结构中完成。</p>\n<p>n 存在较多数据统计需求（count, sum等），效率低下。</p>\n<p>l 冗余设计方案</p>\n<p>n 基于展现的冗余设计</p>\n<p>u 为了简化展现程序，在一些数据表中往往存在冗余字段</p>\n<p>u 举例，信息表 message，存在字段 fromuid,touid,msg,sendtime 四个字段，其中 touid+sendtime是复合索引。存在查询为 select * from message where touid&#x3D;$uid order by sendtime desc limit 0,30;</p>\n<p>u 展示程序需要显示发送者姓名，此时通常会在message表中增加字段fromusername，甚至有的会增加fromusersex，从而无需连表查询直接输出信息的发送者姓名和性别。这就是一种简单的，为了避免连表查询而使用的冗余字段设计。</p>\n<p>n 基于查询的冗余设计</p>\n<p>u 涉及分表操作后，一些常见的索引查询可能需要跨表，带来不必要的麻烦。确认查询请求远大于写入请求时，应设置便于查询项的冗余表。</p>\n<p>u 冗余表要点</p>\n<p>l 数据一致性，简单说，同增，同删，同更新。</p>\n<p>l 可以做全冗余，或者只做主键关联的冗余，比如通过用户名查询uid，再基于uid查询源表。</p>\n<p>u 实战范例1</p>\n<p>l 用户分表，将用户库分成若干数据表</p>\n<p>l 基于用户名的查询和基于uid的查询都是高并发请求。</p>\n<p>l 用户分表基于uid分成数据表，同时基于用户名做对应冗余表。</p>\n<p>l 如果允许多方式登陆，可以有如下设计方法</p>\n<p>n uid,passwd,用户信息等等，主数据表，基于uid 分表</p>\n<p>n ukey,ukeytype,uid 基于ukey分表，便于用户登陆的查询。分解成如下两个SQL。</p>\n<p>u select uid from ulist_key_13 where ukey&#x3D;’$username’ and ukeytype&#x3D;‘login’;</p>\n<p>u select * from ulist_uid_23 where uid&#x3D;$uid and passwd&#x3D;’$passwd’;</p>\n<p>n ukeytype定义用户的登陆依据，比如用户名，手机号，邮件地址，网站昵称等。 Ukey+ukeytype 必须唯一。</p>\n<p>n 此种方式需要登陆密码统一，对于第三方connect接入模式，可以通过引申额外字段完成。</p>\n<p>u 实战范例2：用户游戏积分排名</p>\n<p>l 表结构 uid,gameid,score 参见前文实时积分排行。表内容巨大，需要拆表。</p>\n<p>l 需求1：基于游戏id查询积分排行</p>\n<p>l 需求2：基于用户id查询游戏积分记录</p>\n<p>l 解决方案：建立完全相同的两套表结构，其一以uid为拆表主键，其二以gameid为拆表主键，用户提交积分时，向两个数据结构同时提交。</p>\n<p>u 实战范例3：全冗余查询结构</p>\n<p>l 主信息表仅包括 主键及备注memo 字段（text类型），只支持主键查询，可以基于主键拆表。所以需要展现和存储的内容均在memo字段重体现。</p>\n<p>l 对每一个查询条件，建立查询冗余表，以查询条件字段为主键，以主信息表主键id 为内容。</p>\n<p>l 日常查询只基于查询冗余表，然后通过in的方式从主信息表获得内容。</p>\n<p>l 优点是结构扩展非常方便，只需要扩展新的查询信息表即可，核心思路是，只有查询才需要独立的索引结构，展现无需独立字段。</p>\n<p>l 缺点是只适合于相对固定的查询架构，对于更加灵活的组合查询束手无策。</p>\n<p>n 基于统计的冗余结构</p>\n<p>u 为了减少会涉及大规模影响结果集的表数据操作，比如count，sum操作。应将一些统计类数据通过冗余数据结构保存。</p>\n<p>u 冗余数据结构可能以字段方式存在，也可能以独立数据表结构存在，但是都应能通过源数据表恢复。</p>\n<p>u 实战范例：</p>\n<p>l 论坛板块的发帖量，回帖量，每日新增数据等。</p>\n<p>l 网站每日新增用户数等。</p>\n<p>l 参见Discuz论坛系统数据结构，有较多相关结构。</p>\n<p>l 参见前文分段积分结构，是典型用于统计的冗余结构。</p>\n<p>l 后台可以通过源数据表更新该数字。</p>\n<p>l Redis的Zset类型可以理解为存在一种冗余统计结构。</p>\n<p>n 历史数据表</p>\n<p>u 历史数据表对应于热点数据表，将需求较少又不能丢弃的数据存入，仅在少数情况下被访问。</p>\n<p>以上为节选，缺失部分请点击 “查看原文”</p>\n<p>分几次分享的意思其实很简单，这个文档很早就发布过，给很多人也分享过，但我总觉得效果不够好，不够好的原因是，很多人马马虎虎的看一遍下去，并不真的理解吸收，我还是希望有兴趣的读者多花一点时间思考这些技术问题，能透彻的理解其思路和逻辑，并真正用到工作中，提升代码和数据库操作的效率。</p>\n<p>我们平时看技术文档，看技术专家分享的时候，多半存在这个问题，贪多嚼不烂，看着觉得对方方案很牛，但很多都只是听到了一点概念，最后真正吸收和落实的不多，我希望一些做技术的朋友能稍微慢下来，多吸收和领悟一下，然后在实践中用起来，这样，这个分享才是有意义的。</p>\n<p>明天我会写一篇对一些技术人员吐槽的文章，谢谢。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"如何应对并发(5) - 关键的关键，是认识负载","url":"/blog/2019/06/04/caoz-concurrent-5/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=401014185&idx=1&sn=66850ac473e63c639448103066682dc7&scene=21#wechat_redirect\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-5-关键的关键，是认识负载\"><a href=\"#如何应对并发-5-关键的关键，是认识负载\" class=\"headerlink\" title=\"如何应对并发(5) - 关键的关键，是认识负载\"></a>如何应对并发(5) - 关键的关键，是认识负载</h2><p>很多人会问我说，他们有个系统，流量有多大，用户有多多，然后问我用什么方案，实话说，这样的问题基本上都没办法回答，你必须首先清楚，你的负载构成是怎样的，以及负载增加的趋势是怎样的，才能有针对性的给出方案。</p>\n<p>1、负载的构成</p>\n<p>你要提出优化方案，首先你要知道你系统的负载是怎么构成的，</p>\n<p>CPU开销是多少，是哪些进程和服务占用的。</p>\n<p>内存开销是多少，是哪些进程和服务占用的，如果内存占用了swap分区，大量的硬盘虚拟内存操作，效率自然会直线下降。</p>\n<p>I&#x2F;O开销 是多少，读请求的频率，写请求的频率，什么服务和什么操作占用了大量的i&#x2F;o。</p>\n<p>连接数是多少，是怎么分布的，比如http链接多少，数据库链接多少，memcache链接多少，当然更细致的三次握手的链接是多少。</p>\n<p>了解这些，是优化的基础，这些都不清楚，谈个毛优化方案。</p>\n<p>2、负载增长趋势</p>\n<p>随着应用请求的增加，你的系统的负载是怎么增加的。</p>\n<p>第一种，是线性增加，就是请求两倍，负载变成两倍</p>\n<p>第二种，是指数增加，请求两倍，负载变成四倍甚至更多，</p>\n<p>有人会奇怪，为什么这样呢？因为请求增加和数据量增加很可能是一致的，比如一个毫无索引的遍历查询，数据量增加了一倍，查询效率就降低50%，请求量又增加1倍，所以负载就增加了4倍。 这种就是非常不合理的技术架构。</p>\n<p>第三种，收敛增加，随着你的请求增加规模，负载的增加低于线性增加并逐步收敛，比如说，大量使用缓存和异步更新，请求越多，缓存命中率越高，异步更新的请求合并率越高，这样负载的增加就呈现为收敛性，这样系统的支撑性就会很强大。</p>\n<p>3、系统阈值</p>\n<p>很多时候，我们系统出现瓶颈，并不是因为负载很高，而是因为某个请求规模超越了系统阈值，导致无法应答请求。</p>\n<p>典型范例如</p>\n<p>syn flood攻击时，最大的syn连接池被占满，导致无法应答新的请求，而此时服务器负载非常之低，这就是典型服务器很闲但不响应的情况。</p>\n<p>http链接数越界，http链接超时设置较长，大量链接没有释放，导致链接数超过默认最大值，http服务器无法响应新请求。</p>\n<p>mysql链接数越界，大量使用常链接或不释放链接，导致大量sleep链接占满系统默认连接数，数据库无法响应新请求。</p>\n<p>最大文件打开数越界，大量使用临时文件和缓存文件，大量的文件打开操作，而系统默认值没有调优。</p>\n<p>类似这样的还有很多，以上只是最常见的一些。</p>\n<p>这就是很多人觉得奇怪的一个现象，我看了一下系统负载不高为啥我服务器不响应了？要充分理解各种系统阈值，并针对自己的应用特性进行调优，才可以充分发挥系统硬件特性，实话说，很多系统或服务的默认阈值都偏低。</p>\n<p>4、峰谷的规律和预测</p>\n<p>通常，负载和请求并非一条平顺的曲线，每天都有波峰和波谷，如果有大的活动或市场推广计划，很可能也会有一条非常陡峭的增加曲线。</p>\n<p>这时候需要运营者有一个预测和判断，知道波峰在什么时候会发生，而且要知道相关的规律是什么。</p>\n<p>5、异常的监控和跟踪</p>\n<p>之前我的系列文章有提过一点，要对各种异常敏感，很多严重的性能问题其实是有先兆的，比如偶尔的501错误，偶尔的访问卡顿，偶尔的链接出错，很多时候，用户刷新一下，这个问题就没有了，但是很可能此事系统已经进入了一个不稳定的状态。</p>\n<p>有经验和有意识的架构师或运维专家，应该会做日志的跟踪和审计，随时查看这种错误信息的出现频率，并对此进行持续的跟踪监控，在高并发的真实环境中，在一定比例内，这样的偶发异常是非常难免的，你要问我如何彻底杜绝，对不起，我也不会，但是首先，这个比例应该是非常低的，比如说在万分之几甚至更低，当异常响应超过千分之几的时候你就应该足够敏感和足够紧张的去研究这个问题了。其次，当异常频现的时候应该在程序里埋点做跟踪了，并尽可能记录异常频次较高时候的系统负载值和各种连接数与阈值的比例。然后基于异常的一些提示信息在网上进行搜索，当然，不同的异常存在不同的可能，我没办法给出一揽子解决的方案，但是我希望提醒，当异常开始快速增加的时候，你至少要知道，系统已经呈现出可能崩溃的前兆了。</p>\n<p>认识负载，是优化系统的关键，今天先讲这些，这个系列并未结束。</p>\n<p>最近在多个城市穿梭，因此更新不够稳定，谢谢您继续关注和支持！</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"如何应对并发(6) - 琐碎的日常","url":"/blog/2019/06/04/caoz-concurrent-6/","content":"<p>本文引自<a href=\"https://mp.weixin.qq.com/s/5V4RF5WaHAmoo9WFH-udBw\">caoz的梦呓的同名文章</a></p>\n<h2 id=\"如何应对并发-6-琐碎的日常\"><a href=\"#如何应对并发-6-琐碎的日常\" class=\"headerlink\" title=\"如何应对并发(6) - 琐碎的日常\"></a>如何应对并发(6) - 琐碎的日常</h2><p>这应该是应对并发系列最后一篇。</p>\n<p>我知道我的技术文章既没有太多的技术含量，也不够前沿。和各路大牛不能相比，但是我也很想和新入行的年轻人分享一个观点，千万不要认为，作为一个高大上的架构师，每天就是追踪前沿，研究新技术，搞所有人都不明白的黑科技，实际上，你日常工作的大部分，是去看一些琐碎的日志，去跟踪和分析一些常见或不常见的问题，然后引入你的思考和判断，看看有什么成熟或前沿的技术，能够应对你现有的问题，并为你后续的目标提升做出保障。</p>\n<p>随着硬件能力的不断发展，实际上，很多历史上非常头疼和困扰的技术问题，已经完全迎刃而解，也就是说很多十年前让高级架构师们特别挣扎的障碍现在可能都不存在了。也许我们通过书本去学习一些旧的策略，方案都已经显得不合时宜，但是，你日常对问题细节的敏锐度，分析问题的思路，以及对待问题思考的方法，依然是通用的，一个好的架构师，不在于他学过什么，而在于他如何发现问题，分析问题，而这些，其实功夫都在日常。</p>\n<p>回顾一下这个系列</p>\n<p><a href=\"caoz-concurrent-1.md\">如何应对并发(1) - 关于数据索引</a></p>\n<p><a href=\"caoz-concurrent-2.md\">如何应对并发(2) - 请求合并及异步处理</a></p>\n<p><a href=\"caoz-concurrent-3.md\">如何应对并发(3) - 需求裁剪</a></p>\n<p><a href=\"caoz-concurrent-4.md\">如何应对并发(4) - 分布式数据库及反范式设计</a></p>\n<p><a href=\"caoz-concurrent-5.md\">如何应对并发(5) - 关键的关键，是认识负载</a></p>\n<p>那么接上一个章节，认识负载。</p>\n<p>现在说一下，一些具体操作的细节，我们日常是如何认识负载，如何跟踪这些数据的。</p>\n<p>我相信很多运维工程师说，他们有会使用非常多监控系统，可以出各种监控报表，但是如果你自己没有认真对业务系统做足够的监控分析，这些监控系统大多是都是摆设，并不能给系统优化和架构提供足够的帮助。</p>\n<p>而实际上，自己编写一些针对具体业务系统简单的监控，并不复杂，非常简单，而且也不需要做太复杂的一些展示效果，只要最简单的基本数据留存，对很多疑难排查和性能分析就会帮助很大。我说一下我们日常会做什么监控</p>\n<p>1、数据库服务器，包括数据中间件服务器</p>\n<p>我们以mysql为例，因为我们用的就是mysql。</p>\n<p>1.1  基本的数据库连接数监控，以及内存，cpu占用监控，每分钟cron跑一下。</p>\n<p>设置一个阈值，比如说，最大数据库连接数是1024，阈值就是256，超过阈值的情况下，记录所有的show processlist到指定文件，这个特别重要，当你出现数据库链接过多的时候，你可能除了重启别无他法，你必须回溯当时发生了什么。 </p>\n<p>强调一点，mysql允许root用户比普通用户多一个链接数，这样保证系统崩溃的时候有自救方式，所以，业务系统一定不能使用root链接数据库，而监控系统建议使用root来跟踪，这样即便出现最大链接情况，依然可以将show porcesslist 留下来，便于优化分析。</p>\n<p>此外，监控程序可以执行自恢复能力，比如说当最大链接时直接在数据库里kill掉一些僵死查询，释放资源，恢复链接状态，前提是，你确信你的系统允许提供有损服务。  此外，不要依赖自恢复机制，这种机制只能救急，事后必须分析系统瓶颈，并做出有效方案提升整体系统的支撑性。</p>\n<p>processlist的状态和所对应的问题，我这个系列没有写，其实有很多需要思考的，在09-10年我做数据库调优的时候，基本上大部分时间都是跟不同的mysql status的链接过多做分析和作斗争； 如果要单拆出来都可以独立写一篇文章，不过如果写出来估计是我公众号上访问量最低的文章了。有兴趣的可以看 “如何应对并发4” 里点原文链接，在百度文库我有完整分享。</p>\n<p>1.2 binlog的分析</p>\n<p>这不需要实时分析，但我有个习惯，还是会不定期分析一下，特别是当binlog增长速度很快的时候，我们知道binlog是mysql的写入，更新的日志，也是数据库同步的依据。一个有经验的dba，看一下binlog日志的大小和更新的时间，就能评估出这个数据库的更新频次。</p>\n<p>如果没经验也没关系，有空的时候，把binlog服务器复制到空闲服务器，（如果数据库服务器很空闲也可以直接操作，但尽量不要在线上操作，以免负载冲击对线上业务造成干扰。） 用mysqldump 将binlog输出为标准的SQL格式，然后就可以做数据分析</p>\n<p>第一，每秒钟多少数据更新请求；</p>\n<p>第二，最多的更新请求请求的是哪个数据表；</p>\n<p>第三，最多的更新请求的SQL格式是什么；</p>\n<p>第四，是否存在短时间内大量重复主键的更新请求。（可以考虑合并操作部分，参见请求合并及异步处理）</p>\n<p>1.3 慢查询日志分析</p>\n<p>看慢查询的形成原因，是受累于整体系统环境的影响，还是受累于锁表的影响，还是本身索引的问题，或者查询本身其他的问题。</p>\n<p>2、web服务器，包括负载均衡服务器</p>\n<p>2.1 web日志</p>\n<p>建议打开执行时间监控，也就是可以看到网页和动态脚本的执行时间。（友情提醒一下，动态脚本的执行时间和网络速度有关，因为输出完成后脚本才算执行截至，而输出的过程是包含了网络传输过程，这一点务必要注意）</p>\n<p>分析不同动态脚本的执行频次，并找出频次最高的几个程序。</p>\n<p>分析不同动态脚本的执行时间分布，并找出执行时间最长且频次最高的几个程序。</p>\n<p>2.2 埋点分析</p>\n<p>找到平均执行时间较长，且频次较高的程序，做埋点分析，也就是对程序每个步骤，每个调用，埋点记录时间分布，然后将问题目标缩小到具体的调用和请求上。</p>\n<p>当然也可以用一些性能评估的程序来做测试，但是和埋点不同是埋点更能体现真实网络环境下的问题。</p>\n<p>日志分析+埋点分析，可以将当前web响应卡慢的问题精准定位，这样对解决问题就有非常重要的帮助，你都定位到具体的请求和调用了，你再找解决方案就明晰了。</p>\n<p>2.3 SQL查询输出</p>\n<p>通常对数据库查询会有一个对象或函数封装，我会不定期在封装的调用内对查询语句做一个输出，写到临时文件里（&#x2F;dev&#x2F;shm 目录下，尽量避免对i&#x2F;o影响），然后看一下</p>\n<p>第一，每秒多少查询请求</p>\n<p>第二，最多查询表是哪个</p>\n<p>第三，最多查询的SQL是什么，索引是否合理</p>\n<p>第四，是否存在同一主键的大量重复查询（可以用缓存来做）</p>\n<p>2.4 错误异常日志分析</p>\n<p>error日志，包括webserver的error日志，也包括动态脚本的，比如php的error日志，这里往往你会看到很多网络蠕虫入侵和攻击的尝试，以及SQL注入的测试。 有些错误信息应该引起你极大的警觉，比如你会发现你其实存在SQL注入漏洞而攻击者只是猜测错了一点点没有得逞而已。</p>\n<p>2.5 链接状态监控</p>\n<p>当前web链接数，以及链接的资源消耗。</p>\n<p>存在这样的情况，有些脚本本身业务逻辑不复杂，按照最简单的编写方式，吃的资源按理说并不多，但是因为使用了较为庞大的框架，导致每个请求都调用了大量的资源，在连接数较多的时候，导致系统资源耗尽，形成雪崩效应。</p>\n<p>这就是我老说的，万恶的框架。</p>\n<p>当然，因为web请求比较容易做负载均衡，在现在硬盘，内存都很便宜的情况下，很多架构师会说，我加几台前端就好了，所以可能只有我这种远古时代的个人站长才会对这个特别敏感。</p>\n<p>3、内存、缓存服务器</p>\n<p>3.1 链接状态和资源监控</p>\n<p>3.2 命中率监控</p>\n<p>如果缓存的命中率太低，没有效率，应该问一下程序员，多半是设计有问题。很多人以为加了缓存就会提升效率，其实如果命中率不高的话是浪费效率，你本身多一次查询，请求，然后没有命中还要回到原始的数据库查询，这怎么会提高效率？</p>\n<p>4、一些通用的监控</p>\n<p>内存，cpu，硬盘占用监控</p>\n<p>（临时文件导致硬盘满导致服务器崩溃的案例不要太多！）</p>\n<p>swap分区占用的监控</p>\n<p>你觉得服务器内存挺宽的，但是莫名其妙swap分区占用过高，你整个服务器性能直线跳水下降。 因此导致系统崩溃的案例也是数不胜数。</p>\n<p>系统资源占用监控</p>\n<p>比如最大文件打开数，最大文件句柄数，syn连接数等，要对一些系统阈值有了解，也许某个系统阈值达到了而你系统资源其实还很宽松，但你服务器已经没法响应了。这就是所谓服务器很闲但是拒绝服务的原因。</p>\n<p>5、自恢复系统</p>\n<p>当数据库链接过多，webserver链接过多，或其他一些常见问题出现时，如果有一个cron任务，能自动杀掉阻塞进程，就可以以较少的服务拒绝为代价，让系统快速恢复运行，对于很多中小企业来说，运维可以睡个安稳觉，程序员不用半夜起来处理问题，还是很有意义的。</p>\n<p>但是这里必须强调，自恢复系统并不能治本，切忌产生依赖性，出现问题快速恢复，但是要给以业务系统足够的提示，当运维负责人或程序员上班时，应给予足够的提示，并快速回放问题现场，（参照如上的监控），寻找问题原因，并做出优化方案，以免问题重现。</p>\n<p>自恢复系统是一个对技术不十分成熟，业务发展迅速的平台，特别重要的一个处理思路，你可以用较低的成本完成服务较高的可靠性，并能减少技术人员加班频次，但必须强调的是，你必须有后续的跟进解决方案，否则问题积累到一定程度，就会变成自恢复-崩溃死循环。</p>\n<p>6、监控系统的资源占用</p>\n<p>必须强调，监控系统本身的资源开销也是需要考虑的，否则可能本身系统没事，因为你做了监控反而挂了。</p>\n<p>比如说，netstat -an 这种操作，在链接较多，负载较高的系统中我是不敢用的。比如说，埋点分析我通常会根据在线负载压力考虑采用随机值抽取一个百分比来做埋点，既保证样本的充分度又要保证对在线负载压力影响较小。再比如说，所有类似埋点分析或查询输出，我都是定位到&#x2F;dev&#x2F;shm目录，用内存而不是物理i&#x2F;o， 当然，数据规模也要控制，否则把内存吃满也是大问题，</p>\n<p>但是我还是要强调，监控非常重要！</p>\n<p>有些人觉得监控占用开销，所以尽可能不开任何日志，比如不开web日志，不开binlog，不开error日志，他们认为这样可以提升效率，然后出问题来问，那怎么弄，我个人认为，在绝大部分业务情况下，binlog，web日志，error日志不会是业务系统的负载瓶颈所在，其对于高负载的系统而言，资源开销只是很小的比例，打开这些日志是非常有意义的。（binlog日志的存储方式要选对，否则可能对系统负载产生致命影响，有兴趣的可以看 “如何应对并发4” 里点原文链接，在百度文库我有完整分享。）</p>\n<p>以上是以前我做过的系统监控的一些总结，因为当时主要以web服务为主，对于其他类型的服务并没有特别多的研究，但我个人认为基本思路和逻辑是一致的。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"检查端口使用情况","url":"/blog/2019/05/15/check-if-port-is-in-use/","content":"<h1 id=\"检查端口使用情况\"><a href=\"#检查端口使用情况\" class=\"headerlink\" title=\"检查端口使用情况\"></a>检查端口使用情况</h1><h2 id=\"powershell-on-windows\"><a href=\"#powershell-on-windows\" class=\"headerlink\" title=\"powershell on windows\"></a>powershell on windows</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Get-Process -Id (Get-NetTCPConnection -LocalPort YourPortNumberHere).OwningProcess</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><p>首推的就是lsof命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsof -i</span><br><span class=\"line\">$ lsof -i:8000</span><br></pre></td></tr></table></figure>\n\n<p>注意当前用户，如果想显示其它用户的使用情况，可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo lsof -i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p><strong>Linux</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ netstat -tulpn | grep LISTEN</span><br></pre></td></tr></table></figure>\n\n<p><strong>MacOS X</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ netstat -anp tcp | grep LISTEN</span><br><span class=\"line\">$ netstat -anp udp | grep LISTEN</span><br></pre></td></tr></table></figure>\n\n<p><strong>Windows</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -bano | more</span><br><span class=\"line\">netstat -bano | findstr LISTENING</span><br><span class=\"line\">netstat -bano | findstr /R /C:<span class=\"string\">&quot;[LISTEING]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nmap-需要安装\"><a href=\"#nmap-需要安装\" class=\"headerlink\" title=\"nmap(需要安装)\"></a>nmap(需要安装)</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo nmap -sT -O localhost</span><br><span class=\"line\">$ sudo nmap -sU -O 192.168.2.13 <span class=\"comment\">##[ list open UDP ports ]##</span></span><br><span class=\"line\">$ sudo nmap -sT -O 192.168.2.13 <span class=\"comment\">##[ list open TCP ports ]##</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo nmap -sTU -O 192.168.2.13</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"[转载]国漫发展史","url":"/blog/2022/12/29/chinese-anime/","content":"<p>本文转载自s1社区wonner_2012的帖子<a href=\"https://bbs.saraba1st.com/2b/thread-2112254-0-1.html\">[分享] 对国产动画产业发展史和现状的介绍</a>。</p>\n<p>想要了解国产动画产业发展史的朋友一定要去看看这个视频<br><a href=\"https://www.bilibili.com/video/BV1JS4y1C7nK\">【合集】国漫商业史1977-2021，8个视频带你看懂国漫45年的商业发展史</a><br>总共2小时46分钟，是8个视频的合集，up主是<a href=\"https://space.bilibili.com/434177799\">RS-文宣帝-星辰</a>。</p>\n<p>下面的长文是我自己根据视频内容、评论区的评论和自己的看法整理的关于国产动画产业发展史的笔记，很多部分是直接引用视频内容的，但是关于国产动画电影、漫画的发展史被省略掉了（视频里有），实在没有时间看视频的朋友可以看看。</p>\n<h2 id=\"1977-1994\"><a href=\"#1977-1994\" class=\"headerlink\" title=\"1977~1994\"></a>1977~1994</h2><p>不存在动画产业，上海美术制片厂的动画是这一时期中国动画的典型代表。上美动画生产时长由文化部下达的制作任务决定，由中影公司统购统销。此时的上美动画是艺术品，不用考虑市场反响，追求艺术和价值的表达。</p>\n<p>几乎没有专门播放动画片的电视频道（其实电视普及度也不行）</p>\n<p>引进日本动画之后，国产动画产量供远小于求，导致日本动画占据电视台播放动画时长的绝大多数。<br>上美每年做约400分钟动画<br>日本动画森林大帝（1965年10月~1967年3月）78话，共78*20&#x3D;1560分钟<br>可见在当时动画产业更成熟的日本的优势。</p>\n<h2 id=\"1995-2004\"><a href=\"#1995-2004\" class=\"headerlink\" title=\"1995~2004\"></a>1995~2004</h2><p>取消统购统销，开始市场化运作，动画产业起步。接下来从事业单位和企业单位两方面来描述该时期的国产动画产业。</p>\n<ul>\n<li>事业单位：电视台自产自销</li>\n</ul>\n<p>上海电视台设立卡通王栏目专门播放动画。1999上美改制为事业单位，每年可获上海电视台3000万创作资金为其制作动画，产能上升（2001年产6126分钟动画）。2001<a href=\"https://zh.moegirl.org.cn/%E6%88%91%E4%B8%BA%E6%AD%8C%E7%8B%82\">《我为歌狂》</a>销售了不少衍生品，但是存在大量盗版导致营收不利（其他项目类似），2002上海电视台停止资金支持，2004上美由事业单位改制为企业单位后再无起色。</p>\n<p>央视动画成为中国最大且最强的动画制作单位，集中了中国当时最优秀的动画人。其作为央视的动画部门每年有4000万经费，背靠中央电视台根本不担心成本和盈利，动画档期也是自己安排。代表作《西游记》《哪咤传奇》。</p>\n<p>该时期事业单位作为国产动画的主导者，最大的问题是没有动力去建设成体系的动画产业，没有去规范全国的动画制作流程。特别是2d动画领域，时至今日很多2d动画公司的流程和专业术语都各不相同，这也给2d动画人才的培养和流通造成了很多问题。</p>\n<ul>\n<li>企业单位：恶性竞争</li>\n</ul>\n<p>当时民营企业的动画遇到的两大问题是：<br>一，能自产自销的电视台（如上海电视台、央视）的动画时长会优先分给自制动画，所以可以把其他动画的收购价压得很低。<br>二，引进动画为了抢占中国市场，主动把价格放得极低，对电视台而言物美价廉，占据了除自产自销的电视台以外其他动画频道的黄金档，最高峰时占领了中国电视台动画播放量的90%。</p>\n<p>少数民营企业如<a href=\"https://zh.moegirl.org.cn/zh-hans/%E8%93%9D%E7%8C%AB\">《蓝猫》</a>系列的制作公司（简称<a href=\"https://www.tianyancha.com/company/373975557\">蓝猫公司</a>）另辟蹊径，以在动画片尾加上40多秒自制广告为条件免费让电视台播出，利用广告和动画衍生品形成了自己的动画品牌，与其他领域的公司进行合作，取得了商业成功。</p>\n<p>除了少数企业，当时的大部分民营企业动画极难生存。</p>\n<h2 id=\"2005-2010\"><a href=\"#2005-2010\" class=\"headerlink\" title=\"2005-2010\"></a>2005-2010</h2><p>2004年，针对引进动画依靠低价对中国动画市场进行倾销的情况，为了限制不正当竞争，扶持刚起步的国产动画产业，国家出台《关于发展我国影视动画产业的若干意见》，这就是所谓的限播令。要求全天播出的动画中国产动画占比不低于60%，后来进一步要求全国各级电视台所有频道的黄金时段均不能播放引进动画，此后引进动画只能在非黄金时段播出（如央视少儿频道的《动漫世界》），总量也**减少。2005年后开始对国产动画进行补贴，然而这同时又造成了问题。</p>\n<p>补贴只对动画总时长有要求而忽视动画质量，且补贴的对象是企业而不是个人，导致大量企业为了骗补完全忽略动画质量，疯狂追求动画时长，然后以极低价卖给电视台的非黄金档（电视台黄金档只播高质量的），这样电视台完成了国家对国产动画时长的指标，企业得到了补贴，可谓双赢。最后甚至形成了只要满足动画总时长要求，成本压得越低收益越大的竞劣局面，于是《雷锋的故事》便脱颖而出了。到了2008年，国产动画总时长超过了日本，动画总时长快速增长的原因显而易见。</p>\n<p>不过拿补贴的既有骗子，也有少数认真做动画的。这一时期最突出的例子：做<a href=\"https://zh.moegirl.org.cn/zh-hans/%E8%99%B9%E7%8C%AB%E8%93%9D%E5%85%94%E4%B8%83%E4%BE%A0%E4%BC%A0\">《虹猫蓝兔七侠传》</a>的<a href=\"https://zh.moegirl.org.cn/%E5%AE%8F%E6%A2%A6%E5%8D%A1%E9%80%9A\">宏梦</a>，动画、特摄一体的<a href=\"https://zh.moegirl.org.cn/%E5%A5%A5%E9%A3%9E%E5%A8%B1%E4%B9%90\">奥飞</a>（《战龙四驱》、《巴啦啦小魔仙》），做《洛洛历险记》的蓝弧，做<a href=\"https://zh.moegirl.org.cn/%E7%A7%A6%E6%97%B6%E6%98%8E%E6%9C%88%E7%B3%BB%E5%88%97\">《秦时明月》</a>的<a href=\"https://zh.moegirl.org.cn/%E7%8E%84%E6%9C%BA%E7%A7%91%E6%8A%80\">玄机科技</a>，做<a href=\"https://zh.moegirl.org.cn/%E5%96%9C%E7%BE%8A%E7%BE%8A%E4%B8%8E%E7%81%B0%E5%A4%AA%E7%8B%BC%E7%B3%BB%E5%88%97\">《喜羊羊与灰太狼》</a>的<a href=\"https://zh.moegirl.org.cn/%E5%8E%9F%E5%88%9B%E5%8A%A8%E5%8A%9B\">原创动力</a>，做<a href=\"https://zh.moegirl.org.cn/zh-hans/%E7%BC%87%E5%8F%AF\">《缇可》</a>的<a href=\"https://www.tianyancha.com/company/148276063\">视美</a>。</p>\n<p>这几家动画公司都形成了自己的动画品牌，除了动画本身外能够以各种动画衍生品盈利。《虹猫蓝兔七侠传》的图书卖出千万册，奥飞、蓝狐的动画本身就是玩具的优秀广告片，《喜羊羊与灰太狼》做出大电影并取得了不错的票房，玄机和视美依靠相对高质量的动画和衍生品的收入也能维持生存。</p>\n<p>这几家里我最赞赏的就是视美，他们真正在为中国的2d动画培养人才，会找四川美术学院的学生直接参与商业项目，公司内也有老师傅带新人的传统，早期就开始学习日本动画产业成熟的制作流程规范，制作水平在十几年间不仅保持了下来还在继续提高，其2d国产动画的质量和产量综合看来直到现在也是国产一流。</p>\n<p>之前那段时期艰难生存的动画公司至少还是想做好动画的，而在形成竞劣局面的这个时期中，什么牛鬼蛇神都来做动画了，大量不想做动画的公司只是为了骗补就滥竽充数，一些之前还算认真的公司为了利润主动降低质量。个人认为这是国产动画真正的至暗时刻。</p>\n<h2 id=\"2011-2014\"><a href=\"#2011-2014\" class=\"headerlink\" title=\"2011-2014\"></a>2011-2014</h2><p>随着2014年各地政府减少动画补贴力度，国产电视动画因为不合理的补贴政策形成的泡沫终于破裂，同年动画总时长下降为2011年最高峰值的一半左右。但是国产动画并没有因此而走向灭亡，一股新生的力量正在酝酿，个人认为这股新力量才是国产动画的前途所在，那就是：网络动画。</p>\n<p>世界上为什么只有美国和日本拥有规模大的同时还实力强的动画产业？个人认为原因可能有：超过一亿工业化人口带来的巨大国内市场、经济高速发展给人民带来的高消费力，还有一个往往被忽视的因素，那就是：传播媒介的发展和普及。</p>\n<p>我曾经看到过这样的观点：美国动画产业的发展壮大赶上了国内电影普及的风口，日本动画产业的发展壮大赶上了国内电视普及的风口。我觉得确实有道理，正是因为他们早早抓住了风口才占据了绝对优势，所以后来者很难在同一个赛道追上他们。他们优势的集中体现就是拥有巨大产值的迪士尼、梦工厂等动画巨头和日本电视动画业界。</p>\n<p>现在，新的风口已经到来，那就是：<br>随着移动互联网的发展，网络真正意义上的大规模普及。如果国产动画产业抓不住这个风口，恐怕要到下一个媒介出现才有机会了。</p>\n<p>在2011~2014年，终于出现了影响力巨大的网络动画，那就是2012年的2d网络动画<a href=\"https://zh.moegirl.org.cn/%E5%8D%81%E4%B8%87%E4%B8%AA%E5%86%B7%E7%AC%91%E8%AF%9D\">《十万个冷笑话》</a>，由L²Studio（现在的<a href=\"https://zh.moegirl.org.cn/%E8%89%BE%E5%B0%94%E5%B9%B3%E6%96%B9\">艾尔平方</a>）制作，它带来了极强的示范效应，一大批2d网络动画如雨后春笋般涌现。这些网络动画极大拓展了目标受众年龄层，以至于相当一部分充斥着屎尿屁、黄暴擦边球。</p>\n<p>值得注意的是，<a href=\"https://zh.moegirl.org.cn/%E5%A5%BD%E4%BC%A0%E5%8A%A8%E7%94%BB\">好传动画</a>（代表作<a href=\"https://zh.moegirl.org.cn/%E5%A4%A7%E7%90%86%E5%AF%BA%E6%97%A5%E5%BF%97\">《大理寺日志》</a>）、寒木春华动画（代表作《罗小黑战记》）、绘梦动画（现已被b站全资收购，代表作《凸变英雄baba》）都是这个时期成立的。</p>\n<p>这一时期，一些察觉到风口的电视动画公司也开始向网络动画转型，如玄机科技、若森数字（代表作《侠岚》《画江湖之不良人》）。这两家公司与虚拟印象（现超神影业，代表作《啦啦啦德玛西亚》）、海岸线（代表作《纳米核心》）是国内3d网络动画发展初期最知名的动画公司。</p>\n<p>电视动画在这一时期也不是完全的一潭死水，2012年3d电视动画《熊出没》出现，并在后来接棒《喜羊羊与灰太狼》成为国内儿童向动画第一大品牌。</p>\n<p>总而言之，这个时期国产动画虽然仍处于黑暗中，但是已经向新的方向迈出了脚步。</p>\n<h2 id=\"2015-2018\"><a href=\"#2015-2018\" class=\"headerlink\" title=\"2015~2018\"></a>2015~2018</h2><p>之前提到过，国产网络动画拓宽了目标受众的年龄层，但当时一位国产2d动画导演是这样说的：之前电视动画泡沫的时代里“大家都画猫画狗去了”，能制作合格非儿童向动画的人才出现了严重断层，没有制作一部完整2d中长篇动画的能力。看到网络动画的风口大量涌入的资本想短时间内解决产能、人才问题，于是就简单粗暴地借助外部力量来强行制作2d中长篇动画，这就是当时着名的“中日合作”动画（如《一人之下》《雏蜂》）。当然这条路失败了，具体的原因rs-文宣帝-星辰的视频里分析的很好，我就不提了。</p>\n<p>另外，大量互联网人士进入国产动画行业也带来了显着的问题：他们把运营互联网IP那一套思维也带了进来，那就是：流量为王。他们的思路是这样的：先掌握原作的版权和平台，然后制作原作改编（自带原读者的流量）的动画，授权手游和改编为真人影视剧，最终产生各种衍生品形成IP。只要IP还有热度，还能继续炒热，就能源源不断地获得投资。他们抢原作就要抢人，抢人就会降低门槛，导致产生了一大批水平较低的创作者，变相再现了一部分当年补贴政策的问题（当然，总的来说还是比当年好多了）。</p>\n<p>从商业上说，这套IP运营思路缺乏长远规划，过于依赖可能只进不出的融资，流量变现的能力不够可靠，一旦IP链中某个环节出现问题就可能引发”雪崩”。</p>\n<p>关于流量变现的问题，国产网络动画原作类型的不同会带来巨大的影响。</p>\n<p>早期大多数网络改编动画的原作都是漫画（如《狐妖小红娘》《十万个冷笑话》），而当时无论是纸漫还是网漫在我国的受众都是相当有限的，其原作粉丝能带来的流量自然也有限，甚至可能连漫画平台都养不活。2018年，网络动画的资本寒冬来临，各个网络漫画平台相继暴雷，甚至连腾讯动漫（漫画平台）都砍掉了一大批作品，部分漫画也从免费变为付费。</p>\n<p>而如果改编动画的原作是网文那情况就完全不同了。首先，网文在我国有深厚基础，其受众之多、覆盖面之广绝不是漫画可比的。在网络动画产业形成前，网文产业就已经成熟了，改编动画之前就有巨大的读者群体带来的巨额利润，基本不用担心生存问题，甚至可以反过来成为网络动画产业的支柱之一 。其次，网文小说IP自带的流量之大也不是漫画可以比较的，动画的热度从一开始就有保障，足以支撑动画续作不断产生，不断在动画与小说间实现双向引流。</p>\n<p>不过，无论是上面提到的小说改还是漫画改，本质上还是那一套互联网IP运营思路，动画是原作IP的附属品，IP中真人影视剧的地位往往高于动画，动画不独立、地位低就会导致资方认真对待的可能性降低，这样一来出现”外行指导内行”、胡乱改编原作的现象就不足为奇了，最终导致动画人对动画的话语权也难以提升进而沦为对作品没有感情的打工人。<br>2022年三体动画的问题有可能与这个IP运营思路有关，下面这个知乎的回答说的很好，可以看看。<br><a href=\"https://www.zhihu.com/question/571649474/answer/2800922606\">《三体》动画成片为何是这种程度的？</a></p>\n<p>2017年，两个重量级网文IP《全职高手》《斗破苍穹》分别以2d、3d形式动画化，它们在热度上取得了巨大的成功，很多从来不看国产动画甚至不看动画的人都成为了观众，网文改动画的价值终于得到有力证明，标志着网文小说改动画开始成为国产网络动画的主流。</p>\n<p>3d动画《斗破苍穹》在热度上的成功还带来了一个意想不到的重大影响，那就是3d动画开始成为国产网络动画的主流。</p>\n<p>不过这里先谈谈我国2d动画的问题。2011年后网络动画的发展开始加速，出现了大量2d漫改网络动画，这是因为漫画形式天然就更适合以2d动画表现。但是，国产2d动画业界没有一个规范的行业标准，没有建立有效的人才培养体系（在少数公司内部实现了，如视美），各个动画公司流程、术语各不相同，最终导致人才断层、产能低下。事实上，这些2d漫改网络动画有相当一部分都质量低下（能做完就不错了），包括所谓的“中日合作”动画，这正反映了我国2d动画业界的问题。</p>\n<p>接下来说明我国的3d动画相对于2d动画的优势。比起需要从零培养的2d动画人才，3d动画人才可以直接从游戏、影视行业找，无论是数量还是平均质量都相当可观。游戏cg、影视特效的技术积累也可以用于发展3d动画。另外，国产3d连载电视动画在2005年后爆发性增长，原因很可能是当时出台的电视动画补贴政策中3d动画的补贴高于2d动画，这在某种程度上也给日后3d网络动画的发展打下了基础。</p>\n<p>现在终于可以把话题转回到《斗破苍穹》上了。2017年的3d网文改动画《斗破苍穹》不仅不能称之为高质量动画，甚至足以称为《斗破苍穹》动画系列的黑历史，但是他在热度上仍然取得了巨大的成功。于是终于有人意识到：我国3d动画产业对2d动画产业有”降维打击”级别的优势，潜力不可限量。2018年《斗罗大陆》的成功更是直接的证明。因此，3d小说改网络动画的产量自2018年开始坐火箭式的增长。</p>\n<p>总之，这个时期国产网络动画的发展道路可以说是一波三折，处于方向的调整期。</p>\n<h2 id=\"2019-2022\"><a href=\"#2019-2022\" class=\"headerlink\" title=\"2019~2022\"></a>2019~2022</h2><p>2019年拿下50亿人民币票房的国产动画电影《哪咤之魔童降世》无疑对国产动画产业有深远的影响，但是由于我主要关注的是连载动画，所以就不谈我国动画电影的发展了（这部分内容rs-文宣帝-星辰的视频里有）。</p>\n<p>电视动画方面，cctv少儿频道的动画乐翻天、动画梦工厂、银河剧场三个栏目在2019年彻底作古，可见国产电视动画确实日薄西山。</p>\n<p>2019年3月，企鹅影视、腾讯影业和腾讯动漫统一化为一个部门，腾讯系动画的掌舵人变为腾讯视频这个平台；2018年12月18日，b站召开第一届国创发布会（国创区成立在2017年3月），正式大量投资国产动画。由网络视频平台主导的网络动画堑壕战时代来临。视频平台是堑壕，动画公司是堑壕里的士兵。</p>\n<p>现在，网络视频平台参与动画的出品，直接投资动画公司，争夺国产动画的独播权，竞争之激烈甚至可以按视频平台来给国产动画公司划分阵营。好传动画携除b站独播的《大理寺日志》第一季以外的所有自己的动画版权投奔腾讯视频，《大理寺日志》第二季也变为腾讯视频出品及独播，其官方b站账号在第二季动画开播首日发的动态评论区一度被关闭，可见平台之间的火药味。</p>\n<p>平台之间激烈的竞争不知不觉间抬高了国产动画的价格，受益最大的就是动画公司。即使是作品少的小动画公司如果能得到流量大的平台支持就不用担心生存问题，去腾讯视频的更三动画（代表作《枕刀歌》）就是例子。</p>\n<p>个人认为目前是自1995年以来国产动画最好的时代。接下来就分别介绍各个视频平台在国产网络动画方面的情况。</p>\n<ul>\n<li>腾讯视频</li>\n</ul>\n<p>漫画已经成为其IP产业链最低的一环，腾讯系漫改动画数量急剧减少，资源集中到少数几部王牌漫改动画上。<br>支持了大量3d网文改动画，以一己之力推动3d网文改动画成为国产网络动画的主流。2018年12月1日开始，《斗罗大陆》开始不断更模式，从后期反响上看取得了圆满成功，再次刷新了对国产3d动画生产力的认知。其他3d年番动画陆续出现，甚至国内游戏cg大厂直接下场做3d连载动画（幻维、原力）再次证明了3d动画行业的潜力。需要注意的是，这些长期连载的3d动画年番的下限是高于补贴时代那些注水3d动画的，毕竟热度是硬性指标，而极其低质的3d动画不太可能带来巨大的流量。</p>\n<p>另外，斗罗等头部IP的火爆让整个腾讯视频国漫区都吃到了流量红利，这里进一步分析一下。企鹅影视（动画出品方）现在是有口碑有成绩的动画支持，没口碑有成绩的动画也支持，有口碑却成绩小的也继续出，突出一个不差钱，量变引发质变，这样就实现了腾讯视频几乎每一天都有多个动画更新，有了大量及格线以上的流水线商业动画培养的国产动画观众基本盘，其他少数高质量动画（如腾讯视频独播的原创动画《枕刀歌》《眷思量》）也有了获得更多流量的机会。</p>\n<p>可以说，目前所有视频平台中，只有腾讯视频把上下游全部吃下，围绕IP运营的上下游联动成熟，真正形成了商业动画产业链，建设完成了平台壁垒。</p>\n<p>目前，腾讯视频已经有余力去支持拓展投资动画的类型，一些高质量但小众的类型动画有望出现在其国漫发布会。希望他们能真正走完量变到质变的过程。</p>\n<p>腾讯视频大力投入国产动画的目的虽然是为了赚钱（甚至是垄断），但在这个过程中还是养活了很多动画公司，培养了更多动画人才，完善了国产动画的产业链，开发了国产动画的市场，扩大了国产动画观众群体。目前仍然有b站、优酷及爱奇艺在国产动画市场与它激烈竞争，综上来看，可以得出一个令人意外的结论：腾讯视频、企鹅影视这些腾讯系势力对国产动画产业目前不仅起到了正向作用，甚至是国产动画产业的支柱。当然，这也是个人的观点罢了。</p>\n<ul>\n<li>哔哩哔哩视频</li>\n</ul>\n<p>b站没有网文IP库，也没有腾讯视频的财力，其最大优势是自身的社区属性，为原创动画、同人动画（<a href=\"https://zh.moegirl.org.cn/%E6%88%91%E7%9A%84%E4%B8%89%E4%BD%93\">《我的三体》</a>）、实验动画（<a href=\"https://zh.moegirl.org.cn/%E8%83%B6%E5%9B%8A%E8%AE%A1%E5%88%92\">《胶囊计划》</a>）提供了相对良好的土壤。社区二创、自来水为国产动画提供了不错的宣传，做原创动画的公司可以通过与b站联合出品来分担风险并通过社区增强动画观众的粘性，从而保证原创动画的续作继续出。</p>\n<p>当然，b站出品的动画总量虽然远不如腾讯视频，但也基本保持在第二位，其在原创动画方面对腾讯视频略有优势。比较有代表性的b站出品的原创动画：《时光代理人》《黑门》。</p>\n<p>近年b站也开始对少数改编动画加大投入，例如《凡人修仙传》，当然也在改编动画上出了不少问题，例如《元龙》以及有名的《三体》动画。</p>\n<p>目前，个人对b站的期望就是维持在原创动画上的投入，不要让腾讯视频实现垄断，其它就没有什么奢望了。</p>\n<ul>\n<li>优酷和爱奇艺</li>\n</ul>\n<p>主要走网文改编动画路线，从腾讯未买的网文版权中挑选进行改编动画。个人对他们关注程度不够，这里就不详细介绍了。</p>\n<ul>\n<li>全平台</li>\n</ul>\n<p>还有不加入视频平台的堑壕战，不与任何视频平台绑定，在全视频平台播放的原创动画：《伍六七》系列，这大概才是原创动画的理想播出方式吧。</p>\n<p>到此，全文结束。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"html里的client、offset、scroll属性","url":"/blog/2021/07/22/client-offset-and-scroll-in-html/","content":"<p>先直接放一张老图。</p>\n<img src=\"/blog/2021/07/22/client-offset-and-scroll-in-html/tops_in_html.jpg\" class=\"\" title=\"tops\">\n\n<p>我们可以将一个<code>div</code>在浏览器中所占显示区域<strong>除自身外(<code>content</code>)</strong> 划分成如下几个部分：</p>\n<ul>\n<li><code>padding</code></li>\n<li><code>margin</code></li>\n<li><code>border</code></li>\n<li><code>position</code></li>\n<li><code>scrollbar</code></li>\n<li><code>overflow hidden</code></li>\n</ul>\n<h1 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h1><p><code>client</code>指元素本身的<strong>可视</strong>内容，仅包含<code>margin</code>、<code>padding</code>，不包括<code>overflow hidden</code>、<code>scrollbar</code>、<code>border</code>等。</p>\n<p>即<code>client = content + margin + padding</code>。</p>\n<h1 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h1><p><code>offset</code>指<strong>偏移</strong>，包括这个元素在文档中占用的所有显示宽度，包含<code>scrollbar</code>、<code>padding</code>、<code>border</code>，不包括<code>overflow hidden</code>的部分。</p>\n<p>比<code>client</code>多出了<code>border</code>和<code>scrollbar</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">offset = (content + margin + padding) + border + scrollbar</span><br><span class=\"line\">       = client + border + scrollbar</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"scroll\"><a href=\"#scroll\" class=\"headerlink\" title=\"scroll\"></a>scroll</h1><p>最麻烦的<code>scroll</code>来了，再上一张图。</p>\n<img src=\"/blog/2021/07/22/client-offset-and-scroll-in-html/tops_in_html_2.jpg\" class=\"\" title=\"scroll\">\n\n<p>对<code>scroll</code>来说，最常用的操作是设置<code>scrollTop</code>属性来控制滚动条。</p>\n<p><code>scrollTopMax</code>并不是常规属性，可以这样计算：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrollTopMax = scrollHeight - clientHeight</span><br></pre></td></tr></table></figure>\n\n<p>具体可以来<a href=\"https://codesandbox.io/s/client-offset-scroll-enqyh\">这里</a>调试。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"服装品牌推荐（未完成）","url":"/blog/2023/03/01/clothing-brand-recommendation/","content":"<h2 id=\"潮牌\"><a href=\"#潮牌\" class=\"headerlink\" title=\"潮牌\"></a>潮牌</h2><p>NASA男装</p>\n<h2 id=\"工装休闲\"><a href=\"#工装休闲\" class=\"headerlink\" title=\"工装休闲\"></a>工装休闲</h2><p>simwood简木<br>马登工装</p>\n<h2 id=\"运动休闲\"><a href=\"#运动休闲\" class=\"headerlink\" title=\"运动休闲\"></a>运动休闲</h2><p>优衣库<br>优衣库 GU<br>nothomme<br>重新加载<br>唐狮<br>INXX</p>\n<h2 id=\"商务休闲\"><a href=\"#商务休闲\" class=\"headerlink\" title=\"商务休闲\"></a>商务休闲</h2><p>Hugo Boss<br>Nautica Black Sail<br>J.D.V<br>太平鸟<br>劲霸男装<br>Massimo Dutti<br>Luka Dilong路卡迪龙</p>\n<p>棉先生<br>ChillBoyCrew<br>丹宁哲学<br>jssd homme</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"常用的服装纤维面料介绍","url":"/blog/2022/11/19/clothing-fabric/","content":"<p>常用的纤维成分分两种，天然纤维和化学纤维。</p>\n<h2 id=\"天然纤维\"><a href=\"#天然纤维\" class=\"headerlink\" title=\"天然纤维\"></a>天然纤维</h2><p>天然纤维包括</p>\n<ul>\n<li>棉</li>\n<li>麻</li>\n<li>蚕丝</li>\n<li>羊毛</li>\n<li>羊绒</li>\n</ul>\n<h3 id=\"棉\"><a href=\"#棉\" class=\"headerlink\" title=\"棉\"></a>棉</h3><p>将裹成一团的棉团疏顺，再纺成纱线，然后织布，就能做成衣服了。</p>\n<p>疏下的短毛可以作为合成纤维的材料。</p>\n<h4 id=\"品种\"><a href=\"#品种\" class=\"headerlink\" title=\"品种\"></a>品种</h4><p>最常见的棉品种是细绒棉。长度大约在28mm。</p>\n<p>另一个耳熟能详的品种是长绒棉。长绒棉是舶来品，又称海岛棉。最早是美国加勒比海岛种植的。<br>世界第一出产国是美国。美国注册了一个品牌叫SUPIMA，中文译为皮马棉。<br>其实新疆只有10%的种植面积是长绒棉，90%还是细绒棉。<br>长绒棉的长度比细绒棉多8mm，所以叫长绒棉。它并不是长得特别长的细绒棉，已经是两个品种了。</p>\n<h4 id=\"商品名\"><a href=\"#商品名\" class=\"headerlink\" title=\"商品名\"></a>商品名</h4><p>精疏棉也就是多疏几遍的棉花。并不是指的某个品种。</p>\n<p>丝花棉就是把棉布泡在很浓的烧碱里，发生反应，剧烈吸水膨胀。横截面从C型膨胀成O型，反射光线增多，看起来有蚕丝的光泽。</p>\n<p>彩棉就是基因突变的棉花，天然有颜色。一般也就棕色和绿色两种。纤维比普通的棉花更短，做成的面料品质一般般。<br>虽然彩棉不需要染色，但也要进印染厂。因为棉花生长过程中，有天然杂质（果胶质、蜡状物质、棉籽壳等），需要退浆精炼。</p>\n<h3 id=\"蚕丝\"><a href=\"#蚕丝\" class=\"headerlink\" title=\"蚕丝\"></a>蚕丝</h3><p>蚕丝按照蚕宝宝可分为桑蚕丝和柞蚕丝。</p>\n<p>桑蚕丝主要产地并不在江南，而是广西、四川、贵州、云南这些西南经济欠发达地区。品质最好的蚕丝在四川。</p>\n<p>柞蚕丝主要产地在辽宁。柞蚕丝是黄色的，染白会对蚕丝质产生较大影响，所以通常不染白，而是做成蚕丝被。柞蚕丝做成被子要比桑蚕丝更蓬松，柞蚕的蚕桶可以用来烧烤，价格又更低，所以性价比很高。</p>\n<p>双宫丝是两个蚕共用一个茧，抽不了丝，但可以直接摊平做成被子。双宫丝属于劣质丝，并不会更好。</p>\n<p>绢丝是抽蚕丝时的边角料，即断掉的蚕丝。像加工棉布一样，把细碎的蚕丝重新搓成线再织成布，就叫绢丝。</p>\n<h3 id=\"麻\"><a href=\"#麻\" class=\"headerlink\" title=\"麻\"></a>麻</h3><p>麻的种类还挺多，有亚麻、汉麻、大麻、黄麻、苎麻等等。</p>\n<p>麻比较粗糙，做成衣服多为棉麻混纺。</p>\n<h3 id=\"羊毛\"><a href=\"#羊毛\" class=\"headerlink\" title=\"羊毛\"></a>羊毛</h3><p>羊毛是绵羊毛。用推子推。</p>\n<p>澳大利亚盛产棉羊，供应了全国40%的羊毛。被称为骑在绵羊背上的国家。</p>\n<p>马海毛是土耳其安哥拉山羊毛。马海是英语mohair的音泽。阿拉伯语的意思是“像蚕丝一样的羊毛”。</p>\n<h3 id=\"羊绒\"><a href=\"#羊绒\" class=\"headerlink\" title=\"羊绒\"></a>羊绒</h3><p>羊绒是用铁疏子从山羊身上疏下来的绒毛。</p>\n<p>中国贡献了全球80%的羊绒，主要是内蒙和新疆。开司米就是羊绒英文cashmere的音译。也叫克什米尔，是介于青藏高原西端和南亚最北端交接的一个地区。以前羊绒都是从这里传入欧洲。</p>\n<h2 id=\"化学纤维\"><a href=\"#化学纤维\" class=\"headerlink\" title=\"化学纤维\"></a>化学纤维</h2><p>化学纤维分为纯人工合成的合成纤维和再生纤维素加工的再生纤维素纤维。</p>\n<p>合成纤维是全部由化工原料合成的纤维，包括</p>\n<ul>\n<li>涤纶</li>\n<li>锦纶</li>\n<li>腈纶</li>\n<li>氨纶</li>\n</ul>\n<p>再生纤维素纤维是把棉花、木头、竹子用化学试剂重新溶解再纺丝织布。包括</p>\n<ul>\n<li>粘胶</li>\n<li>莫代尔</li>\n<li>莱赛尔</li>\n<li>醋酯纤维</li>\n</ul>\n<h3 id=\"粘胶纤维\"><a href=\"#粘胶纤维\" class=\"headerlink\" title=\"粘胶纤维\"></a>粘胶纤维</h3><p>诞生于19世纪，也就是清朝时期。</p>\n<p>商家宣传的竹纤维就属于粘胶纤维。</p>\n<p>它是用疏棉时疏下的短棉花，用二硫化碳溶解，得到一陀粘乎乎的东西，所以叫粘胶纤维。</p>\n<p>挤成细丝就可以正常纺丝织布。</p>\n<p>结构更疏松，吸湿性比棉花还强50%。</p>\n<p>二硫化碳非常不环保，对环境污染很大。</p>\n<h3 id=\"莫代尔纤维\"><a href=\"#莫代尔纤维\" class=\"headerlink\" title=\"莫代尔纤维\"></a>莫代尔纤维</h3><p>在粘胶压饸络面这一步，把它挤到一个锌离子很浓的液体里。比粘胶纤维更有韧性，遇湿水后不容易破，很适合贴身穿。</p>\n<h3 id=\"莱赛尔\"><a href=\"#莱赛尔\" class=\"headerlink\" title=\"莱赛尔\"></a>莱赛尔</h3><p>把二疏化碳溶剂换成了NMMO，溶剂可回收，比天然纤维还环保。</p>\n<p>莱赛尔的英文是lyocell，lyo（拉丁语）是溶解，cell是纤维素。</p>\n<p>天丝的叫法是Tencel这个奥地利兰精纺丝厂注册的品牌商标音泽而来。包括莫代尔和莱赛尔两种，所以并不是特指莱赛尔。</p>\n<h3 id=\"醋酯纤维\"><a href=\"#醋酯纤维\" class=\"headerlink\" title=\"醋酯纤维\"></a>醋酯纤维</h3><p>把溶解棉花或木头加入另一种化学试剂，让它变得没那么吸水。</p>\n<p>棉花的成份，却有着塑料的质感，有光泽感。</p>\n<p>最常见的醋酯纤维就是香烟过滤嘴。</p>\n<p>一般的醋酯纤维是二醋酸。如果反应得更充分一些，变成三醋酸，质感就更高级了。通常只出现在高端时装上。悬垂感特别高级，目前只有日本三菱能生产。</p>\n<h3 id=\"涤纶\"><a href=\"#涤纶\" class=\"headerlink\" title=\"涤纶\"></a>涤纶</h3><p>涤纶是聚脂纤维的一种，也是最普通的一种。它的可塑性非常强，可以做出很多面料。</p>\n<p>像夏凉被，法兰绒，珊瑚绒，羊羔绒都是涤纶。</p>\n<p>涤纶本身不怎么吸湿，但可以在纺丝的过程中，改变横截面，增大比较表面积，反倒可以做成速干服。</p>\n<p>的确良也是涤纶，美国英威达纺织厂生产的涤纶商标达克纶DACRON，经香港进入国内被叫成的确良。</p>\n<p>之后英国的涤纶商标terylene更火，音译过来就叫成涤沦。</p>\n<p>聚脂纤维包含了聚对苯二甲酸乙二醇酯PET（涤纶），PTT，PBT。</p>\n<p>索罗娜纤维，就是PET+PTT混纺。PET+PTT在热收缩时因为热收缩率不同，会变成类似弹簧的结构，有点持久弹力，经常用于T恤领口，不容易走型。</p>\n<p>阳离子面料也是聚脂纤维，在合成的时候加入了阴离子结构，可以让阳离子染料像磁铁一样吸附上去，减少加工能耗。<br>实际上阳离子面料是带阴离子电荷的，全名叫作阳离子染料可以染色的染纶。并不存在什么发热阳离子的功效。</p>\n<p>再生聚脂纤维很少，只有不到5%。一般也是用来宣传，像优衣库，ZARA会有用到。（有没有想到苹果宣传的回收金属塑料？）</p>\n<h3 id=\"锦纶\"><a href=\"#锦纶\" class=\"headerlink\" title=\"锦纶\"></a>锦纶</h3><p>锦纶学名叫聚酰胺纤维，又叫尼龙，是英语Nylon的音译，叫锦纶的原因是国内第一个生产商是辽宁锦西化纤厂。</p>\n<p>锦纶的耐磨性好，可做冲锋衣、羽绒服、防晒服，价格比涤纶贵3倍。</p>\n<p>在湿水时反而更加坚韧，渔网都是锦纶做的。</p>\n<h3 id=\"腈纶\"><a href=\"#腈纶\" class=\"headerlink\" title=\"腈纶\"></a>腈纶</h3><p>腈纶念“睛”纶不念“晴”纶，它是用聚丙烯腈合成的。</p>\n<p>外号人造羊毛，基本上只会出现在冬天的毛衣和内衣上，保暖性好。</p>\n<p>德绒就是德国拜耳生产的腈纶商标。美雅智是日本三菱公司的，色拉姆是日本东洋公司的。</p>\n<p>腈纶不会发热，洗完澡没擦干直接穿腈纶会感觉有暖流是因为混纺的粘胶纤维吸湿发热。保暖还得看厚度和纤维间储存的空气。</p>\n<h3 id=\"氨纶\"><a href=\"#氨纶\" class=\"headerlink\" title=\"氨纶\"></a>氨纶</h3><p>氨纶的重要特性就是弹力。一般掺个百分之几就很有弹力了。</p>\n<p>莱卡是杜邦公司生产的氨纶。</p>\n<p>氨纶会与84消毒液反应，故含氨纶的衣服不能用84漂白。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>随着纺织科技的发展，面料并不是衣服性能的决定性因素了，纺织染整工艺对最终性能的影响越来越大，同一种面料成分做成的衣服性能可以完全不一样。</p>\n<p>就像玻璃和芯片两个完全不一样的东西，原材料却都是沙子。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"在vsto中出现COMException","url":"/blog/2023/01/16/com-exception-in-vsto/","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>用户反馈使用excel插件时第一次点击功能区上的按钮会抛出COMException，但第二次就没问题。<br>会抛出几种COMException：<br>当使用COM接口的同时，用户正在操作（比如按下鼠标不放选择区域）时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.Runtime.InteropServices.COMException (0x800AC472): Exception from HRESULT:0x800AC472</span><br><span class=\"line\">  in System.RuntimeType.ForwardCallToInvokeMember(String memberName, BindingFlags flags, Object target, Int32[] aWrapperTypes, MessageData&amp; msgData)</span><br><span class=\"line\">  in Microsoft.office.Interop.Excel.Range.NoteText(Object Text, Object Start, Object Length)</span><br></pre></td></tr></table></figure>\n<p>Excel忙时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.Runtime.InteropServices.COMException (0x8001010A): The message filter indicated that the application is busy. (Exception from HRESULT: 0x8001010A (RPC_E_SERVERCALL_RETRYLATER))</span><br><span class=\"line\">  in System.RuntimeType.ForwardCallToInvokeMember(String memberName, BindingFlags flags, Object target, Int32[] aWrapperTypes, MessageData&amp; msgData)</span><br><span class=\"line\">  in Microsoft.Office.Interop.Excel.ListObject.get_HeaderRowRange()</span><br></pre></td></tr></table></figure>\n<p>当使用COM接口去写入值，而用户又在单元格输入字符进入编辑模式时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.Runtime.InteropServices.COMException (0x800A03EC): Exception from HRESULT:0x800A03EC</span><br><span class=\"line\">   in System.RuntimeType.ForwardCallToInvokeMember(String memberName, BindingFlags flags, Object target, Int32[] aWrapperTypes, MessageData&amp; msgData)</span><br><span class=\"line\">   in 在 Microsoft.Office.Interop.Excel.Range.set_Value2(Object )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>总的来说，问题出现原因是excel插件使用<strong>后台线程</strong>调用宿主（excel）COM接口时，<strong>宿主正忙</strong>（比如重新计算工作表）导致请求失败。<br>解决方法有两个：<br>一是尽量不使用后台线程，全都放在主线程上面做；<br>二是在后台线程上注册消息过滤器来处理失败请求。</p>\n<p>完全不使用后台线程是不现实的，微软有一篇2008年的文章介绍了如何使用消息过滤器：<a href=\"https://learn.microsoft.com/en-us/archive/blogs/andreww/implementing-imessagefilter-in-an-office-add-in\">Implementing IMessageFilter in an Office add-in</a>。</p>\n<p>在微软vsto文档的<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/threading-support-in-office#background-threads-that-call-into-the-office-object-model\">Background threads that call into the Office object model</a>这段，也有提到使用message filter来处理COMExcpetion。</p>\n<h2 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h2><p>想要复现很简单，在调用COM接口之前先Sleep几秒钟，让我们有时间去把宿主变得不可用。正统的办法是执行一个耗资源的宿主任务，比如进行Wind数据更新。但更简便的办法是选中单元格敲个字符进入编辑模式，或者按住鼠标拖个选择框也行。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>按微软那篇08年的文章里的做法并不能生效诶。试了试微软另一篇文章<a href=\"https://learn.microsoft.com/en-us/previous-versions/ms228772(v=vs.140)\">How to: Fix ‘Application is Busy’ and ‘Call was Rejected By Callee’ Errors</a>里的示例，也没用。</p>\n<p>stackoverflow上<a href=\"https://stackoverflow.com/questions/51712753/excel-vsto-async-button-strange-behaviour-with-user-interaction\">一篇2018年的贴子</a>描述了相同的问题，楼主在评论里说他实现了MessageFilter后仍然不能解决COMExcpetion的问题，然后也没了下文。</p>\n<p>最终还是只能使用try&#x2F;catch + retry的方式。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"精酿啤酒简单分类","url":"/blog/2022/12/04/common-craft-beer-styles/","content":"<p>有时间可以重读一下<a href=\"https://book.douban.com/subject/30414965/\">啤博士的啤酒札记</a>，这里只是简单的做下记录。</p>\n<p>分类可以有多个不同维度，比如生产工艺，国家，风格等。</p>\n<h1 id=\"发酵方式\"><a href=\"#发酵方式\" class=\"headerlink\" title=\"发酵方式\"></a>发酵方式</h1><p>按发酵方式的不同可以分为艾尔和拉格。</p>\n<h2 id=\"艾尔\"><a href=\"#艾尔\" class=\"headerlink\" title=\"艾尔\"></a>艾尔</h2><p>艾尔酵母，也就是上发酵酵母：</p>\n<p>它适合在相对较高的温度下进行发酵（15-25摄氏度），该温度是绝大部分微生物的理想代谢温度，啤酒酵母的代谢也达到理想状态因而繁殖速度很快，会在麦芽糖分解的过程之外产生更多代谢产物，其中有部分酯类和酚&#x2F;醛味是诸如比利时啤酒和德式小麦啤追求的有益味道，但也有更多双乙酰、乙醛、二甲基硫咪等。</p>\n<p>艾尔酵母在发酵期间会产生大量热量，容易导致酵母不健康甚至啤酒变质，对技术的高要求造成了比较难以大批量生产。</p>\n<p>又由于风味物质的多变，造就了各种风格。</p>\n<p>所以我们喝的精酿里面绝大部分都是艾尔。</p>\n<h2 id=\"拉格\"><a href=\"#拉格\" class=\"headerlink\" title=\"拉格\"></a>拉格</h2><p>拉格酵母，就是下发酵酵母：</p>\n<p>它的发酵温度仅有4-12摄氏度，生理代谢速度相比艾尔酵母较慢，带来的代价是更长的发酵时间，可能要长达15天甚至更长。它的好处在于发酵非常彻底，代谢产物少很多，味道更加清冽爽口，更多体现啤酒中其他三种原料–水、麦芽和啤酒花–的味道。</p>\n<p>在工业化的早期拉格反而更适合精酿啤酒的标签，彼时的艾尔温控、比重、发酵控制都很差，品质完全比不上拉格。以至于很多著名的拉格都像红酒一样以产地命令，比如捷克的皮尔森市、百威市所产的拉格啤酒都成为了啤酒风格的代名词。</p>\n<p>但随着工业革命的进行，便宜量又足的大绿棒子占领了市场，导致拉格逐渐丧失逼格。</p>\n<p>虽然拉格精酿很少见，但并不是没有，比如波罗的海波特和冰馏博克就都是拉格啤酒。</p>\n<h1 id=\"国家\"><a href=\"#国家\" class=\"headerlink\" title=\"国家\"></a>国家</h1><h2 id=\"英式\"><a href=\"#英式\" class=\"headerlink\" title=\"英式\"></a>英式</h2><h2 id=\"美式\"><a href=\"#美式\" class=\"headerlink\" title=\"美式\"></a>美式</h2><h2 id=\"比利时\"><a href=\"#比利时\" class=\"headerlink\" title=\"比利时\"></a>比利时</h2><h2 id=\"法国\"><a href=\"#法国\" class=\"headerlink\" title=\"法国\"></a>法国</h2><h1 id=\"风格\"><a href=\"#风格\" class=\"headerlink\" title=\"风格\"></a>风格</h1><p>最常见的维度还是风味，比如IPA、世涛、小麦、修道院、波特等。</p>\n<p>啤酒四要素是麦芽，酵母，啤酒花和水。然后再加上辅料。再特别的风味也只能从这几点做文章，记风味可以从这里出发。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"常用开源镜像站","url":"/blog/2022/01/18/common-mirrors/","content":"<p>商业巨头们</p>\n<ul>\n<li><del><a href=\"https://developer.aliyun.com/mirror/\">阿里</a></del></li>\n<li><a href=\"https://mirrors.cloud.tencent.com/\">腾讯</a></li>\n<li><a href=\"https://mirrors.huaweicloud.com/\">华为</a></li>\n<li><a href=\"https://mirrors.163.com/\">网易</a></li>\n</ul>\n<p>再来点教育网的</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">清华</a></li>\n<li><a href=\"https://mirrors.sjtug.sjtu.edu.cn/\">上交大</a></li>\n<li><a href=\"https://mirror.bjtu.edu.cn/\">北交大</a></li>\n<li><a href=\"http://mirrors.zju.edu.cn/\">浙大</a></li>\n<li><a href=\"https://mirrors.ustc.edu.cn/\">中科大</a></li>\n</ul>\n<p>这些镜像站通常在提供镜像的同时还会提供用法，比如：</p>\n<ul>\n<li><a href=\"https://mirrors.cloud.tencent.com/help/pypi.html\">pypi</a></li>\n<li><a href=\"http://www.npmmirror.com/\">npm</a></li>\n<li><a href=\"https://mirrors.ustc.edu.cn/help/debian.html\">debian</a></li>\n<li><a href=\"https://mirrors.163.com/.help/maven.html\">maven</a></li>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/rustup/\">rustup</a></li>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/crates.io-index.git/\">crates.io-index.git</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/60750.html\">docker hub</a></li>\n</ul>\n<p>阿里的镜像已经被列入黑名单，竟然限速至200KB&#x2F;s，本来就是为了加速，现在变成龟速。</p>\n<p>较推荐几个大学的镜像站，比如中科大mirros。</p>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><p>国内有一个<a href=\"https://ghproxy.com/\">ghproxy</a>提供了github的镜像源，在git clone时，只要使用<code>git clone https://ghproxy.com/https://github.com/stilleshan/ServerStatus</code>，即在正常的github链接前面加上<code>https://ghproxy.com/</code>即可实现镜像。</p>\n<p>如果想润物细无声，可以修改git设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global url.<span class=\"string\">&quot;https://ghproxy.com/https://github.com&quot;</span>.insteadOf <span class=\"string\">&quot;https://github.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样对使用来说就比较无感了，但会影响<code>git push</code>，不建议使用。</p>\n<h2 id=\"dockerhub\"><a href=\"#dockerhub\" class=\"headerlink\" title=\"dockerhub\"></a>dockerhub</h2><h3 id=\"国内源\"><a href=\"#国内源\" class=\"headerlink\" title=\"国内源\"></a>国内源</h3><ul>\n<li><a href=\"https://sf.163.com/help/documents/56918246390157312\"><del>网易数帆</del></a></li>\n</ul>\n<p><del><a href=\"https://hub-mirror.c.163.com/\">https://hub-mirror.c.163.com</a></del></p>\n<ul>\n<li><a href=\"https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8\">百度云</a></li>\n</ul>\n<p><a href=\"https://mirror.baidubce.com/\">https://mirror.baidubce.com</a></p>\n<ul>\n<li><a href=\"https://www.aliyun.com/product/acr\">阿里云-需登录</a></li>\n</ul>\n<p>需要登录后，去管理控制台中的镜像加速器查看自己的id，以获取加速器地址：https:&#x2F;&#x2F;<code>$&#123;your_id&#125;</code>.mirror.aliyuncs.com</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>修改<code>daemon.json</code>，添加以下内容</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://&lt;my-docker-mirror-host&gt;&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后重启docker daemon以生效。可参见<a href=\"https://docs.docker.com/registry/recipes/mirror/#configure-the-docker-daemon\">官方文档</a>。</p>\n<p>可用<code>docker info</code>来查看Registry Mirrors有没有应用成功。</p>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h4><p>具体到<a href=\"https://docs.docker.com/engine/install/linux-postinstall/#configuring-remote-access-with-daemonjson\">linux上</a></p>\n<ol>\n<li>docker是使用apt安装的</li>\n</ol>\n<p>此时daemon.json的位置在<code>/etc/docker/daemon.json</code>，修改完后可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>来重启docker.service。</p>\n<ol start=\"2\">\n<li>docker是使用snap安装的</li>\n</ol>\n<p>此时daemon.json的位置在<code>/var/snap/docker/current/config/daemon.json</code>，修改完后使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">snap restart docker</span><br></pre></td></tr></table></figure>\n<p>来重启docker服务。</p>\n<h4 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h4><p>而<a href=\"https://docs.docker.com/desktop/settings/windows/#docker-engine\">windows上</a>，daemon.json的位置在<code>%USERPROFILE%\\.docker\\daemon.json</code>，一般直接用Docker Desktop的GUI界面来重启docker daemon。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"配置IIS实现反向代理","url":"/blog/2022/10/08/configure-iis/","content":"<h2 id=\"安装IIS\"><a href=\"#安装IIS\" class=\"headerlink\" title=\"安装IIS\"></a>安装IIS</h2><p>打开<code>服务管理器</code>，点击<code>添加角色和功能</code>，选择安装<code>Web 服务器(IIS)</code>。</p>\n<img src=\"/blog/2022/10/08/configure-iis/install-iis.png\" class=\"\" title=\"安装IIS\">\n\n<p>一般来说，直接按默认设置一路下一步就好。</p>\n<h2 id=\"Web平台安装程序\"><a href=\"#Web平台安装程序\" class=\"headerlink\" title=\"Web平台安装程序\"></a>Web平台安装程序</h2><p>下一步要安装<a href=\"https://www.microsoft.com/web/downloads/platform.aspx\">Web平台安装程序</a>，即Web Platform Installer，简写为WebPI。</p>\n<p>如果使用ARR离线安装包，这一步可以省去。</p>\n<h2 id=\"Application-Request-Routing\"><a href=\"#Application-Request-Routing\" class=\"headerlink\" title=\"Application Request Routing\"></a>Application Request Routing</h2><p>通过WebPI安装<a href=\"https://www.iis.net/downloads/microsoft/application-request-routing\">Application Request Routing</a>，简写ARR。</p>\n<p>如果无法通过WebPI在线安装，也可直接下载<a href=\"https://www.microsoft.com/web/handlers/webpi.ashx?command=getinstallerredirect&appid=ARRv3_0\">离线安装包</a>。</p>\n<h2 id=\"设置反向代理\"><a href=\"#设置反向代理\" class=\"headerlink\" title=\"设置反向代理\"></a>设置反向代理</h2><h3 id=\"开启ARR的代理功能\"><a href=\"#开启ARR的代理功能\" class=\"headerlink\" title=\"开启ARR的代理功能\"></a>开启ARR的代理功能</h3><p>这一步其实也能省略，如果没有开启ARR的代理功能，在进入<code>URL重写(rewrite)</code>的时候会提示要不要打开。</p>\n<h3 id=\"URL重写\"><a href=\"#URL重写\" class=\"headerlink\" title=\"URL重写\"></a>URL重写</h3><p>这里简单记录一下反向代理域名到本地端口的设置方式。</p>\n<ol>\n<li><p>添加空白入站规则。</p>\n</li>\n<li><p>匹配URL</p>\n</li>\n</ol>\n<p>这里的模式一般填<code>(.*)</code>就好，所有URL我们都要反向代理。</p>\n<ol start=\"3\">\n<li>条件</li>\n</ol>\n<p>条件输入为<code>&#123;HTTP_HOST&#125;</code>，模式为域名，如<code>^www\\.yourdomain\\.com</code>。</p>\n<ol start=\"4\">\n<li>操作</li>\n</ol>\n<p>重写到本地端口，如<code>http://localhost:3000/&#123;R:1&#125;</code>。</p>\n<p>关于后引用比如<code>&#123;R:1&#125;</code>和<code>&#123;C:1&#125;</code>的使用可查看<a href=\"https://learn.microsoft.com/en-us/iis/extensions/url-rewrite-module/url-rewrite-module-configuration-reference#using-back-references-in-rewrite-rules\">微软官方文档</a></p>\n<ol start=\"5\">\n<li><strong>勾选</strong>停止处理后续规则</li>\n</ol>\n<p>当反向代理匹配成功后，停止继续匹配后续规则，防止出现幺娥子。</p>\n<h2 id=\"开启https\"><a href=\"#开启https\" class=\"headerlink\" title=\"开启https\"></a>开启https</h2><h3 id=\"安装SSL证书\"><a href=\"#安装SSL证书\" class=\"headerlink\" title=\"安装SSL证书\"></a>安装SSL证书</h3><p>首先需要有SSL证书，推荐的有两种方式：</p>\n<ol>\n<li>使用<a href=\"https://help.aliyun.com/document_detail/156645.htm\">阿里云免费SSL证书</a></li>\n<li>使用<a href=\"https://github.com/acmesh-official/acme.sh\">acme.sh</a></li>\n</ol>\n<p>其中，acme是linux专供，但它的续期是自动的，不需要每年一次额外的手动更新证书。</p>\n<p>如果用在IIS，就只能使用阿里云。安装方法参见阿里云文档<a href=\"https://help.aliyun.com/document_detail/98729.html\">在IIS服务器上安装SSL证书</a>。</p>\n<h3 id=\"导入证书\"><a href=\"#导入证书\" class=\"headerlink\" title=\"导入证书\"></a>导入证书</h3><p>既可以通过<code>mmc</code>Windows服务器控制台（MMC，Microsoft Management Console）导入，也可以通过IIS的<code>服务器证书</code>导入。</p>\n<h3 id=\"绑定证书\"><a href=\"#绑定证书\" class=\"headerlink\" title=\"绑定证书\"></a>绑定证书</h3><p>进入绑定界面</p>\n<img src=\"/blog/2022/10/08/configure-iis/binding.png\" class=\"\" title=\"进入绑定界面\">\n\n<p>添加绑定</p>\n<img src=\"/blog/2022/10/08/configure-iis/add-binding.png\" class=\"\" title=\"添加绑定\">\n\n<p>完成配置</p>\n<img src=\"/blog/2022/10/08/configure-iis/commit_binding.png\" class=\"\" title=\"完成配置\">\n\n<p>注意要将类型切换至https，填入正确的域名（免费证书只对应一个单域名），且选中需要服务器名称指示（Server Name Indication）。</p>\n<p>如不选中需要服务器名称指示，会使用同一个证书。</p>\n<h3 id=\"将http重定向至https\"><a href=\"#将http重定向至https\" class=\"headerlink\" title=\"将http重定向至https\"></a>将http重定向至https</h3><p>已经有了https，就不需要再保留不安全的http了。</p>\n<p>创建一个新的URL重写规则，判断<code>&#123;HTTPS&#125;</code>为<code>^OFF$</code>，<code>&#123;HTTP_METHOD&#125;</code>为<code>^GET$</code>，且域名为已开启https的域名，则重定向至<code>https://&#123;HTTP_POST&#125;/&#123;R:1&#125;</code>。</p>\n<p>重定向类型可以用<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages\">302 Found</a>。</p>\n<p><strong>注意</strong></p>\n<ul>\n<li><p>要将此条规则优化级挪至反向代理的规则之上，避免直接走了反向代理的规则执行不到这里。</p>\n</li>\n<li><p>重定向一定要指定仅对get方法生效，避免影响post。</p>\n</li>\n</ul>\n<p>不同的客户端对post返回的状态码处理方法有不同，会生产不同的效果。</p>\n<p>比如.Net的HttpClient对307的第二次请求就会去除Authentication信息，而nodejs的axios和postman会带上。</p>\n<h2 id=\"客户端IP\"><a href=\"#客户端IP\" class=\"headerlink\" title=\"客户端IP\"></a>客户端IP</h2><p>在<code>Application Request Routing Cache</code>–&gt;<code>Server Proxy Settings</code>–&gt;<code>Preserve Client IP in the following header</code>设置中，可以指定客户端IP的传递方式。</p>\n<p>默认是保存在<code>X-Forwarded-For</code>中，如果需要保存在其他的header中，可以在这里修改。或者留空，不保存。</p>\n<p>可参阅<a href=\"http://technet.microsoft.com/en-us/library/dd443533(v=ws.10).aspx\">Application Request Routing Page文档</a>。</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>通常服务器的系统盘容量都不会特别大，如果不做限制，IIS的日志将会成为很大的负担。</p>\n<h3 id=\"更改日志文件目录\"><a href=\"#更改日志文件目录\" class=\"headerlink\" title=\"更改日志文件目录\"></a>更改日志文件目录</h3><p>我们可以从这里进入日志配置。</p>\n<img src=\"/blog/2022/10/08/configure-iis/logging_configure.jpg\" class=\"\" title=\"日志配置\">\n\n<p>默认日志文件存储在<code>%SystemDrive%\\inetpub\\logs\\LogFiles</code>下，我们可以把它更改至有更大剩余容量的硬盘上。</p>\n<img src=\"/blog/2022/10/08/configure-iis/logging_file_directory.jpg\" class=\"\" title=\"日志文件目录\">\n\n<p>但这样并不能完全解决问题，不论多大的硬盘，以IIS日志每天几百兆的速度还是很快会有满的一天，真正的解决方案还是类似只保留最近30天的日志之类的。</p>\n<h3 id=\"使用IIS-Log-Cleaner工具\"><a href=\"#使用IIS-Log-Cleaner工具\" class=\"headerlink\" title=\"使用IIS Log Cleaner工具\"></a>使用IIS Log Cleaner工具</h3><p>最简单的办法是使用微软自家的<a href=\"https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/managing-iis-log-file-storage#delete-old-log-files-by-the-iis-log-cleaner-tool\">IIS Log Cleaner Tool</a>。</p>\n<p>参见微软文档，下载后直接运行，第一次运行需要先进行设置，之后就会自动清除了。</p>\n<p>需要注意的是，<code>IISLogCleaner.exe</code>并不会注册服务，也就是说重启后需要手动再次启动。所以我们需要把它的快捷方式扔进<code>%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>来完成自启。</p>\n<h3 id=\"添加客户端IP到日志\"><a href=\"#添加客户端IP到日志\" class=\"headerlink\" title=\"添加客户端IP到日志\"></a>添加客户端IP到日志</h3><p>在日志页，我们可以添加客户端IP到日志中。</p>\n<p>在日志文件栏的选择字段中，添加Request Header的<code>X-Forward-For</code>自定义字段。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows","iis"]},{"title":"控制diffusion模型","url":"/blog/2023/02/22/control-diffusion-models/","content":"<p><a href=\"https://github.com/lllyasviel\">Lvmin Zhang</a>发布的<a href=\"https://github.com/lllyasviel/ControlNet\">ControlNet</a>给了我们一个答案。</p>\n<p>来自日本的<a href=\"https://github.com/Mikubill\">Kakigōri Maker</a>提供了<a href=\"https://github.com/Mikubill/sd-webui-controlnet\">webui的扩展</a>。</p>\n<h2 id=\"安装扩展\"><a href=\"#安装扩展\" class=\"headerlink\" title=\"安装扩展\"></a>安装扩展</h2><ol>\n<li>进入webui中的”Extensions”标签页。</li>\n<li>进入”Install from URL”标签页。</li>\n<li>把网址<code>https://github.com/Mikubill/sd-webui-controlnet</code>贴到”URL for extension’s git repository”。</li>\n<li>点击”Install”按钮，等待。</li>\n<li>重启webui。</li>\n</ol>\n<h2 id=\"controlnet界面\"><a href=\"#controlnet界面\" class=\"headerlink\" title=\"controlnet界面\"></a>controlnet界面</h2><img src=\"/blog/2023/02/22/control-diffusion-models/control-net-extension-glance.png\" class=\"\" title=\"ControlNet界面\">\n\n<h2 id=\"下载模型\"><a href=\"#下载模型\" class=\"headerlink\" title=\"下载模型\"></a>下载模型</h2><p>我们需要先下载预训练好的ControlNet模型。</p>\n<p>原作者Lvmin Zhang有公布<a href=\"https://huggingface.co/lllyasviel/ControlNet/tree/main/models\">自己基于sd15训练的模型</a>。但这个模型很大，有5.71GB。</p>\n<p>Kakigōri Maker提供了<a href=\"https://huggingface.co/webui/ControlNet-modules-safetensors/tree/main\">精简模型</a>，<a href=\"https://github.com/kohya-ss\">kohya-ss</a>提供了<a href=\"https://huggingface.co/kohya-ss/ControlNet-diff-modules/tree/main\">叉分模型</a>，这两个模型产生的结果有所不同。</p>\n<h2 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h2><p>sd-webui-controlnet内置了几种预处理器。<br>首次使用时会自动下载对应的<a href=\"https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/\">annotator</a>。</p>\n<ul>\n<li>none<br>无预处理，适用于手绘草图。<br>无需搭配controlnet模型。</li>\n<li>canny<br>canny全称是Canny edge detection，是1986年提出的一种边缘检测算法。<br>搭配<code>control_canny</code>模型使用。</li>\n<li>hed<br>hed全称是<a href=\"https://arxiv.org/abs/1504.06375\">Holistically-nested Edge Detection</a>，一种整体嵌套式边缘检测的 DL 模型，精度比 Canny Edge 高不少），捕捉其边缘特征用于引导。<br>搭配<code>control_hed</code>模型使用。</li>\n<li>openpose<br><a href=\"https://arxiv.org/abs/1812.08008\">openpose</a>是美国卡耐基梅隆大学基于卷积神经网络和监督学习开发的<a href=\"https://github.com/CMU-Perceptual-Computing-Lab/openpose\">开源库</a>，可以实现实时人体动作、脸部表情、手脚姿态的估计。<br>搭配<code>control_openpose</code>模型使用。</li>\n<li>depth和depth_leres<br>基于深度图重建。<br>depth_leres中的LeReS的全写是<a href=\"https://arxiv.org/abs/2012.09365\">Learning to Recover 3D Scene Shape from a Single Image</a>，可以获得更好的效果。<br>搭配<code>control_depth</code>模型使用。</li>\n<li>normal_map<br>normal_map是法线贴图，在保留细节方面更好。<br>搭配<code>control_normal</code>模型使用。</li>\n<li>mlsd<br>mlsd的全写是Maximum-Likelihood Sequence Detector，即极大似然估计。<br>搭配<code>control_mlsd</code>模型使用。</li>\n<li>segmentation<br>图像分割。<br>搭配<code>control_seg</code>模型使用。</li>\n</ul>\n<p>每种预处理的效果可以在项目主页的<a href=\"https://github.com/Mikubill/sd-webui-controlnet#examples\">examples</a>查看。</p>\n<h3 id=\"openpose编辑器\"><a href=\"#openpose编辑器\" class=\"headerlink\" title=\"openpose编辑器\"></a>openpose编辑器</h3><p>除了从图片中提取姿势，我们也可以使用<a href=\"https://github.com/fkunn1326/openpose-editor\">Openpose Editor</a>扩展来直接编辑一个openpose。</p>\n<p>这个扩展不带骨骼约束，想要带骨骼约束可以使用<a href=\"https://github.com/suyu0925/raw/blob/master/stable-diffusion/openpose/openpose.vrm\">openose的vrm</a>去<a href=\"https://www.vrmwebpose.app/\">vrmwebpose</a>网站编辑。</p>\n<h2 id=\"Guess-Mode（实验性）\"><a href=\"#Guess-Mode（实验性）\" class=\"headerlink\" title=\"Guess Mode（实验性）\"></a>Guess Mode（实验性）</h2><p>如果不知道怎么写提示语，可以使用<a href=\"https://github.com/Mikubill/sd-webui-controlnet#guess-mode-non-prompt-mode-experimental\">Guess Mode</a>。<br>也可用以对比不同的预处理产生的效果，在没有提示语的指导下，差异会更明显。</p>\n<p>在这个模式下建议可以将步数适当增大，比如加到50。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"在docker里使用cron","url":"/blog/2022/03/02/cron-in-docker/","content":"<p><a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a>是*nix操作系统上的一个计划任务管理工具。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><a href=\"https://linux.die.net/man/8/cron\">cron命令</a>是一个服务程序，在后台运行任务。可以使用<code>-f</code>使它保持在前台。</p>\n<p><a href=\"https://linux.die.net/man/1/crontab\">crontab命令</a>用来管理任务。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>直接从创建一个最简单的Dockerfile开始。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cron</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get -y install cron</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># touch log file for tail</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> /root/cron.out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the cron job</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> crontab -l | &#123; <span class=\"built_in\">cat</span>; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;* * * * * echo hello from cron job &gt;&gt; /root/cron.out&quot;</span>; &#125; | crontab -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># go</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> cron &amp;&amp; <span class=\"built_in\">tail</span> -f /root/cron.out</span></span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; docker build -t first .</span><br><span class=\"line\">&gt; docker run -it --<span class=\"built_in\">rm</span> first</span><br><span class=\"line\">hello from cron job</span><br><span class=\"line\">hello from cron job</span><br><span class=\"line\">hello from cron job</span><br><span class=\"line\">hello from cron job</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用sh\"><a href=\"#使用sh\" class=\"headerlink\" title=\"使用sh\"></a>使用sh</h2><p>接下来我们试试使用<code>cron</code>运行<code>sh</code>。</p>\n<p>新建一个<code>out_time.sh</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">now=$(<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%T&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Current time : <span class=\"variable\">$now</span>&quot;</span> &gt;&gt; /root/cron.out</span><br></pre></td></tr></table></figure>\n\n<p>搭配dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cron</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get -y install cron</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># copy sh</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> out_time.sh /root/out_time.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># touch log file for tail</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> /root/cron.out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the cron job</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> crontab -l | &#123; <span class=\"built_in\">cat</span>; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;* * * * * bash /root/out_time.sh&quot;</span>; &#125; | crontab -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># go</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> cron &amp;&amp; <span class=\"built_in\">tail</span> -f /root/cron.out</span></span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; docker build -t use_sh .</span><br><span class=\"line\">&gt; docker run -it --<span class=\"built_in\">rm</span> use_sh</span><br><span class=\"line\">Current time : 06:09:01</span><br><span class=\"line\">Current time : 06:10:01</span><br><span class=\"line\">Current time : 06:11:01</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cron-file\"><a href=\"#使用cron-file\" class=\"headerlink\" title=\"使用cron file\"></a>使用cron file</h2><p>这次我们将cron job写在文件里。</p>\n<p>新建<code>cronfile</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * * * * bash /root/out_time.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果使用cron file，这里有两点需要注意：</p>\n<ol>\n<li>最后一行一定要有个空行</li>\n<li>文件的回车格式为<code>LF</code>，不能是<code>CRLF</code></li>\n</ol>\n<p>搭配dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cron</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get -y install cron</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># copy sh and cron file</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> out_time.sh /root/out_time.sh</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> cronfile /root/cronfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># touch log file for tail</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> /root/cron.out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the cron job</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> crontab /root/cronfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># go</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> cron &amp;&amp; <span class=\"built_in\">tail</span> -f /root/cron.out</span></span><br></pre></td></tr></table></figure>\n\n<p>效果与把命令直接在Dockerfile里一致。</p>\n<h2 id=\"最后完整的来个starter\"><a href=\"#最后完整的来个starter\" class=\"headerlink\" title=\"最后完整的来个starter\"></a>最后完整的来个starter</h2><p>test.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> DataFrame</span><br><span class=\"line\"></span><br><span class=\"line\">now = datetime.datetime.now()</span><br><span class=\"line\">df = DataFrame(&#123;<span class=\"string\">&#x27;a&#x27;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"string\">&#x27;b&#x27;</span>: [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]&#125;, index=[now, now + datetime.timedelta(days=<span class=\"number\">1</span>), now + datetime.timedelta(days=<span class=\"number\">2</span>)])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br></pre></td></tr></table></figure>\n\n<p>requirements.txt</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">pandas</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use mirror for apt</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/http:\\/\\/archive.ubuntu.com\\/ubuntu\\//http:\\/\\/mirrors.cloud.tencent.com\\/ubuntu\\//g&#x27;</span> /etc/apt/sources.list</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/http:\\/\\/security.ubuntu.com\\/ubuntu\\//http:\\/\\/mirrors.cloud.tencent.com\\/ubuntu\\//g&#x27;</span> /etc/apt/sources.list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cron and python3</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get -y install cron python3 python3-pip</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">link</span> /usr/bin/python3 /usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set workdir</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pip install</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt requirements.txt</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install -i https://repo.huaweicloud.com/repository/pypi/simple -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># copy python files</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># touch log file for tail</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> cron.out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the cron job</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> crontab -l | &#123; <span class=\"built_in\">cat</span>; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;* * * * * python /app/test.py &gt;&gt; /app/cron.out&quot;</span>; &#125; | crontab -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># go</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> cron &amp;&amp; <span class=\"built_in\">tail</span> -f cron.out</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"客制化键盘","url":"/blog/2022/12/28/customize-keyboard/","content":"<h2 id=\"发展历史\"><a href=\"#发展历史\" class=\"headerlink\" title=\"发展历史\"></a>发展历史</h2><h3 id=\"客制化键盘\"><a href=\"#客制化键盘\" class=\"headerlink\" title=\"客制化键盘\"></a>客制化键盘</h3><p><code>客制化键盘</code>来自于英文<code>Customized Keyboard</code>的台版翻译。</p>\n<p>最开始是满足一小搓发烧友的定制需求，采用预购制，比如<a href=\"https://www.zfrontier.com/app/circle/1\">装备前线</a>上的发车团，或者在非公开预告的私有社区（如QQ群）发车的<a href=\"https://www.matrixlab.store/\">Matrix Lab</a>和<a href=\"https://www.qwertykeys.com/\">OwLab</a>等。</p>\n<p>即使到了2023年，也有部分产品是以小团长的形式进行预定采买，比如<a href=\"https://www.zfrontier.com/app/search/%E6%B1%9F%E6%B9%BE?type=flow\">江湾</a>、发狗、老肖。</p>\n<h3 id=\"量产客制化键盘\"><a href=\"#量产客制化键盘\" class=\"headerlink\" title=\"量产客制化键盘\"></a>量产客制化键盘</h3><p>当作为一种亚文化的客制化圈子逐渐成熟后，自然就引来各大键盘厂商（有一点类似于电子烟、精酿啤酒），<code>量产客制化键盘</code>的概念应运而生。</p>\n<p><code>量产客制化键盘</code>的主要特点有两个：量大管饱和开箱即用。非常适合新手。我前几天买的<a href=\"https://item.jd.com/100040722067.html\">京造JZ990</a>就属于这类。</p>\n<h2 id=\"机械键盘\"><a href=\"#机械键盘\" class=\"headerlink\" title=\"机械键盘\"></a>机械键盘</h2><p>从大的种类上说，我们通常将键盘分成下面三类：</p>\n<ul>\n<li>薄膜键盘</li>\n<li>机械键盘</li>\n<li>其它<ul>\n<li>静电容键盘</li>\n<li>霍尔效应键盘</li>\n<li>光学键盘</li>\n</ul>\n</li>\n</ul>\n<p>99.99%的情况下，我们说的客制化键盘是指的机械键盘。</p>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p>一把客制化键盘可以粗略的分为三大件：套件、轴体、键帽。</p>\n<h3 id=\"套件\"><a href=\"#套件\" class=\"headerlink\" title=\"套件\"></a>套件</h3><p>所谓套件，可以理解为一把键盘去掉键帽和轴体后剩下的部分。找了一张<a href=\"https://www.zfrontier.com/app/flow/NJyg9KMoLdNX\">装备前线上的爆炸图</a>作为参考：</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/exploded-views.png\" class=\"\" title=\"套件爆炸图\">\n\n<h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>可以直接去看装备前线上<code>Mellperbia</code>发的<a href=\"https://www.zfrontier.com/app/flow/2PzpM13qROv1\">聊聊机械键盘的结构</a>原贴。这里大致摘抄下。</p>\n<p>套件的结构分Case mount和Tray mount两大类，顾名思议Case mount就是把内胆固定在外壳上，而Tray mount就像把菜放在托盘上，固定在底壳的底板上。</p>\n<p>而内胆设计又分为Plate和Plateless两种：Plate就是有定位板的设计，Plateless就是常说的“无钢”。</p>\n<p>这部分内容较长，折叠了，可跳转<a href=\"#%E5%87%A0%E7%A7%8D%E5%A5%97%E4%BB%B6%E7%BB%93%E6%9E%84\">附录</a>查看。</p>\n<h4 id=\"配列\"><a href=\"#配列\" class=\"headerlink\" title=\"配列\"></a>配列</h4><p>主流配列大致可分为</p>\n<ul>\n<li>104&#x2F;108：传统全键盘</li>\n<li>98：合并翻页区和小键盘数字区</li>\n<li>84&#x2F;87：去掉小键盘数字区</li>\n<li>75：去掉小键盘数字区，阉割翻页区</li>\n<li>60&#x2F;68：去掉小键盘数字区、F区，阉割翻页区</li>\n<li>Alice：人体工学左右手分区</li>\n</ul>\n<p>可在<a href=\"http://www.keyboard-layout-editor.com/\">键盘配列编辑器</a>网站查看常见的配列，比如Preset中的ANSI 104、Keycool 84、Default 60%。</p>\n<p>全键盘也可参考装备前线上的<a href=\"https://www.zfrontier.com/lab/keyboardTester\">在线键盘测试</a>。</p>\n<h4 id=\"连接方式\"><a href=\"#连接方式\" class=\"headerlink\" title=\"连接方式\"></a>连接方式</h4><p>键盘的连接方式分为有线和无线两种，其中，无线又分蓝牙和2.4G。<br>常见组合有三种，分别是</p>\n<ul>\n<li>单模：有线</li>\n<li>双模：蓝牙和2.4G</li>\n<li>三模: 有线、蓝牙和2.4G<br>其中蓝牙最不稳定，但跨设备最方便；要求低延迟和高稳定性则只能选有线；2.4G能满足绝大部分人。</li>\n</ul>\n<h5 id=\"优联\"><a href=\"#优联\" class=\"headerlink\" title=\"优联\"></a>优联</h5><p>关于连接方式有一个特别的家伙：<a href=\"https://www.logitech.com.cn/zh-cn/resource-center/what-is-unifying.html\">优联</a>。<br>优联是罗技独门的2.4G连接技术，延迟低、续航强、唤醒快。</p>\n<p>但之所以叫独门，就是除了罗技，别家都没有。想用它只有一个办法：魔改。</p>\n<p>通常使用最便宜的罗技k375s方案（还有k780, k850, g613等），主控成本100左右。再加上人工成本和商家利润，至少要比非优联贵150左右。并且因为魔改商家都是小店（比如<a href=\"https://cmmk.oome.net/contact/\">偶米</a>），很难保修。</p>\n<p>所以除非是对延迟有较高要求，并且无法使用有线，否则不建议使用魔改优联。</p>\n<h4 id=\"轴底座\"><a href=\"#轴底座\" class=\"headerlink\" title=\"轴底座\"></a>轴底座</h4><p>轴底座最重要的参数是，是否支持5脚轴。支持5脚轴的可以兼容3脚轴。</p>\n<p>之所以有5脚轴，是因为无钢结构的存在，没有定位板就需要增加轴体连接的稳定性。</p>\n<h4 id=\"大键\"><a href=\"#大键\" class=\"headerlink\" title=\"大键\"></a>大键</h4><p>大键为了固定，会在轴体两边加上两个卫星轴。</p>\n<p>通常套件会出厂内置一套卫星轴，如果很在意大键手感的话到手后可以再调一次。</p>\n<h4 id=\"购买建议\"><a href=\"#购买建议\" class=\"headerlink\" title=\"购买建议\"></a>购买建议</h4><p>68配列推荐狼派的<a href=\"https://item.jd.com/10056591636346.html\">CIY68试轴器</a>，日常价99，活动价79。买不了吃亏买不了上当。</p>\n<p>98配列推荐贱驴的<a href=\"https://item.jd.com/10062594678129.html\">RS2套件</a>，日常价299。京造的JZ990就是贱驴RS2贴牌。</p>\n<p>108配列推荐高斯的<a href=\"https://item.jd.com/10047932504869.html\">HS108T成品</a>，日常价429。108配列的选择确实不多。</p>\n<h3 id=\"轴体\"><a href=\"#轴体\" class=\"headerlink\" title=\"轴体\"></a>轴体</h3><p>在2020年之前，说到轴几乎没得选，Cherry原厂yyds。但近两年国产轴已经开卷，以<a href=\"http://www.ttc9.com/pro2.html\">TTC</a>、<a href=\"http://www.kailh.com/product/Ms/\">凯华</a>、<a href=\"https://www.gateron.cn/product/46/\">佳达隆</a>御三家为代表的国产轴全面取代樱桃轴。还有<a href=\"http://www.cngaote.com/q_about/q_about128.html\">欧特姆（高特）</a>、<a href=\"http://www.huannnuo.com/\">环诺</a>、<a href=\"http://www.cncontent.cn/\">KTT</a>这些二线厂商。</p>\n<h4 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>目前国产轴大部分都是基于樱桃的MX结构，凯华的BOX是自研的。</p>\n<p>MX结构由上盖、轴心、金属触点、弹簧、底壳这5个部分组成。凯华BOX多了防尘仓和扭簧。</p>\n<ul>\n<li>上盖和底壳</li>\n</ul>\n<p>底壳和上盖合在一起，就是轴体的外壳。凯华是大卡壳，樱桃、佳达隆和TTC是四脚卡扣。四脚的更方便拆卸。</p>\n<p>底壳和上盖对灯光会有影响，有遮住光的，也有空出来一块透光的，甚至还有加聚光镜加强灯效的。</p>\n<p>底部分为3脚和5脚轴，5脚轴需要PCB上的轴底座支持。</p>\n<ul>\n<li>轴心</li>\n</ul>\n<p>最基础的轴心就是十字形状。好一点的是两边有围墙的防尘轴心，围墙既可以防尘还可以增强与键帽连接的稳定性。</p>\n<p>更好一点的会将围墙设计成四边都有的圆形甚至心形，防尘和稳固性能就会更强些，当然价格也更贵。</p>\n<p>同个厂里的轴，有很多是同样的模具。性能差不多，但价格可能会差异很大，可以依靠这点来寻找平替。比如天空轴V3要2块多，但同模具的草莓果冻V2就只要1块5。</p>\n<ul>\n<li>金属触点</li>\n</ul>\n<p>樱桃发明了黄金十字触点技术来提升金属触点的寿命。国产的在这方面不如樱桃。</p>\n<p>但客制化键盘玩家经常换轴，所以寿命比樱桃短倒不是什么特别大的问题了。除了高特和一些小厂的部分轴寿命只能按月算。</p>\n<ul>\n<li>弹簧</li>\n</ul>\n<p>按压克数就是由弹簧决定。比如45克的红轴和60克的黑轴的区别就基本在弹簧上。</p>\n<p>注意克数分为触底克数和触发克数一般克数都是指的触发压力，但也有厂商宣传时写的是触底压力，要注意辨别。</p>\n<p>弹簧有单段、加长、双段，甚至三段。单段弹簧最常见。加长和多段弹簧的回弹更有力，更跟手，同时还可以降低误触率。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>轴体对手感的影响可以说是决定性的，至少占了八成以上。一个轴比较重要的参数有：</p>\n<ul>\n<li>导通行程：也叫触发行程、动作行程。发送按键指令的位移行程，越短触发越快</li>\n<li>总行程：触底行程，手指按压轴体轴心到底的行程。越短越顶手</li>\n<li>触发压力：发送按键指令的压力克数，越小越软</li>\n<li>触底压力：按到底所需的压力克数</li>\n<li>感触力：段落轴按下的转换点克数</li>\n<li>寿命：按键次数</li>\n</ul>\n<img src=\"/blog/2022/12/28/customize-keyboard/keyswitch-parameter.jpg\" class=\"\" title=\"轴体参数示意图\">\n<img src=\"/blog/2022/12/28/customize-keyboard/keyswitch-parameter2.jpg\" class=\"\" title=\"轴体参数示意图2\">\n\n<p>轴体的一致性和顺滑度测试可以参见<a href=\"https://space.bilibili.com/417064185/article\">观纬测评</a>的<a href=\"https://www.bilibili.com/read/cv20762928\">轴体天梯图</a>。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/switch-ladder.webp\" class=\"\" title=\"轴体天梯图\">\n\n<p>判断轴的好坏</p>\n<ul>\n<li>没有弹簧音<br>樱桃和高特的弹簧音巨大</li>\n<li>杂音<br>一颗好轴应该只有触底和回弹碰到上盖时的两种声音</li>\n<li>顺滑度<br>大多数人都喜欢切黄油的顺滑感，喜欢沙沙感的人还是比较少</li>\n<li>轴心稳定性</li>\n<li>触底手感<br>比如静音轴的垫片会导致触底手感肉，大多数人还是喜欢清脆</li>\n<li>声音<br>声音比较玄学，推荐试轴，个人喜欢就好。</li>\n</ul>\n<h4 id=\"手感\"><a href=\"#手感\" class=\"headerlink\" title=\"手感\"></a>手感</h4><p>根据手感大概可以将轴体分为2大类6小类：</p>\n<ul>\n<li>线性轴<ul>\n<li>常规线性轴（弹簧式）</li>\n<li>提前线性轴（提前触底）</li>\n<li>静音轴（静音）</li>\n</ul>\n</li>\n<li>段落轴<ul>\n<li>有声段落轴（圆珠笔式）</li>\n<li>无声段落轴（自动铅笔式）</li>\n<li>大段落轴（马桶按钮式）</li>\n</ul>\n</li>\n</ul>\n<img src=\"/blog/2022/12/28/customize-keyboard/manufacturers.png\" class=\"\" title=\"国产轴\">\n\n<h5 id=\"常规线性轴\"><a href=\"#常规线性轴\" class=\"headerlink\" title=\"常规线性轴\"></a>常规线性轴</h5><p>常规线性轴算是体现厂家基本功的代表。</p>\n<p><a href=\"https://www.cherrymx.de/en/cherry-mx/mx-original/mx-red.html\">樱桃红轴</a>的官方定语是smooth and direct。</p>\n<p><a href=\"http://www.ttc9.com/product/187.html\">TTC金粉轴</a>约2.8元，TTC招牌，触发轻盈，打字不累手。</p>\n<p><a href=\"https://www.gateron.cn/product/285.html\">佳达隆G白Pro双弹簧</a>TTC金粉轴平替，约1.5元，性价比高。</p>\n<p><a href=\"http://www.kailh.com/product/Ms/Kh/205.html\">凯华BOX红</a></p>\n<h4 id=\"提前线性轴\"><a href=\"#提前线性轴\" class=\"headerlink\" title=\"提前线性轴\"></a>提前线性轴</h4><p>提前线性轴的轴心有加长，相比其它轴4mm的总行程缩减到了3.4-3.6，触发行程从1.8-2缩减到了1.2-1.4。按键触发会更早，更适合打游戏。</p>\n<p><a href=\"https://www.cherrymx.de/en/cherry-mx/mx-original/mx-speed-silver.html\">樱桃快银轴</a>的官方定语是fast and direct。</p>\n<p><a href=\"http://www.ttc9.com/product/141.html\">TTC快银轴</a>键程短回弹性，适合快速点击，约3.6元，可放置在WASD和JKL打游戏用。</p>\n<p><a href=\"https://www.gateron.cn/product/285.html\">佳达隆G银Pro双弹簧</a>性能只比快银弱一点点，约1.5元，性价比高。</p>\n<p><a href=\"https://item.jd.com/10058301946545.html\">高特银轴</a>约0.55元，可用在边缘键。</p>\n<h5 id=\"静音轴\"><a href=\"#静音轴\" class=\"headerlink\" title=\"静音轴\"></a>静音轴</h5><p>静音轴在导轨和轴心或底壳加了硅胶垫来消音，虽然安静，但手感肉。除非是为了夜声人静时不打扰同住人，否则不建议考虑。</p>\n<p><a href=\"https://www.cherrymx.de/en/cherry-mx/mx-original/mx-silent-red.html\">樱桃静音红轴</a>的官方定语是smooth and silent。</p>\n<p><a href=\"http://www.ttc9.com/product/144.html\">TTC静音红V3</a>约3.5元，回弹很快很跟手，静音效果也不错。</p>\n<p><a href=\"http://www.kailh.com/product/Ms/Kh/200.html\">凯华深海静音轴</a></p>\n<p><a href=\"https://item.jd.com/10058315055177.html\">高特水蜜桃</a>静音效果可以但手感像棉花。</p>\n<p><a href=\"https://item.jd.com/10058315055174.html\">高特青柠</a>有一些段落感，但静音效果不如水蜜桃。</p>\n<h5 id=\"有声段落轴\"><a href=\"#有声段落轴\" class=\"headerlink\" title=\"有声段落轴\"></a>有声段落轴</h5><p>有声段落轴又叫Clicky Switches，就是早期咔哒咔哒的键盘，它有独立的发声单元，作为机械键盘的门面存在。</p>\n<p><a href=\"https://www.cherrymx.de/en/cherry-mx/mx-original/mx-blue.html\">樱桃青轴</a>的官方定语是clicky and noticeable。</p>\n<p><a href=\"http://www.ttc9.com/product/137.html\">TTC兄弟轴</a>，价格约2.8元，声音清脆且纯净，触发力度小。</p>\n<p>凯华极地狐轴</p>\n<p><a href=\"http://www.kailh.com/product/Ms/Kh/203.html\">凯华BOX白</a>声音没那么清脆，但价格便宜很多，只要约1.5元。</p>\n<p><a href=\"http://www.kailh.com/product/Ms/Kh/581.html\">凯华BOX翡翠</a>和BOX白差不多，但需要的力度要更大。</p>\n<p><a href=\"https://item.jd.com/10058309106939.html\">高特金轴</a>约0.55元，手感还行，但轴心容易晃动。</p>\n<h5 id=\"无声段落轴\"><a href=\"#无声段落轴\" class=\"headerlink\" title=\"无声段落轴\"></a>无声段落轴</h5><p>无声段落轴的“无声”是相对咔哒咔哒的有声，并不是真正的无声。它没有独立的发声单元，保留了段落感，但减少了吵闹。</p>\n<p>手感上像是段落轴后面接了一段线性轴。</p>\n<p><a href=\"https://www.cherrymx.de/en/cherry-mx/mx-original/mx-brown.html\">樱桃茶轴</a>的官方定语是focused and noticeable。</p>\n<p><a href=\"http://www.ttc9.com/product/152.html\">TTC金茶轴V3</a>约2.4元，段落感偏线性，很顺滑。</p>\n<p><a href=\"https://www.gateron.cn/product/285.html\">佳达隆茶轴</a></p>\n<p><a href=\"http://www.ttc9.com/product/122.html\">TTC月白轴</a>约2.8元，段落感明显清晰，但触底很肉，有点像薄膜。</p>\n<p><a href=\"https://item.jd.com/10058315055180.html\">高特熊猫轴</a>平替，约1.5元。</p>\n<p><a href=\"https://item.jd.com/10058306008293.html\">高特橙轴</a>约0.55元，可用在边缘键。</p>\n<h5 id=\"大段落轴\"><a href=\"#大段落轴\" class=\"headerlink\" title=\"大段落轴\"></a>大段落轴</h5><p>大段落轴也叫提前段落轴。就……类似薄膜键盘的手感。</p>\n<p>大段落轴有加长轴心提前触底的，也被叫做类HP轴体。就有点像缝合怪，将不同的轴体组成新的轴。<br>比如圣熊猫（Holy Panda）轴，是由Invyr Panda轴的外壳加上凯华的Halo轴心组成的。<br>还有像水晶酒红、zyko也是缝合轴。</p>\n<h4 id=\"键盘分区\"><a href=\"#键盘分区\" class=\"headerlink\" title=\"键盘分区\"></a>键盘分区</h4><p>打游戏最常用的WASD和JKL，可以考虑用快银。</p>\n<p>常用的26个英文字母，可以选择手感好可是比较贵的轴，比如兄弟或金粉。</p>\n<p>方向键和小键盘区可以选择确认感强的段落轴，比如BOX翡翠。</p>\n<p>F区的功能键。按的很少，可以用便宜的轴。</p>\n<h3 id=\"键帽\"><a href=\"#键帽\" class=\"headerlink\" title=\"键帽\"></a>键帽</h3><h4 id=\"材质\"><a href=\"#材质\" class=\"headerlink\" title=\"材质\"></a>材质</h4><p>键帽一般分为两种材质：ABS和PBT。</p>\n<p>ABS表面比较顺滑，手感细腻，但容易打油。</p>\n<p>PBT表面比较粗糙，有磨砂质感，也不易粘手汗。</p>\n<p>出于耐久度考虑，初次购买建议PBT。</p>\n<h4 id=\"字符工艺\"><a href=\"#字符工艺\" class=\"headerlink\" title=\"字符工艺\"></a>字符工艺</h4><p>PBT因为耐磨，染色多采用热升华工艺，用高温把颜料渗透进键帽。但不透光。</p>\n<p>双色注塑工艺是把两种不同颜色的材料压制在一起，利用色差显示出字符，而字符部分可以使用透光材料。闭口比裂口要贵。</p>\n<p>还有一种是激光刻蚀，又称镭雕，效果一般也不耐磨，除非是侧刻否则不要选。</p>\n<h4 id=\"高度\"><a href=\"#高度\" class=\"headerlink\" title=\"高度\"></a>高度</h4><p>按高度从高到低排名：</p>\n<p>SA高球帽 &gt; OEM高度 &gt; MDA高度 &gt; 原厂高度 &gt; XDA高度 &gt; DSA高度</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/keycap.jpg\" class=\"\" title=\"键帽高度\">\n\n<ul>\n<li><p>SA高球帽<br>特别高挑，有比较明显的弧度和曲线，看上去比较有气质，但一般需要搭配手托使用。</p>\n</li>\n<li><p>OEM高度<br>是早期为了兼容键盘的RGB灯珠而将原厂高度进行了加高。普遍比原厂高2mm左右。国内键帽大多是OEM高度。</p>\n</li>\n<li><p>Cherry（原厂）高度<br>指的是机械键盘老大哥樱桃键盘的键帽高度。高度适中，遵循前凸中凹后翘的设计。中间最矮处7mm，比较适合打字。</p>\n</li>\n<li><p>MDA高度<br>在XDA的基本上增加了高度，做了前中后排按键的高度区分。手指接触面积较大，高度适中。</p>\n</li>\n<li><p>XDA<br>比较矮，而且前中后键帽高度一致。正脸比较大，看起来圆润可爱，适合女生。但不适合打字。</p>\n</li>\n</ul>\n<p>泛用性最强的是原厂，然后是OEM，再是MDA。SA必须配手托，XDA好看不好用。MDA没试过。</p>\n<h4 id=\"购买渠道\"><a href=\"#购买渠道\" class=\"headerlink\" title=\"购买渠道\"></a>购买渠道</h4><p>购买渠道基本可以分成三类，原厂店铺、分销商和闲鱼。</p>\n<p>在原厂店铺买不会出错，注意很多时候拼多多店比淘宝京东便宜。</p>\n<p>大多数的键帽没有盗版，在分销商那买完全可以，挑最便宜的（拼多多）。</p>\n<p>闲鱼的拆机键帽性价比极高。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1kg411Y7G2/\">龙翔可乐推荐的几款键帽</a>：</p>\n<ul>\n<li>69元高新达代工的csa高度键帽<br>推荐粉白和黑白</li>\n<li>69元<a href=\"https://helloganss.tmall.com/shop/view_shop.htm\">高斯</a>的oem高度键帽</li>\n<li>75元蛤蟆光代工的xda键帽<br>蛤蟆光的发家店铺叫<a href=\"https://shop120102708.taobao.com/\">奸商外设</a>，小号店铺叫<a href=\"https://shop374870915.taobao.com/\">猩猩外设</a>，小号用来开车。最有名的是75块的类xda蜂蜜牛奶。但一代mda空格键容易卡轴。</li>\n<li>99元光头哥代工的二色oem<br><a href=\"https://shop104264544.taobao.com/\">海龙数码电竞馆</a>和<a href=\"https://shop33264831.taobao.com/\">海派数码电竞馆</a><br>光头哥喜欢批发，其实搜他家产品比如<code>rudy二色</code>，搜到的都是光头家出的</li>\n<li>99元<a href=\"https://shop66785128.taobao.com/\">椰子外设</a><br>推荐原厂高度的豆奶，mda高度的豆奶就是蛤蟆光二代的模具。<br>139元的GMK桃子是浅笑代工，可以配粉透。</li>\n<li><a href=\"https://shop525516221.taobao.com/\">315会长外设</a>的mda极简白</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://space.bilibili.com/405484897/channel/series\">龙翔可乐合集</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1BZ4y1d72S\">全B站最详细的轴体选购指南，2022年别只说红黑茶青了！</a></li>\n</ul>\n<h3 id=\"几种套件结构\"><a href=\"#几种套件结构\" class=\"headerlink\" title=\"几种套件结构\"></a>几种套件结构</h3><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        几种套件结构\n    </div>\n    <div class='spoiler-content'>\n        <h5 id=\"Tray-mount，托盘式结构\"><a href=\"#Tray-mount，托盘式结构\" class=\"headerlink\" title=\"Tray mount，托盘式结构\"></a>Tray mount，托盘式结构</h5><img src=\"/blog/2022/12/28/customize-keyboard/tray-mount.webp\" class=\"\" title=\"托盘式结构\">\n\n<p>DC60是一个很好的例子。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/tray-mount-demo.webp\" class=\"\" title=\"DC60\">\n\n<p>优点</p>\n<ul>\n<li>成本低</li>\n<li>兼容性非常好（基本都是标准规格，包括出线口）<br>缺点</li>\n<li>相对比较不稳定，因为刚性&#x2F;实心结构比较少</li>\n<li>与Case mount套件相比，整体上的刚性&#x2F;实心结构更少且不均匀，所以手感一致性差</li>\n<li>由于螺钉孔需要有一定的高度，所以空腔声会比较大</li>\n</ul>\n<h5 id=\"Case-mount\"><a href=\"#Case-mount\" class=\"headerlink\" title=\"Case mount\"></a>Case mount</h5><p>相比托盘式结构，将内胆直接固定在外壳上要坚固得多，由韩国的老客制化套件奠定。</p>\n<p>优点</p>\n<ul>\n<li>内胆与外壳固定非常扎实，手感一致性很好</li>\n<li>不需要在定位板和PCB中间开螺丝孔，更好布线<br>缺点</li>\n<li>外壳必须跟据情况定制（几乎没有特定的标准）</li>\n<li>定位板材质对打字体验有很大影响</li>\n</ul>\n<p>Top frame mount，又称Top mount也就是把定位板固定在上盖。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/top-mount.webp\" class=\"\" title=\"上固定\">\n\n<p>这种定位板有带有螺孔的安装卡舌，这些螺孔可拧到上盖上，然后依次拧到底盒上以完成组装键盘。这种结构由于手感优异且相对方便加工，所以被中高端客制化键盘广泛使用。</p>\n<p>下图是Fuji65的初版爆炸图。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/top-mount-demo.webp\" class=\"\" title=\"Fuji65爆炸图\">\n\n<p>Bottom frame mount，与Top mount相反，内胆会被固定在底壳边缘。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/bottom-mount.webp\" class=\"\" title=\"下固定\">\n\n<p>这种结构有一点点像Tray mount，但它并非固定在底壳，从而得到更多并且更均匀的刚性结构支撑。同时，这种结构不需要上盖的参与，从而可以设计成悬浮式的外观。比如KMAC系列。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/bottom-mount-demo.webp\" class=\"\" title=\"KMAC\">\n\n<p>Sandwich mount，将定位板牢牢固定在上盖和底壳之间。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/sandwich-mount.webp\" class=\"\" title=\"三明治固定\">\n\n<p>这种固定方式比听起来要复杂得多，因为定位板与壳体边缘要做到严丝合缝，以确保定位板能在完美居中的同时仍然有一点弯曲空间进行缓冲。三明治结构可以更好的抑制底部振动，而使触底声更奇特和悦耳。TYL客制化出品的KN2.10就使用了这种设计。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/sandwich-mount-demo.webp\" class=\"\" title=\"KN2.10\">\n\n<p>Integrated mount，上盖与定位板的一体设计。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/integrated-mount.webp\" class=\"\" title=\"一体式固定\">\n\n<p>一体式固定和上固定差不太多，但成本更高。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/integrated-mount-demo.webp\" class=\"\" title=\"一体式固定例子\">\n\n<p>Gasket mount，垫片结构，螺丝只串起外壳，定位板依靠两块外壳的压力夹在中间。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/gasket-mount.webp\" class=\"\" title=\"垫片结构\">\n\n<p>垫片结构在三明治结构的基础上，不使用螺丝固定，而是在四周使用垫片，从而获得了更好的均匀度。可以说是当前的最佳结构了。</p>\n<img src=\"/blog/2022/12/28/customize-keyboard/gasket-mount-demo.webp\" class=\"\" title=\"垫片结构爆炸图\">\n\n<h5 id=\"Plateless-mount，无钢板设计\"><a href=\"#Plateless-mount，无钢板设计\" class=\"headerlink\" title=\"Plateless mount，无钢板设计\"></a>Plateless mount，无钢板设计</h5><img src=\"/blog/2022/12/28/customize-keyboard/plateless-mount.webp\" class=\"\" title=\"无钢板设计\">\n\n<p>无钢板是一种设计，它可以是top mount，也可以是gasket mount，甚至可以是tray mount。它与其它的唯一区别就是它没有定位板。按压轴体的时候就是敲击PCB的手感，非常独特，也富有弹性。</p>\n<p>这种设计对PCB开孔精度很高，而且一般不支持热插拔，PCB的寿命也会更短。</p>\n\n    </div>\n</div>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"【翻译】数据可视化中的颜色选择","url":"/blog/2021/01/05/data-viz-color/","content":"<p>本文翻译并改写自Michael Yi的<a href=\"https://medium.com/nightingale/how-to-choose-the-colors-for-your-data-visualizations-50b2557fa335\">博文</a>。</p>\n<p>配色是图表的重要元素之一，一个好的配色可以给数据的故事添色不少，而差的配色会隐藏或转移重点。</p>\n<p>在这篇文章中，我将描述在数据可视化中使用的常见色板，提供配色的几个小窍门和最佳实例，最后会推荐几个用来生成和测试图表配色的工具。</p>\n<h2 id=\"调色板的类型\"><a href=\"#调色板的类型\" class=\"headerlink\" title=\"调色板的类型\"></a>调色板的类型</h2><p>数据可视化中的色板主要分成以下三类：</p>\n<ul>\n<li>分类色板(Qualitative palettes)</li>\n<li>顺序色板(Sequential palettes)</li>\n<li>发散色板(Diverging palettes)</li>\n</ul>\n<p>使用哪种类型取决于数据的特性。</p>\n<h3 id=\"分类色板\"><a href=\"#分类色板\" class=\"headerlink\" title=\"分类色板\"></a>分类色板</h3><img src=\"/blog/2021/01/05/data-viz-color/qualitative-palettes-line-chart.png\" class=\"\" title=\"分类折线图示例\">\n\n<p>当变量具有天然的分类属性时，可适用分类色板。分类属性有明显区别并且没有固定顺序。比如国家、种族、排名、性别。每一种分类都对应色板中的一个颜色。</p>\n\n\n<p>分类色板的每一种颜色对应一个分类，且区分鲜明。<strong>根据经验，应尝试将分类色板的颜色数量限制到10个或以下。</strong>如果颜色太多，就很难将其区分。如果确实分类太多，超出了色板的颜色数量，可以将分类合计，比如将最少的几个分类合计为“其他”。多次列出所有颜色不是一个好主意，会引起视觉混乱。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/bundle-smallest.png\" class=\"\" title=\"压缩分类\">\n\n<p>我们区分不同色彩主要是依据其色调。当然也可以通过调整亮度和饱和度来获得其它变化，但最好不要调整过多。过大的高亮和饱和度的差异可能会让读者误解某些颜色更重要，除非你确实是想这样表达。请避免使用相同色调仅亮度和饱和度不同的两种颜色，除非数据与颜色有关。比如下面这个折线图，每天的订阅数表示为浅色线条，7日均线就可以使用暗色。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/two-colors-line-chart.png\" class=\"\" title=\"性质相近的数据可以使用色调相近亮度不同的颜色\">\n\n<h3 id=\"顺序色板\"><a href=\"#顺序色板\" class=\"headerlink\" title=\"顺序色板\"></a>顺序色板</h3><p>当变量是数字或有固定顺序时，可以使用顺序色板来表示。通常以色调、亮度来渐变。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/sequential-pattles.png\" class=\"\" title=\"顺序色板\">\n\n<p>或者色调和亮度一起。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/multiple-sequential.png\" class=\"\" title=\"叠加色板\">\n\n<p>顺序色板的颜色最突出的方面是亮度。一般来说，颜色越浅代表值越小，颜色越深代表值越大。不过在深色背景下，通常会返过来，值越大则越亮。原则就是值越大越醒目，对比度越高。</p>\n<p>顺序色板的次要维度是色调。大多数情况下可只使用同一个色调，用亮度来代表值的大小。但使用两种不同的颜色来辅助识别也不失为一种好办法。通常亮度高的一端使用暖色（趋向红色或黄色），较暗的一端使用冷色（超向绿色，蓝色或紫色）。</p>\n<h3 id=\"发散色板\"><a href=\"#发散色板\" class=\"headerlink\" title=\"发散色板\"></a>发散色板</h3><img src=\"/blog/2021/01/05/data-viz-color/diverging-palette.png\" class=\"\" title=\"发散色板\">\n\n<p>如果我们的变量有一个中间值，类似数字中的0，那我们可以使用发散色板。发散色板本质上是两个顺序色板的首尾相接，接点即中间值。大于中间的值的变量分配中心一侧的颜色，小值分配相对侧的颜色。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/diverging-palette-bar.png\" class=\"\" title=\"diverging-palette-bar\">\n\n<p>通常，每个顺序色板都使用独特的色调，这样更容易区分相对于中心的正值和负值。与顺序色板一样，通常为中心值分配浅色，颜色越深表示距中心的距离越大。</p>\n<h3 id=\"离散-vs-连续\"><a href=\"#离散-vs-连续\" class=\"headerlink\" title=\"离散 vs. 连续\"></a>离散 vs. 连续</h3><p>顺序色板和发散色板可以通过两种不同的方式与数据值相关联：作为一组离散的颜色，或者作为数据值和颜色之间的连续函数。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/diverging-palette-2.png\" class=\"\" title=\"diverging-palette-2\">\n\n<p>用于创建色板的工具通常遵循第一类，而用于创建可视化的工具通常具有建立连续关联的能力。 虽然在值和颜色之间具有连续似乎总是更好，但离散色板仍然有其优点。</p>\n<p>相比位置或长度，我们辨别颜色差异更费力，所以将颜色与精确值关联已经处于劣势。颜色的离散化可以减轻认知负担，增加数据的梯度。另外，我们还可以通过调整色板的取值范围来更好的展现数据。比如当数据包含异常值时，连续色板会迫使大多数数据挤在一个小的颜色区间。而在使用离散色板时，我们可以创建大小不等的范围，以更好的表示数据中的差异。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/sequential-pattle-map-chart.png\" class=\"\" title=\"sequential-pattle-map-chart\">\n\n<p>而离散色板的主要问题是不能比较被划分在同一个范围中的元素。在使用连续色板的接近值之间存在一些颜色差异的地方（例如上图中的德克萨斯州和加利福尼亚之间），使用离散色板体现不出差异。</p>\n<h2 id=\"使用颜色时的额外小技巧\"><a href=\"#使用颜色时的额外小技巧\" class=\"headerlink\" title=\"使用颜色时的额外小技巧\"></a>使用颜色时的额外小技巧</h2><h3 id=\"避免颜色滥用\"><a href=\"#避免颜色滥用\" class=\"headerlink\" title=\"避免颜色滥用\"></a>避免颜色滥用</h3><p>尽管颜色是数据可视化的重要组成部分，但还是要有节制，只在适当的地方使用颜色。并不是每个图表都需要多种颜色。如果仅要绘制两个变量，则它们可能会由垂直和水平位置或长度进行编码。一般只有在第三个变量需要编码到图表中或作为<a href=\"https://chartio.com/learn/charts/pie-chart-complete-guide/\">饼图等专业图表</a>的组成部分时，才会出现颜色。但是，在某些情况下，可以添加颜色以强调特定的发现或作为额外的高亮编码。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/unnecessary-items.png\" class=\"\" title=\"unnecessary items\">\n\n<h3 id=\"不同图表间使用的颜色保持一致性\"><a href=\"#不同图表间使用的颜色保持一致性\" class=\"headerlink\" title=\"不同图表间使用的颜色保持一致性\"></a>不同图表间使用的颜色保持一致性</h3><img src=\"/blog/2021/01/05/data-viz-color/consistent-color.png\" class=\"\" title=\"consistent color\">\n\n<p>如果你在做一个含有多个图表的仪表盘或报告，尽量在同一个分组或场景下的不同图表间使用一致的颜色。如果颜色变化了，会减低易读性。</p>\n<h3 id=\"最大化利用颜色\"><a href=\"#最大化利用颜色\" class=\"headerlink\" title=\"最大化利用颜色\"></a>最大化利用颜色</h3><p>有时可以利用颜色的感知方式来增强可视化效果。如果要绘制的组具有固有的颜色约定（例如运动队和政党），分配适当的颜色可以使读者更轻松地进行可视化处理。甚至可能要尝试使用品牌的颜色作为基础来创建自定义调色板。</p>\n<p>一般来说要避免使用高饱和度和高亮度的颜色，以减少读者的视觉疲劳。但在有高亮重要元素的需要时，可以视情况使用。</p>\n<p>同时也不要忽视灰色，它既是很好的数据背景，又可以有<a href=\"https://www.visualisingdata.com/2015/01/make-grey-best-friend/\">其它用途</a>。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/leverage-meaningfulness.png\" class=\"\" title=\"leverage meaningfulness\">\n\n<p>最后，值得一提的是，不同的文化可以将[不同的含义赋予每种色调]（<a href=\"https://informationisbeautiful.net/visualizations/colours-in-cultures/%EF%BC%89%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%8C%E5%9C%A8%E6%9F%90%E4%BA%9B%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E4%B8%AD%EF%BC%8C%E7%BA%A2%E8%89%B2%E5%8F%AF%E8%83%BD%E4%B8%8E%E7%83%AD%E6%83%85%E6%88%96%E5%8D%B1%E9%99%A9%E7%9B%B8%E5%85%B3%EF%BC%8C%E4%BD%86%E5%9C%A8%E6%9F%90%E4%BA%9B%E4%B8%9C%E6%96%B9%E6%96%87%E5%8C%96%E4%B8%AD%EF%BC%8C%E7%BA%A2%E8%89%B2%E4%BB%A3%E8%A1%A8%E7%B9%81%E8%8D%A3%E4%B8%8E%E5%90%89%E7%A5%A5%E3%80%82%E9%99%A4%E9%9D%9E%E5%B0%86%E8%B0%83%E6%9F%A5%E7%BB%93%E6%9E%9C%E5%91%88%E7%8E%B0%E7%BB%99%E5%B9%BF%E6%B3%9B%E7%9A%84%E5%8F%97%E4%BC%97%EF%BC%8C%E5%90%A6%E5%88%99%E8%BF%99%E5%8F%AF%E8%83%BD%E4%B8%8D%E6%98%AF%E7%89%B9%E5%88%AB%E9%87%8D%E8%A6%81%EF%BC%8C%E4%BD%86%E8%BF%99%E6%98%AF%E5%80%BC%E5%BE%97%E8%AE%B0%E4%BD%8F%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%8F%AF%E5%B8%AE%E5%8A%A9%E4%BD%A0%E6%9B%B4%E8%BD%BB%E6%9D%BE%E5%9C%B0%E6%8E%8C%E6%8F%A1%E5%8F%AF%E8%A7%86%E5%8C%96%E6%95%88%E6%9E%9C%E3%80%82\">https://informationisbeautiful.net/visualizations/colours-in-cultures/）。例如，在某些西方文化中，红色可能与热情或危险相关，但在某些东方文化中，红色代表繁荣与吉祥。除非将调查结果呈现给广泛的受众，否则这可能不是特别重要，但这是值得记住的另一种工具，可帮助你更轻松地掌握可视化效果。</a></p>\n<h3 id=\"不要忘记色盲\"><a href=\"#不要忘记色盲\" class=\"headerlink\" title=\"不要忘记色盲\"></a>不要忘记色盲</h3><p>大约有4%的人有不同程度的色盲，绝大多数是男性。最常见的色盲是红绿色盲，他们分不清红色和绿色。基于以上原因，我们最好不要单纯只使用色调来区分数值，可以引入更多维度，比如亮度和饱和度。你可以使用像Coblis这样的<a href=\"https://www.color-blindness.com/coblis-color-blindness-simulator/\">色盲模式模拟</a>来确认最终的可视化效果能否被理解，以及是否存在颜色混淆。</p>\n<img src=\"/blog/2021/01/05/data-viz-color/color-blindness.png\" class=\"\" title=\"color blindness\">\n\n<h2 id=\"选择颜色的工具\"><a href=\"#选择颜色的工具\" class=\"headerlink\" title=\"选择颜色的工具\"></a>选择颜色的工具</h2><p>懒得翻了…… 直接点开链接体验吧。</p>\n<p>There are many tools online to help you select and test colors for your data visualizations. Here, I will highlight some of the simplest tools to help you get up to speed on color choices.</p>\n<h3 id=\"ColorBrewer\"><a href=\"#ColorBrewer\" class=\"headerlink\" title=\"ColorBrewer\"></a><a href=\"https://colorbrewer2.org/\">ColorBrewer</a></h3><img src=\"/blog/2021/01/05/data-viz-color/ColorBrewer.png\" class=\"\" title=\"ColorBrewer\">\n\n<p>ColorBrewer is the classic reference for color palettes, and provides a number of different palettes of each type. Certain palettes may be questionable for colorblind safety, so be sure to check out the eye-icon above the color codes pane to check if a color set has a potential to high chance of perception difficulties (indicated by a ? and X, respectively).</p>\n<h3 id=\"Data-Color-Picker\"><a href=\"#Data-Color-Picker\" class=\"headerlink\" title=\"Data Color Picker\"></a><a href=\"https://learnui.design/tools/data-color-picker.html\">Data Color Picker</a></h3><img src=\"/blog/2021/01/05/data-viz-color/data-color-picker.png\" class=\"\" title=\"Data Color Picker\">\n\n<p>The Data Color Picker is a quick and easy to use tool for generating sequential and diverging palettes. The default “Palette” tab is best used for generating multi-hue sequential palettes rather than qualitative palettes, since the interpolation between endpoints will necessarily leave out some segment of hues in the color wheel.</p>\n<h3 id=\"Chroma-js-Color-Palette-Helper\"><a href=\"#Chroma-js-Color-Palette-Helper\" class=\"headerlink\" title=\"Chroma.js Color Palette Helper\"></a><a href=\"https://vis4.net/palettes/\">Chroma.js Color Palette Helper</a></h3><img src=\"/blog/2021/01/05/data-viz-color/chroma.js.png\" class=\"\" title=\"Chroma.js Color Palette Helper\">\n\n<p>The chroma.js Color Palette Helper is a little bit more involved than Data Color Picker with its options for correcting lightness and bezier interpolation and slightly more difficult input of color values. However, it also allows for some additional freedom in setting multiple stop-points for the algorithm to try and fit a palette to. As an additional bonus, the application also includes a color blindness simulator on the same page, highlighting the most common types of deficiency where issues may crop up.</p>\n<h3 id=\"Color-Thief\"><a href=\"#Color-Thief\" class=\"headerlink\" title=\"Color Thief\"></a><a href=\"https://lokeshdhakar.com/projects/color-thief/\">Color Thief</a></h3><img src=\"/blog/2021/01/05/data-viz-color/color-thief.png\" class=\"\" title=\"Color Thief\">\n\n<p>There aren’t as many quick-and-easy tools for generating qualitative palettes as there are for sequential and diverging palettes. <a href=\"https://medialab.github.io/iwanthue/\">I want hue</a> and <a href=\"http://vrl.cs.brown.edu/color\">Colorgorical</a> are both quick for generating random palettes, but a bit more difficult to work with when you want to customize your values.<br>But one fun way of creating a qualitative palette is to draw inspiration from images and screencaps with appealing natural palettes. There are a few tools out there to help do this, but Color Thief is one of the easiest to work with, automatically extracting a healthy-sized palette from uploaded pictures. This doesn’t necessarily mean that you can use the extracted colors directly and in order as a visualization palette. They can be an inspirational starting point for colors that look good together, but you’ll likely need to make some tweaks and revisions to ensure that the colors you choose are effective in a visualization context.</p>\n<h3 id=\"Viz-Palette\"><a href=\"#Viz-Palette\" class=\"headerlink\" title=\"Viz Palette\"></a><a href=\"https://projects.susielu.com/viz-palette\">Viz Palette</a></h3><img src=\"/blog/2021/01/05/data-viz-color/viz-palette.png\" class=\"\" title=\"Viz Palette\">\n\n<p>In the previous section, <a href=\"https://www.color-blindness.com/coblis-color-blindness-simulator/\">Coblis</a> was linked as a resource for checking how your final visualization might look to those with color perception deficiencies. Viz Palette is a broader color palette tool you can use to check your palettes before you put together your visualizations. In addition to being able to view sets of colors in the context of example plots and under simulated-color perception deficiencies, you can also modify and change your palette’s colors immediately.</p>\n<h3 id=\"Viser主题\"><a href=\"#Viser主题\" class=\"headerlink\" title=\"Viser主题\"></a><a href=\"https://viserjs.github.io/theme.html\">Viser主题</a></h3><img src=\"/blog/2021/01/05/data-viz-color/viser-theme.png\" class=\"\" title=\"Viser Theme\">\n\n<p>蚂蚁的Viser主题工具也提供了色板的默认方案与调试展示，同时提供了蚂蚁可视化的<a href=\"https://antv.gitee.io/zh/docs/specification/language/palette\">色板设计语言</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简要概述了颜色可用于有效数据可视化的方式。根据映射到颜色的数据类型，应使用不同类型的色板（分类，顺序和发散）。确保使用颜色时，它是有意义的并且始终如一地使用，并尝试解决色盲问题，以改善绘图的可访问性。</p>\n<p>向他人展示发现结果时，请务必仔细考虑您的颜色选择，一组好的颜色可以让向听众传达信息变得更加容易。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science","data visualization"],"tags":["design"]},{"title":"在Visual Studio中使用docker调试与发布","url":"/blog/2023/01/11/debug-with-docker-in-visualstudio/","content":"<h2 id=\"启用docker\"><a href=\"#启用docker\" class=\"headerlink\" title=\"启用docker\"></a>启用docker</h2><p>在创建Visual Studio工程时，可以选择<code>启用docker</code>。</p>\n<img src=\"/blog/2023/01/11/debug-with-docker-in-visualstudio/enable-docker.png\" class=\"\" title=\"启用docker\">\n\n<p>在这里可以选择使用linux或windows容器，后续也可以修改，配置在fsproj中的<code>&lt;DockerDefaultTargetOS&gt;Windows&lt;/DockerDefaultTargetOS&gt;</code>。<br>可以使用命令<code>DockerCli.exe -SwitchDaemon</code>来切换linux和windows容器。</p>\n<p>在打开工程时，会在<code>容器工具</code>中预热容器，这里展示的是切换至windows容器后首次的显示内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">========== 容器必备项检查 ==========</span><br><span class=\"line\">正在验证是否安装了 Docker Desktop...</span><br><span class=\"line\">安装了 Docker Desktop。</span><br><span class=\"line\">========== 正在验证 Docker Desktop 是否正在运行... ==========</span><br><span class=\"line\">正在验证 Docker Desktop 是否正在运行...</span><br><span class=\"line\">Docker Desktop 正在运行。</span><br><span class=\"line\">========== 正在验证 Docker OS ==========</span><br><span class=\"line\">正在验证 Docker Desktop 的操作系统模式是否匹配项目的目标操作系统...</span><br><span class=\"line\">正在将 Docker 切换为使用 Windows 容器...</span><br><span class=\"line\">C:\\Program Files\\Docker\\Docker\\DockerCli.exe -SwitchDaemon</span><br><span class=\"line\">Docker 正在使用 Windows 容器。</span><br><span class=\"line\">Docker Desktop 的操作系统模式与项目的目标操作系统匹配。</span><br><span class=\"line\">========== 拉取所需的映像 ==========</span><br><span class=\"line\">正在检查缺少的 Docker 映像...</span><br><span class=\"line\">正在拉取 Docker 映像。要取消此下载，请关闭命令提示符窗口。</span><br><span class=\"line\">docker pull mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class=\"line\">Docker 映像准备就绪。</span><br><span class=\"line\">========== 正在为 aspnetcore-starter 预热容器 ==========</span><br><span class=\"line\">正在启动容器...</span><br><span class=\"line\">docker build -f &quot;C:\\aspnetcore-starter\\Dockerfile&quot; --force-rm -t aspnetcorestarter:dev --target base  --label &quot;com.microsoft.created-by=visual-studio&quot; --label &quot;com.microsoft.visual-studio.project-name=aspnetcore-starter&quot; &quot;C:\\aspnetcore-starter&quot; </span><br><span class=\"line\">Sending build context to Docker daemon   12.8kB</span><br><span class=\"line\"></span><br><span class=\"line\">Step 1/6 : FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base</span><br><span class=\"line\"> ---&gt; bf68776fa5fd</span><br><span class=\"line\">Step 2/6 : WORKDIR /app</span><br><span class=\"line\"> ---&gt; Running in e94384d22857</span><br><span class=\"line\">Removing intermediate container e94384d22857</span><br><span class=\"line\"> ---&gt; ea0fbf24c0b6</span><br><span class=\"line\">Step 3/6 : EXPOSE 80</span><br><span class=\"line\"> ---&gt; Running in ce3b710cbd03</span><br><span class=\"line\">Removing intermediate container ce3b710cbd03</span><br><span class=\"line\"> ---&gt; 789a79d66692</span><br><span class=\"line\">Step 4/6 : EXPOSE 443</span><br><span class=\"line\"> ---&gt; Running in e5d1564b5068</span><br><span class=\"line\">Removing intermediate container e5d1564b5068</span><br><span class=\"line\"> ---&gt; e1fe0f5f6e4e</span><br><span class=\"line\">Step 5/6 : LABEL com.microsoft.created-by=visual-studio</span><br><span class=\"line\"> ---&gt; Running in 72be90c608ab</span><br><span class=\"line\">Removing intermediate container 72be90c608ab</span><br><span class=\"line\"> ---&gt; 01a9446b8b12</span><br><span class=\"line\">Step 6/6 : LABEL com.microsoft.visual-studio.project-name=aspnetcore-starter</span><br><span class=\"line\"> ---&gt; Running in ed3661aaa105</span><br><span class=\"line\">Removing intermediate container ed3661aaa105</span><br><span class=\"line\"> ---&gt; dd3e1d24aff2</span><br><span class=\"line\">Successfully built dd3e1d24aff2</span><br><span class=\"line\">Successfully tagged aspnetcorestarter:dev</span><br><span class=\"line\">docker run -dt -v &quot;C:\\Users\\username\\onecoremsvsmon\\17.4.11004.1991:C:\\remote_debugger:ro&quot; -v &quot;C:\\Users\\username\\AppData\\Roaming\\Microsoft\\UserSecrets:C:\\Users\\ContainerUser\\AppData\\Roaming\\Microsoft\\UserSecrets:ro&quot; -v &quot;C:\\Users\\username\\AppData\\Roaming\\ASP.NET\\Https:C:\\Users\\ContainerUser\\AppData\\Roaming\\ASP.NET\\Https:ro&quot; -v &quot;C:\\aspnetcore-starter\\aspnetcore-starter:C:\\app&quot; -v &quot;C:\\aspnetcore-starter:c:\\src&quot; -v &quot;C:\\Users\\username\\.nuget\\packages\\:c:\\.nuget\\fallbackpackages2&quot; -v &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages:c:\\.nuget\\fallbackpackages&quot; -e &quot;ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true&quot; -e &quot;ASPNETCORE_ENVIRONMENT=Development&quot; -e &quot;ASPNETCORE_URLS=https://+:443;http://+:80&quot; -e &quot;DOTNET_USE_POLLING_FILE_WATCHER=1&quot; -e &quot;NUGET_PACKAGES=c:\\.nuget\\fallbackpackages2&quot; -e &quot;NUGET_FALLBACK_PACKAGES=c:\\.nuget\\fallbackpackages;c:\\.nuget\\fallbackpackages2&quot; -P --name aspnetcore-starter --entrypoint C:\\remote_debugger\\x64\\msvsmon.exe aspnetcorestarter:dev /noauth /anyuser /silent /nostatus /noclrwarn /nosecuritywarn /nofirewallwarn /nowowwarn /fallbackloadremotemanagedpdbs /timeout:2147483646 /LogDebuggeeOutputToStdOut </span><br><span class=\"line\">671324104a5211ce0bce851af1e5373ce9af9cfb3198b8e1b3606da04af2225b</span><br><span class=\"line\">已成功启动容器。</span><br><span class=\"line\">========== 已完成 ==========</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在启动调试时卡住\"><a href=\"#在启动调试时卡住\" class=\"headerlink\" title=\"在启动调试时卡住\"></a>在启动调试时卡住</h2><p>使用linux容器启动调试时，显示以下输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1&gt;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NonInteractive -NoProfile -WindowStyle Hidden -ExecutionPolicy RemoteSigned -File &quot;C:\\Users\\username\\AppData\\Local\\Temp\\GetVsDbg.ps1&quot; -Version vs2017u5 -RuntimeID linux-x64 -InstallPath &quot;C:\\Users\\username\\vsdbg\\vs2017u5&quot;</span><br><span class=\"line\">1&gt;Info: Using vsdbg version &#x27;17.4.11209.2&#x27;</span><br><span class=\"line\">1&gt;Info: Using Runtime ID &#x27;linux-x64&#x27;</span><br><span class=\"line\">1&gt;Info: Latest version of VsDbg is present. Skipping downloads</span><br><span class=\"line\">1&gt;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NonInteractive -NoProfile -WindowStyle Hidden -ExecutionPolicy RemoteSigned -File &quot;C:\\Users\\username\\AppData\\Local\\Temp\\GetVsDbg.ps1&quot; -Version vs2017u5 -RuntimeID linux-musl-x64 -InstallPath &quot;C:\\Users\\username\\vsdbg\\vs2017u5\\linux-musl-x64&quot;</span><br><span class=\"line\">1&gt;Info: Using vsdbg version &#x27;17.4.11209.2&#x27;</span><br><span class=\"line\">1&gt;Info: Using Runtime ID &#x27;linux-musl-x64&#x27;</span><br></pre></td></tr></table></figure>\n<p>然后卡在这里。</p>\n<p>查看<code>C:\\Users\\username\\AppData\\Local\\Temp\\GetVsDbg.ps1</code>，很容易发现它是卡在了下载上：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$target</span> = (<span class=\"string\">&quot;vsdbg-&quot;</span> + <span class=\"variable\">$VersionNumber</span>).Replace(<span class=\"string\">&#x27;.&#x27;</span>,<span class=\"string\">&#x27;-&#x27;</span>) + <span class=\"string\">&quot;/vsdbg-&quot;</span> + <span class=\"variable\">$RuntimeID</span> + <span class=\"string\">&quot;.zip&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&quot;https://vsdebugger.azureedge.net/&quot;</span> + <span class=\"variable\">$target</span></span><br><span class=\"line\"></span><br><span class=\"line\">DownloadAndExtract <span class=\"variable\">$url</span> <span class=\"variable\">$InstallPath</span></span><br><span class=\"line\"></span><br><span class=\"line\">WriteSuccessInfo <span class=\"variable\">$InstallPath</span> <span class=\"variable\">$RuntimeID</span> <span class=\"variable\">$VersionNumber</span></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"string\">&quot;Info: Successfully installed vsdbg at &#x27;<span class=\"variable\">$InstallPath</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>我们把<code>$url</code>拼凑出来，得到<code>https://vsdebugger.azureedge.net/vsdbg-17-4-11209-2/vsdbg-linux-musl-x64.zip</code>。</p>\n<p>直接使用Edge下载，发现这个压缩包的大小为60兆左右，下载速度在50K，大约需要20分钟。<br>看来直接放着不管，等半小时就能解决卡住的问题了。</p>\n<p>但谁叫咱们是急性子呢，使用<a href=\"/blog/2022/07/07/neat-download-manager/\" title=\"下载软件idm的替代品：ndm\">Neat Download Manager</a>下载，2分钟搞定。<br>下载完后把它解压缩到<code>$InstallPath</code>，即<code>C:\\Users\\username\\vsdbg\\vs2017u5\\linux-musl-x64</code>。强行关闭visual studio，再次启动调试就正常了。</p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>如果要发布到docker registry，可以在发布时，选择发布到<code>Docker容器注册表</code>。</p>\n<p>VS内置了两个Docker源：Azure和Docker Hub。</p>\n<img src=\"/blog/2023/01/11/debug-with-docker-in-visualstudio/select-docker-registry.png\" class=\"\" title=\"选择容器注册表\">\n\n<p>我们选择<a href=\"/blog/2022/12/30/deploy-docker-registry/\" title=\"部署docker私有源\">自建docker源</a>：</p>\n<img src=\"/blog/2023/01/11/debug-with-docker-in-visualstudio/publish-to-docker-registry.png\" class=\"\" title=\"自建docker源\">\n\n<p>注意，这里填的url不要含<code>http</code>头，VS会添加<code>https</code>头来强制使用ssl确保安全性。因为<a href=\"https://docs.docker.com/registry/insecure/\">使用账号密码的鉴权方式不支持http</a>。<br>发布源的配置保存在工程目录的<code>Properties\\PublishProfiles\\</code>子目录下。</p>\n<p>只需轻轻点击发布即可推送到docker私有源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">已启动生成...</span><br><span class=\"line\">1&gt;------ 已启动生成: 项目: aspnetcore-starter, 配置: Release Any CPU ------</span><br><span class=\"line\">1&gt;aspnetcore-starter -&gt; C:\\aspnetcore-starter\\bin\\Release\\net6.0\\aspnetcore-starter.dll</span><br><span class=\"line\">2&gt;------ 已启动发布: 项目: aspnetcore-starter, 配置: Release Any CPU ------</span><br><span class=\"line\">aspnetcore-starter -&gt; C:\\aspnetcore-starter\\bin\\Release\\net6.0\\aspnetcore-starter.dll</span><br><span class=\"line\">aspnetcore-starter -&gt; C:\\aspnetcore-starter\\obj\\Docker\\publish\\</span><br><span class=\"line\">Docker version 20.10.21, build baeda1f</span><br><span class=\"line\">docker build -f &quot;C:\\aspnetcore-starter\\Dockerfile&quot; --force-rm -t aspnetcorestarter  --label &quot;com.microsoft.created-by=visual-studio&quot; --label &quot;com.microsoft.visual-studio.project-name=aspnetcore-starter&quot; &quot;C:&quot; </span><br><span class=\"line\">#1 [internal] load build definition from Dockerfile</span><br><span class=\"line\">#1 sha256:8baf9fe9cc57b6cf0dd45cec9ac8f026f414e73ab07bc3ccd5d42b5e310f458f</span><br><span class=\"line\">#1 transferring dockerfile: 1.06kB done</span><br><span class=\"line\">#1 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#2 [internal] load .dockerignore</span><br><span class=\"line\">#2 sha256:f5805a506c9a1d0feb2b7cfc779db1395c7c998c1b106fd6a488baef30c69bb0</span><br><span class=\"line\">#2 transferring context: 382B done</span><br><span class=\"line\">#2 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#3 [internal] load metadata for mcr.microsoft.com/dotnet/sdk:6.0</span><br><span class=\"line\">#3 sha256:9eb4f6c3944cfcbfe18b9f1a753c769fc35341309a8d4a21f8937f47e94c712b</span><br><span class=\"line\">#3 ...</span><br><span class=\"line\"></span><br><span class=\"line\">#4 [internal] load metadata for mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class=\"line\">#4 sha256:ac4494cbca04ddb415c76edcbcc7688784c2a6ea65dd656286c013738aa3b75f</span><br><span class=\"line\">#4 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#3 [internal] load metadata for mcr.microsoft.com/dotnet/sdk:6.0</span><br><span class=\"line\">#3 sha256:9eb4f6c3944cfcbfe18b9f1a753c769fc35341309a8d4a21f8937f47e94c712b</span><br><span class=\"line\">#3 DONE 0.3s</span><br><span class=\"line\"></span><br><span class=\"line\">#8 [build 1/7] FROM mcr.microsoft.com/dotnet/sdk:6.0@sha256:23abf93a047e6f1bf1659bd0ff787facd6c80dcbf3421dd655f10bac209d1fde</span><br><span class=\"line\">#8 sha256:c96c19e06e8ccfaae43656f0e9f3762d271a5c005dd95681e629f08302587e53</span><br><span class=\"line\">#8 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#5 [base 1/2] FROM mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class=\"line\">#5 sha256:50f1ddc10932c4a74c7af5704e931a9489c710faea4f2381fe2380827a900e00</span><br><span class=\"line\">#5 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#10 [internal] load build context</span><br><span class=\"line\">#10 sha256:b6a38a1e45714a79432c6ecbdb652fff543e4059d3b34c5c5f999be364f37248</span><br><span class=\"line\">#10 transferring context: 5.54kB 0.0s done</span><br><span class=\"line\">#10 DONE 0.1s</span><br><span class=\"line\"></span><br><span class=\"line\">#9 [build 2/7] WORKDIR /src</span><br><span class=\"line\">#9 sha256:9c9fa3968f5b4f2cff4aa864a4ce235a22a6c7305e5220f516bc00d86d30e575</span><br><span class=\"line\">#9 CACHED</span><br><span class=\"line\"></span><br><span class=\"line\">#11 [build 3/7] COPY [aspnetcore-starter/aspnetcore-starter.fsproj, aspnetcore-starter/]</span><br><span class=\"line\">#11 sha256:6d9a5e2943840ea676fb7090c9d6650d8649bdc9e91b8706b67bed5fcb44eeb1</span><br><span class=\"line\">#11 DONE 0.0s</span><br><span class=\"line\"></span><br><span class=\"line\">#12 [build 4/7] RUN dotnet restore &quot;aspnetcore-starter/aspnetcore-starter.fsproj&quot;</span><br><span class=\"line\">#12 sha256:f7fe82b3aa75010301a204a04d87b86cd4f5d4b0cfbd462708e9cb6662812373</span><br><span class=\"line\">#12 1.017   Determining projects to restore...</span><br><span class=\"line\">#12 3.569   Restored /src/aspnetcore-starter/aspnetcore-starter.fsproj (in 2.24 sec).</span><br><span class=\"line\">#12 DONE 3.7s</span><br><span class=\"line\"></span><br><span class=\"line\">#13 [build 5/7] COPY . .</span><br><span class=\"line\">#13 sha256:acc19d075613d47507d57b0daabf4ff169fac8c1dff88b4e77e6a0e99f8590cb</span><br><span class=\"line\">#13 DONE 0.1s</span><br><span class=\"line\"></span><br><span class=\"line\">#14 [build 6/7] WORKDIR /src/aspnetcore-starter</span><br><span class=\"line\">#14 sha256:7dd55bf8c94ee5fd1995b4194fc59971f4e3417b237b62f6b73f3276752134f5</span><br><span class=\"line\">#14 DONE 0.1s</span><br><span class=\"line\"></span><br><span class=\"line\">#15 [build 7/7] RUN dotnet build &quot;aspnetcore-starter.fsproj&quot; -c Release -o /app/build</span><br><span class=\"line\">#15 sha256:27ea67d1d5032e19f58a61b48b66488f25899abd04ab77761897c04b8c72c0ad</span><br><span class=\"line\">#15 0.506 MSBuild version 17.3.2+561848881 for .NET</span><br><span class=\"line\">#15 1.183   Determining projects to restore...</span><br><span class=\"line\">#15 1.645   All projects are up-to-date for restore.</span><br><span class=\"line\">#15 5.471   aspnetcore-starter -&gt; /app/build/aspnetcore-starter.dll</span><br><span class=\"line\">#15 5.486 </span><br><span class=\"line\">#15 5.486 Build succeeded.</span><br><span class=\"line\">#15 5.486     0 Warning(s)</span><br><span class=\"line\">#15 5.486     0 Error(s)</span><br><span class=\"line\">#15 5.486 </span><br><span class=\"line\">#15 5.486 Time Elapsed 00:00:04.89</span><br><span class=\"line\">#15 DONE 5.5s</span><br><span class=\"line\"></span><br><span class=\"line\">#16 [publish 1/1] RUN dotnet publish &quot;aspnetcore-starter.fsproj&quot; -c Release -o /app/publish /p:UseAppHost=false</span><br><span class=\"line\">#16 sha256:32f4298e51c853156a2f81bb365b8f4b12eda0127896fc52e6a8e94186a256f7</span><br><span class=\"line\">#16 0.511 MSBuild version 17.3.2+561848881 for .NET</span><br><span class=\"line\">#16 1.113   Determining projects to restore...</span><br><span class=\"line\">#16 1.499   All projects are up-to-date for restore.</span><br><span class=\"line\">#16 2.305   aspnetcore-starter -&gt; /src/aspnetcore-starter/bin/Release/net6.0/aspnetcore-starter.dll</span><br><span class=\"line\">#16 2.365   aspnetcore-starter -&gt; /app/publish/</span><br><span class=\"line\">#16 DONE 2.4s</span><br><span class=\"line\"></span><br><span class=\"line\">#6 [base 2/2] WORKDIR /app</span><br><span class=\"line\">#6 sha256:bc3cf6c390e5fe0e66017b4845c8fcf3e56c7adac9f514a00c2c986024f377a4</span><br><span class=\"line\">#6 CACHED</span><br><span class=\"line\"></span><br><span class=\"line\">#7 [final 1/2] WORKDIR /app</span><br><span class=\"line\">#7 sha256:3baba3edbb555769ad9a49e827de88d7dcc4f72ad6e2b42e576964e4a30eac96</span><br><span class=\"line\">#7 CACHED</span><br><span class=\"line\"></span><br><span class=\"line\">#17 [final 2/2] COPY --from=publish /app/publish .</span><br><span class=\"line\">#17 sha256:888b07e32e65ef8e188f006eaa973588bbffde456c17a1a5be7ff18d2cf0f3d3</span><br><span class=\"line\">#17 DONE 0.1s</span><br><span class=\"line\"></span><br><span class=\"line\">#18 exporting to image</span><br><span class=\"line\">#18 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00</span><br><span class=\"line\">#18 exporting layers 0.1s done</span><br><span class=\"line\">#18 writing image sha256:d666433c2e744951f78bf298a82a05d62da163cac2fb335ba215cc707f60fcce done</span><br><span class=\"line\">#18 naming to docker.io/library/aspnetcorestarter done</span><br><span class=\"line\">#18 DONE 0.1s</span><br><span class=\"line\">========== 版本: 1 成功，0 失败，0 更新，0 跳过 ==========</span><br><span class=\"line\">========== 占用时间 00:17.813 ==========</span><br><span class=\"line\">========== 发布: 1 个成功，0 个失败，0 个已跳过 ==========</span><br><span class=\"line\">========== 占用时间 00:17.813 ==========</span><br><span class=\"line\">The push refers to repository [your_docker_registry.com:443/aspnetcorestarter]</span><br><span class=\"line\">bb0e8b5691c1: Preparing</span><br><span class=\"line\">5f70bf18a086: Preparing</span><br><span class=\"line\">756d414086ee: Preparing</span><br><span class=\"line\">7e963e684504: Preparing</span><br><span class=\"line\">579f2f220e9d: Preparing</span><br><span class=\"line\">3484e444e9cf: Preparing</span><br><span class=\"line\">95a1c56e8ba5: Preparing</span><br><span class=\"line\">67a4178b7d47: Preparing</span><br><span class=\"line\">3484e444e9cf: Waiting</span><br><span class=\"line\">95a1c56e8ba5: Waiting</span><br><span class=\"line\">67a4178b7d47: Waiting</span><br><span class=\"line\">756d414086ee: Layer already exists</span><br><span class=\"line\">5f70bf18a086: Layer already exists</span><br><span class=\"line\">579f2f220e9d: Layer already exists</span><br><span class=\"line\">7e963e684504: Layer already exists</span><br><span class=\"line\">95a1c56e8ba5: Layer already exists</span><br><span class=\"line\">3484e444e9cf: Layer already exists</span><br><span class=\"line\">67a4178b7d47: Layer already exists</span><br><span class=\"line\">bb0e8b5691c1: Pushed</span><br><span class=\"line\">latest: digest: sha256:32dd47b9da184b1462566f6a37f80875fefbe29a3b46f030cf4519573dccc170 size: 1995</span><br><span class=\"line\">已成功推送带标记“latest”的 Docker 映像</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"部署docker私有源","url":"/blog/2022/12/30/deploy-docker-registry/","content":"<p>关于docker私有源也可以参见<a href=\"https://docs.docker.com/registry/deploying/\">官方文档</a>，这篇文章是我整理的笔记。</p>\n<h2 id=\"速览\"><a href=\"#速览\" class=\"headerlink\" title=\"速览\"></a>速览</h2><p>docker私有源的搭建使用docker官方镜像<a href=\"https://hub.docker.com/_/registry\">registry</a>来实现，比如一个最简单的本地私有源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure>\n\n<p>服务跑起来后，就可以使用了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:16.04</span><br><span class=\"line\">docker tag ubuntu:16.04 localhost:5000/my-ubuntu</span><br><span class=\"line\">docker push localhost:5000/my-ubuntu</span><br><span class=\"line\">docker image remove ubuntu:16.04</span><br><span class=\"line\">docker image remove localhost:5000/my-ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令把<code>ubuntu:16.04</code>镜像推送到了<code>localhost:5000/my-ubuntu</code>。<br>注意最后的<code>docker image remove localhost:5000/my-ubuntu</code>并不会删除服务器上的镜像，有点类似<code>git branch -d xxx</code>，只是删除了本地的镜像。<br>还是可以从服务器上拉取镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull localhost:5000/my-ubuntu</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"映射数据区\"><a href=\"#映射数据区\" class=\"headerlink\" title=\"映射数据区\"></a>映射数据区</h2><p>默认情况下，数据会被存储在<a href=\"https://docs.docker.com/storage/volumes/\">docker卷</a>中。我们可以将registry的<code>/var/lib/registry/</code>映射到本地目录。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir <span class=\"keyword\">data</span></span><br><span class=\"line\">docker run <span class=\"literal\">-d</span> `</span><br><span class=\"line\">  <span class=\"literal\">-p</span> <span class=\"number\">5000</span>:<span class=\"number\">5000</span> `</span><br><span class=\"line\">  <span class=\"literal\">--restart</span>=always `</span><br><span class=\"line\">  <span class=\"literal\">--name</span> registry `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$</span>(pwd)/data:/var/lib/registry&quot;</span> `</span><br><span class=\"line\">  registry:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>这样我们只要保有<code>data</code>目录，就能重新建起一个源。</p>\n<h2 id=\"鉴权登录\"><a href=\"#鉴权登录\" class=\"headerlink\" title=\"鉴权登录\"></a>鉴权登录</h2><p>私有源肯定得有鉴权登录，否则就成了公有源。虽然也可以通过云服务器的<a href=\"https://help.aliyun.com/document_detail/25471.html#h2-url-4\">IP白名单</a>来实现这一点，但账号密码的泛用性更强一些。</p>\n<p>首先创建一个密码本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> auth</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> --entrypoint htpasswd httpd:2 -Bbn testuser testpassword &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>\n<p>如果是在windows上，需要指定输出文件的编码格式为Ascii（如指定UTF8，PowerShell中除UTF7之外的所有Unicode编码都是with BOM)。如果不指定，<a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_character_encoding#character-encoding-in-windows-powershell\">PowerShell默认</a>的编码格式是<a href=\"https://en.wikipedia.org/wiki/UTF-16\">UTF-16 LE</a>，无法被registry使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> --entrypoint htpasswd httpd:2 -Bbn testuser testpassword | Set-Content -Encoding ASCII auth/htpasswd</span><br></pre></td></tr></table></figure>\n<p>如果不想使用<code>bcrypt</code>，可以省略<code>-B</code>参数。</p>\n<p>在启动registry时使用密码本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run <span class=\"literal\">-d</span> `</span><br><span class=\"line\">  <span class=\"literal\">-p</span> <span class=\"number\">5000</span>:<span class=\"number\">5000</span> `</span><br><span class=\"line\">  <span class=\"literal\">--restart</span>=always `</span><br><span class=\"line\">  <span class=\"literal\">--name</span> registry `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$</span>(pwd)/auth:/auth&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$</span>(pwd)/data:/var/lib/registry&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-e</span> <span class=\"string\">&quot;REGISTRY_AUTH=htpasswd&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-e</span> <span class=\"string\">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-e</span> <span class=\"string\">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span> `</span><br><span class=\"line\">  registry:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>此时再进行push，会提示未鉴权：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; docker push localhost:5000/my-ubuntu</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [localhost:5000/my-ubuntu]</span><br><span class=\"line\">1251204ef8fc: Preparing</span><br><span class=\"line\">47ef83afae74: Preparing</span><br><span class=\"line\">df54c846128d: Preparing</span><br><span class=\"line\">be96a3f634de: Preparing</span><br><span class=\"line\">no basic auth credentials</span><br></pre></td></tr></table></figure>\n\n<p>需要先<a href=\"https://docs.docker.com/engine/reference/commandline/login/\">登录</a>才能使用源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; docker login -u testuser -p testpassword localhost:5000</span><br><span class=\"line\">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n\n<p>再进行push操作就正常了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; docker push localhost:5000/my-ubuntu</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [localhost:5000/my-ubuntu]</span><br><span class=\"line\">1251204ef8fc: Pushed</span><br><span class=\"line\">47ef83afae74: Pushed</span><br><span class=\"line\">df54c846128d: Pushed</span><br><span class=\"line\">be96a3f634de: Pushed</span><br><span class=\"line\">latest: digest: sha256:a3785f78ab8547ae2710c89e627783cfa7ee7824d3468cae6835c9f4eae23ff7 size: 1150</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外部访问\"><a href=\"#外部访问\" class=\"headerlink\" title=\"外部访问\"></a>外部访问</h2><p>目前为止我们都是将服务监听在localhost，如果我们要放开给外部使用，最好使用TSL。</p>\n<p>使用SSL域名证书有两种方式，一种是<a href=\"https://docs.docker.com/registry/deploying/#get-a-certificate\">将证书直接绑到registry</a>服务使用，另一种是<a href=\"https://docs.docker.com/registry/recipes/apache/\">使用apache</a>或<a href=\"https://docs.docker.com/registry/recipes/nginx/\">nginx反向代理</a>。</p>\n<p>nginx是最通用的方案，我们选择这个。</p>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><p>除了最常规的反向代理设置外，registry还需要以下几个设置：</p>\n<p><strong>header</strong><br>我们需要反向代理这几个http头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_set_header  Host              $http_host;   # required for docker client&#x27;s sake</span><br><span class=\"line\">proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&#x27;s IP</span><br><span class=\"line\">proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class=\"line\">proxy_set_header  X-Forwarded-Proto $scheme;</span><br></pre></td></tr></table></figure>\n\n<p><strong>auth</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">location /v2/ &#123;</span><br><span class=\"line\">    # To add basic authentication to v2 use auth_basic setting.</span><br><span class=\"line\">    auth_basic &quot;Registry realm&quot;;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>body size</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">  client_max_body_size 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>完整示例</strong><br>还有一些其它设置，下面是一个完整的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  upstream docker-registry &#123;</span><br><span class=\"line\">    server registry:5000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## Set a variable to help us decide if we need to add the</span><br><span class=\"line\">  ## &#x27;Docker-Distribution-Api-Version&#x27; header.</span><br><span class=\"line\">  ## The registry always sets this header.</span><br><span class=\"line\">  ## In the case of nginx performing auth, the header is unset</span><br><span class=\"line\">  ## since nginx is auth-ing before proxying.</span><br><span class=\"line\">  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version &#123;</span><br><span class=\"line\">    &#x27;&#x27; &#x27;registry/2.0&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name myregistrydomain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # SSL</span><br><span class=\"line\">    ssl_certificate /etc/nginx/conf.d/domain.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/nginx/conf.d/domain.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers &#x27;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#x27;;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\"></span><br><span class=\"line\">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /v2/ &#123;</span><br><span class=\"line\">      # Do not allow connections from docker 1.5 and earlier</span><br><span class=\"line\">      # docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents</span><br><span class=\"line\">      if ($http_user_agent ~ &quot;^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$&quot; ) &#123;</span><br><span class=\"line\">        return 404;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      # To add basic authentication to v2 use auth_basic setting.</span><br><span class=\"line\">      auth_basic &quot;Registry realm&quot;;</span><br><span class=\"line\">      auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;</span><br><span class=\"line\"></span><br><span class=\"line\">      ## If $docker_distribution_api_version is empty, the header is not added.</span><br><span class=\"line\">      ## See the map directive above where this variable is defined.</span><br><span class=\"line\">      add_header &#x27;Docker-Distribution-Api-Version&#x27; $docker_distribution_api_version always;</span><br><span class=\"line\"></span><br><span class=\"line\">      proxy_pass                          http://docker-registry;</span><br><span class=\"line\">      proxy_set_header  Host              $http_host;   # required for docker client&#x27;s sake</span><br><span class=\"line\">      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&#x27;s IP</span><br><span class=\"line\">      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_set_header  X-Forwarded-Proto $scheme;</span><br><span class=\"line\">      proxy_read_timeout                  900;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将上面的conf文件保存至<code>auth/nginx.conf</code>。</p>\n<p>将SSL证书保存至<code>auth/</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> domain.crt auth</span><br><span class=\"line\"><span class=\"built_in\">cp</span> domain.key auth</span><br></pre></td></tr></table></figure>\n\n<p>将下面的内容保存至<code>docker-compose.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nginx:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note : Only nginx:alpine supports bcrypt.</span></span><br><span class=\"line\">  <span class=\"comment\"># If you don&#x27;t need to use bcrypt, you can use a different tag.</span></span><br><span class=\"line\">  <span class=\"comment\"># Ref. https://github.com/nginxinc/docker-nginx/issues/29</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">&quot;nginx:alpine&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">5043</span><span class=\"string\">:443</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">registry:registry</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./auth:/etc/nginx/conf.d</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./auth/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">registry:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">registry:2</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/lib/registry</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>完成</strong><br>跑起来看看结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>看看是不是可以正常使用了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker login -u=testuser -p=testpassword -e=root@example.ch myregistrydomain.com:5043</span><br><span class=\"line\">docker tag ubuntu myregistrydomain.com:5043/test</span><br><span class=\"line\">docker push myregistrydomain.com:5043/test</span><br><span class=\"line\">docker pull myregistrydomain.com:5043/test</span><br></pre></td></tr></table></figure>\n\n<p>如果不想使用docker-compose再运行一个nginx，要注意<code>htpasswd</code>的存放路径，需要放在nginx的用户<code>www-data</code>能读取到的地方，比如<code>/var/www</code>下。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"部署docker数据卷","url":"/blog/2023/01/10/deploy-docker-volume/","content":"<h2 id=\"使用压缩包\"><a href=\"#使用压缩包\" class=\"headerlink\" title=\"使用压缩包\"></a>使用压缩包</h2><p>最简单的办法就是把数据卷导出成一个压缩包，然后使用ssh传输到服务器上去使用，当然也可使用需鉴权的文件服务器做为中转。</p>\n<p>数据卷的导出和导入可参考这篇博文：<a href=\"/blog/2023/01/10/backup-and-share-docker-volume/\" title=\"导出和导入docker数据卷\">导出和导入docker数据卷</a>。</p>\n<h2 id=\"使用image\"><a href=\"#使用image\" class=\"headerlink\" title=\"使用image\"></a>使用image</h2><p>还有一个方法是把数据卷也打包进docker image里上传到docker私有源。</p>\n<p>首先在编译镜像时，把数据卷拷入，同时设置卷标</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./volumes/webroot /webroot</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/webroot&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>附：如果使用docker-compose，需要访问上级目录，可参照<a href=\"#%E9%99%84%E5%BD%95%E4%BD%BF%E7%94%A8context\">附录: 使用context</a></p>\n<p>然后在使用这个镜像时，就可以把镜像中的webroot mount到本地数据卷：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> --mount <span class=\"built_in\">source</span>=my-webroot,destination=/webroot/ sv-webroot:1.0.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附录：使用context\"><a href=\"#附录：使用context\" class=\"headerlink\" title=\"附录：使用context\"></a>附录：使用context</h2><p>如果要拷贝上级目录的内容，可以分别指定context和dockerfile来实现：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">webroot-builder:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">context:</span> <span class=\"string\">./</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">./webroot/Dockerfile</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">sv-webroot:1.0.0</span></span><br><span class=\"line\">  <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">web-builder</span></span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"开发钉钉微应用随笔","url":"/blog/2022/06/27/develop-dingtalk-microapp/","content":"<h2 id=\"微应用调试工具\"><a href=\"#微应用调试工具\" class=\"headerlink\" title=\"微应用调试工具\"></a>微应用调试工具</h2><p>类似微信开发者工具中的公众号网页调试，我们在开发时需要一个能看到调试信息的类浏览器环境。</p>\n<h3 id=\"钉钉RC版\"><a href=\"#钉钉RC版\" class=\"headerlink\" title=\"钉钉RC版\"></a>钉钉RC版</h3><p><a href=\"https://open.dingtalk.com/document/resourcedownload/h5-debug\">钉钉RC版</a>是钉钉开放平台推出的用于调试钉钉微应用的调试工具，仅支持安卓和win。</p>\n<p>与钉钉Desktop版长的基本一样，在微应用界面可以按下<code>F2</code>或<code>F12</code>打开开发者工具。</p>\n<h3 id=\"dingtalk-design-cli\"><a href=\"#dingtalk-design-cli\" class=\"headerlink\" title=\"dingtalk-design-cli\"></a>dingtalk-design-cli</h3><p><a href=\"https://open.dingtalk.com/document/resourcedownload/local-development-tools-for-microapplications\">dingtalk-design-cli</a>是钉钉开放平台新推出的H5微应用本地开发工具，开发者通过这个工具可以做到在Web浏览器中调试H5微应用和JSAPI，像开发一个普通H5应用一样开发钉钉H5微应用。</p>\n<p>首先安装dingtalk-design-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i dingtalk-design-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>以开发模式运行网页</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npx react-scripts start</span><br></pre></td></tr></table></figure>\n\n<p>在网页目录下新建<a href=\"https://open.dingtalk.com/document/resourcedownload/configuration-description\"><code>ding.config.json</code></a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;h5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typescript&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;base&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后以指定targetH5Url模式运行ding</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ding dev web --targetH5Url http://127.0.0.1:3000</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong><br>要先将<code>http://127.0.0.1:3000</code>填入对应企业的微应用的应用首页地址中。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>钉钉官方提供了统一的<a href=\"https://open.dingtalk.com/document/resourcedownload/download-server-sdk\">SDK</a>，使用SDK可以便捷地调用<a href=\"https://open.dingtalk.com/document/orgapp-server/api-overview\">服务端API</a>。</p>\n<p><a href=\"https://open.dingtalk.com/document/resourcedownload/api-explorer\">API Explorer</a>是一款可视化的<a href=\"https://open-dev.dingtalk.com/apiExplorer\">API在线调试工具</a>，集成了API总览、快速检索、开发文档、可视化调试、同步动态生成可执行SDK Demo代码，功能丰富、简单易用。可以在API Explorer中查看Demo代码，来了解SDK的用法。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"在线画流程图","url":"/blog/2023/02/08/diagram-online/","content":"<h2 id=\"draw-io\"><a href=\"#draw-io\" class=\"headerlink\" title=\"draw.io\"></a>draw.io</h2><p>首先是鼎鼎大名的开源项目：<a href=\"https://github.com/jgraph/drawio\">draw.io</a>。</p>\n<p>它的在线画图网站<a href=\"https://draw.io/\">draw.io</a>由官方JGraph Ltd运营，现已改名为<a href=\"https://www.diagrams.net/\">diagrams.net</a>。</p>\n<h2 id=\"飞书\"><a href=\"#飞书\" class=\"headerlink\" title=\"飞书\"></a>飞书</h2><p><a href=\"https://www.feishu.cn/\">飞书</a>可以直接<a href=\"https://www.feishu.cn/hc/zh-CN/articles/980918978289\">在文档中绘制流程图和UML图</a>，飞书的画图功能是<a href=\"https://www.feishu.cn/hc/zh-CN/articles/980918978289#tabs0|lineguid-RYf61p\">基于开源draw.io二次开发</a>的。</p>\n<h2 id=\"zenuml\"><a href=\"#zenuml\" class=\"headerlink\" title=\"zenuml\"></a>zenuml</h2><p><a href=\"https://app.zenuml.com/\">zenuml</a>可以直接从代码生成UML图，很方便。</p>\n<p>类图的cheat sheet可以去<a href=\"https://en.wikipedia.org/wiki/Class_diagram\">wiki</a>看。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"在vscode中关掉对一段代码的格式化","url":"/blog/2023/04/04/disable-formatting-code-region-in-vscode/","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>在vscode的github项目，也有人提出了<a href=\"https://github.com/microsoft/vscode/issues/33772\">这个需求</a>。</p>\n<p>因为vscode默认只提供ts和js的格式化工具，所以被移到了typescript项目的<a href=\"https://github.com/microsoft/TypeScript/issues/18261\">issue</a>。</p>\n<p>最后官方也没给出解决方法，截止到目前，issue仍然是打开状态。</p>\n<h2 id=\"第三方代码格式化工具\"><a href=\"#第三方代码格式化工具\" class=\"headerlink\" title=\"第三方代码格式化工具\"></a>第三方代码格式化工具</h2><p>众多第三方代码格式化工具都提供了保留代码格式的指令，比如<a href=\"https://github.com/beautify-web/js-beautify#preserve-directive\">js-beautify</a>、<a href=\"https://prettier.io/docs/en/ignore.html\">prettier</a>。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>有一个网友提供了vscode插件<a href=\"https://marketplace.visualstudio.com/items?itemName=zardoy.ts-essential-plugins\">TypeScript Essential Plugins</a>来实现这个功能。</p>\n<p>但这个插件还掺杂着很多其它功能，有时间可以自己写一个单一功能的插件。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["vscode"]},{"title":"dotnet build和msbuild的区别","url":"/blog/2022/12/09/dotnet-build-vs-msbuild/","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近在开发vsto的excel插件，在vs里可以正常编译，但使用<a href=\"https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build\">dotnet build</a>会报下面这个错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MSBuild version 17.4.0+18d5aef85 for .NET</span><br><span class=\"line\">  正在确定要还原的项目…</span><br><span class=\"line\">  所有项目均是最新的，无法还原。</span><br><span class=\"line\">F:\\ExcelAddin.csproj(333,3): error MSB4019: 找不到导入的项目“C:\\Program Files\\dotnet\\sdk\\7.0.100\\Microsoft\\VisualStudio\\v17.0\\OfficeTools\\Microsoft.</span><br><span class=\"line\">VisualStudio.Tools.Office.targets”。请确认 Import 声明“C:\\Program Files\\dotnet\\sdk\\7.0.100\\Microsoft\\VisualStudio\\v17.0\\OfficeTools\\Microsoft.VisualStudio.Tools.Office.targets”中的表达式正确，且文件位于磁盘上 。</span><br><span class=\"line\"></span><br><span class=\"line\">生成失败。</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\ExcelAddin.csproj(333,3): error MSB4019: 找不到导入的项目“C:\\Program Files\\dotnet\\sdk\\7.0.100\\Microsoft\\VisualStudio\\v17.0\\OfficeTools\\Microsoft.</span><br><span class=\"line\">VisualStudio.Tools.Office.targets”。请确认 Import 声明“C:\\Program Files\\dotnet\\sdk\\7.0.100\\Microsoft\\VisualStudio\\v17.0\\OfficeTools\\Microsoft.VisualStudio.Tools.Office.targets”中的表达式正确，且文件位于磁盘上 。</span><br><span class=\"line\">    0 个警告</span><br><span class=\"line\">    1 个错误</span><br><span class=\"line\"></span><br><span class=\"line\">已用时间 00:00:00.77</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"猜想\"><a href=\"#猜想\" class=\"headerlink\" title=\"猜想\"></a>猜想</h2><p>检查了下csproj，发现这么一段：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Include additional build rules for an Office application add-in. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">&quot;$(VSToolsPath)\\OfficeTools\\Microsoft.VisualStudio.Tools.Office.targets&quot;</span> <span class=\"attr\">Condition</span>=<span class=\"string\">&quot;&#x27;$(VSToolsPath)&#x27; != &#x27;&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>VSToolsPath</code>在csproj上面有定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">VisualStudioVersion</span> <span class=\"attr\">Condition</span>=<span class=\"string\">&quot;&#x27;$(VisualStudioVersion)&#x27; == &#x27;&#x27;&quot;</span>&gt;</span>10.0<span class=\"tag\">&lt;/<span class=\"name\">VisualStudioVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">VSToolsPath</span> <span class=\"attr\">Condition</span>=<span class=\"string\">&quot;&#x27;$(VSToolsPath)&#x27; == &#x27;&#x27;&quot;</span>&gt;</span>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)<span class=\"tag\">&lt;/<span class=\"name\">VSToolsPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么问题很明显了，在dotnet build和msbuild的不同环境下，<code>MSBuildExtensionsPath32</code>变量的值不一样。<br>我们可以使用<code>Message</code>输出变量来验证。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>在csproj的Project根节点下添加一个<code>Target</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">ToolsVersion</span>=<span class=\"string\">&quot;16.0&quot;</span> <span class=\"attr\">DefaultTargets</span>=<span class=\"string\">&quot;Build&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Target</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PrintLog&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Message</span> <span class=\"attr\">Text</span>=<span class=\"string\">&#x27;MSBuildExtensionsPath=&quot;$(MSBuildExtensionsPath)&quot;&#x27;</span> <span class=\"attr\">Importance</span>=<span class=\"string\">&quot;high&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Message</span> <span class=\"attr\">Text</span>=<span class=\"string\">&#x27;MSBuildExtensionsPath32=&quot;$(MSBuildExtensionsPath32)&quot;&#x27;</span> <span class=\"attr\">Importance</span>=<span class=\"string\">&quot;high&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动<a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell\">Visual Studio Developer Powershell</a>，使用msbuild运行这个<code>Target</code>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> &gt; msbuild ExcelAddin.csproj /t:PrintLog</span><br><span class=\"line\">MSBuild version <span class=\"number\">17.4</span>.<span class=\"number\">0</span>+<span class=\"number\">18</span>d5aef85 <span class=\"keyword\">for</span> .NET Framework</span><br><span class=\"line\">生成启动时间为 <span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">9</span> <span class=\"number\">15</span>:<span class=\"number\">50</span>:<span class=\"number\">26</span>。</span><br><span class=\"line\">项目“F:\\ExcelAddin.csproj”在节点 <span class=\"number\">1</span> 上(PrintLog 个目标)。</span><br><span class=\"line\">PrintLog:</span><br><span class=\"line\">  MSBuildExtensionsPath=<span class=\"string\">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild&quot;</span></span><br><span class=\"line\">  MSBuildExtensionsPath32=<span class=\"string\">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild&quot;</span></span><br><span class=\"line\">已完成生成项目“F:\\ExcelAddin.csproj”(PrintLog 个目标)的操作。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">已成功生成。</span><br><span class=\"line\">    <span class=\"number\">0</span> 个警告</span><br><span class=\"line\">    <span class=\"number\">0</span> 个错误</span><br><span class=\"line\"></span><br><span class=\"line\">已用时间 <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00.23</span></span><br></pre></td></tr></table></figure>\n\n<p>再使用dotnet build验证一遍。<br>但要注意，需要先将csproj修复，最简单的办法是先注释掉<code>Import Project=&quot;$(VSToolsPath)\\OfficeTools\\Microsoft.VisualStudio.Tools.Office.targets&quot;</code>。<br>顺带一提，<code>dotnet build</code>等效于<code>dotnet msbuild --restore</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; dotnet msbuild --target:PrintLog</span><br><span class=\"line\">MSBuild version 17.4.0+18d5aef85 <span class=\"keyword\">for</span> .NET</span><br><span class=\"line\">  MSBuildExtensionsPath=<span class=\"string\">&quot;C:\\Program Files\\dotnet\\sdk\\7.0.100\\&quot;</span></span><br><span class=\"line\"><span class=\"string\">  MSBuildExtensionsPath32=&quot;</span>C:\\Program Files\\dotnet\\sdk\\7.0.100<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>验证了我们的猜测，在<code>dotnet build</code>和msbuild的不同环境下，属性是不相同的。</p>\n<h2 id=\"修改环境变量\"><a href=\"#修改环境变量\" class=\"headerlink\" title=\"修改环境变量\"></a>修改环境变量</h2><p>我们试试强行修改<code>dotnet build</code>的环境变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; dotnet msbuild -property:MSBuildExtensionsPath32=<span class=\"string\">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild&quot;</span></span><br></pre></td></tr></table></figure>\n<p>仍然报错，错误信息比较多，这里只列出第一个：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\dotnet\\sdk\\7.0.100\\Microsoft.Common.CurrentVersion.targets(2352,5): warning MSB3245: 未能解析此引用。未能找到程序集“Microsoft.Office.Tools.v4.0.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b</span><br><span class=\"line\">03f5f7f11d50a3a, processorArchitecture=MSIL”。请检查磁盘上是否存在该程序集。 如果您的代码需要此引用，则可能出现编译错误。 </span><br><span class=\"line\">[F:\\ExcelAddin.csproj]</span><br></pre></td></tr></table></figure>\n\n<p>很明显这个错误是<code>Microsoft.Office.Tools</code>等依赖带来的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Reference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Office.Tools.v4.0.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Private</span>&gt;</span>False<span class=\"tag\">&lt;/<span class=\"name\">Private</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Reference</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Reference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.Tools.Applications.Runtime, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Private</span>&gt;</span>False<span class=\"tag\">&lt;/<span class=\"name\">Private</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Reference</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Reference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Office.Tools, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Private</span>&gt;</span>False<span class=\"tag\">&lt;/<span class=\"name\">Private</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Reference</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Reference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Office.Tools.Common, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Private</span>&gt;</span>False<span class=\"tag\">&lt;/<span class=\"name\">Private</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Reference</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Reference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Office.Tools.Excel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Private</span>&gt;</span>False<span class=\"tag\">&lt;/<span class=\"name\">Private</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Reference</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Visual Studio环境下，这些包都内置了。而在dotnet build环境下，找不到这些包。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>开发vsto这种特异性的应用没办法使用通用的dotnet工具，老老实实的用msbuild吧。这里有<a href=\"https://github.com/CZEMacLeod/MSBuild.SDK.SystemWeb/issues/1#issuecomment-809105083\">另一个例子</a>。</p>\n<p>另外，如果想使用vscode写代码，也需要特别配置一下C#插件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;omnisharp.useModernNet&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>否则<a href=\"https://github.com/OmniSharp/omnisharp-roslyn\">OmniSharp server</a>会使用dotnet环境，导致无法正常工作。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"从微软官方下载windows镜像文件","url":"/blog/2023/02/14/download-win10-iso/","content":"<p>微软在<a href=\"https://www.microsoft.com/zh-cn/software-download\">软件下载页面</a>提供了windows各个版本的下载。</p>\n<p><a href=\"https://support.microsoft.com/zh-cn/windows/windows-7-%E6%94%AF%E6%8C%81%E4%BA%8E-2020-%E5%B9%B4-1-%E6%9C%88-14-%E6%97%A5%E7%BB%88%E6%AD%A2-b75d4580-2cc7-895a-2c9c-1466d9a53962\">Win7的支持已经于2020年1月14日终止</a>，<a href=\"https://learn.microsoft.com/zh-cn/lifecycle/products/windows-7\">不再支持下载</a>。</p>\n<p>Win8.1提供了直接的<a href=\"https://www.microsoft.com/zh-cn/software-download/windows8ISO\">ISO下载链接</a>。</p>\n<p>Win11提供了<a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">多种下载方式</a>，包括媒体创建工具和ISO直接下载。</p>\n<p>Win10的ISO则需要使用<a href=\"https://www.microsoft.com/zh-cn/software-download/windows10\">下载页面</a>提供的媒体创建工具来下载。</p>\n<p>运行<a href=\"https://go.microsoft.com/fwlink/?LinkId=691209\">媒体创建工具</a>后，先选择<code>为另一台电脑创建安装介质（U盘、DVD或ISO文件）</code>。</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/create-installtion-media.png\" class=\"\" title=\"创建安装介质\">\n\n<p>然后选择系统版本</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/select-edition.png\" class=\"\" title=\"选择系统版本\">\n\n<p>再选择直接烧录到U盘，还是下载ISO文件</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/select-media.png\" class=\"\" title=\"下载ISO文件\">\n\n<p>最后选择ISO文件的下载位置就开始下载了。</p>\n<p>这样下载到的是当前最新发行版的win10 ISO。</p>\n<p>预览版可以在<a href=\"https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewiso\">这里</a>下载。</p>\n<p>如果想下载老版本的ISO，微软是不提供的，只能查看到<a href=\"https://learn.microsoft.com/zh-cn/windows/release-health/release-information\">Windows 10版本信息</a>。</p>\n<p>幸好下载老版本的ISO有个利器，还记得烧录工具<a href=\"https://rufus.ie/zh/\">Rufus</a>么？它就藏着老版本ISO的下载链接。</p>\n<p>打开rufus后，选择下载并再次点击下载按钮。</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/rufus-download.png\" class=\"\" title=\"下载镜像文件\">\n\n<p>在下载完系统列表后，会弹出操作系统选择。</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/rufus-select-system.png\" class=\"\" title=\"选择系统\">\n\n<p>选择发行版本</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/rufus-select-edition.png\" class=\"\" title=\"选择版本\">\n\n<p>再选择架构和语言，就可以开启下载</p>\n<img src=\"/blog/2023/02/14/download-win10-iso/rufus-start-downloading.png\" class=\"\" title=\"开始下载\">\n\n<p>最后就能得到微软隐藏的下载链接，比如<a href=\"https://software.download.prss.microsoft.com/dbazure/Win10_21H2_Chinese(Simplified)_x64.iso?t=356cd95e-b39a-46e0-b728-541367e165b8&e=1676444450&h=83c1f33ebb4935587cab6ef16fa1b5c1f29fbf213be4c72db592a88b8c64d746\">Win10_21H2_Chinese</a>。</p>\n<p>尽量使用下载工具或挂代理下载，直连相当不稳定。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"serctl下载站","url":"/blog/2023/02/07/download-with-serctl/","content":"<p><a href=\"https://d.serctl.com/\">https://d.serctl.com/</a> 是一个离线下载网站，使用方法很简单：</p>\n<img src=\"/blog/2023/02/07/download-with-serctl/tutorial.gif\" class=\"\" title=\"使用方法\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"下载番剧","url":"/blog/2023/06/29/downloading-bangumi/","content":"<h2 id=\"蜜柑计划\"><a href=\"#蜜柑计划\" class=\"headerlink\" title=\"蜜柑计划\"></a><a href=\"https://mikanani.me/\">蜜柑计划</a></h2><p>基于动漫化园的数据，重新设计的UI，极大改善了体验，且可直连，推荐这个。</p>\n<h2 id=\"动漫花园\"><a href=\"#动漫花园\" class=\"headerlink\" title=\"动漫花园\"></a><a href=\"https://dmhy.org/\">动漫花园</a></h2><p>大概是最大的中文动漫BT站点，应该需要翻墙，懒得确认了。</p>\n<h2 id=\"nyaa\"><a href=\"#nyaa\" class=\"headerlink\" title=\"nyaa\"></a><a href=\"https://nyaa.si/\">nyaa</a></h2><p>新番老番资源齐全，全球最大的动漫BT下载站点。需要翻墙访问。</p>\n<p>中文搜索不友好，资源标题几乎全是英文，搜索资源时尽量使用番剧的英文名或罗马音。</p>\n<h1 id=\"东京图书馆\"><a href=\"#东京图书馆\" class=\"headerlink\" title=\"东京图书馆\"></a><a href=\"https://www.tokyotosho.info/\">东京图书馆</a></h1><p>很老牌的网站了，适用找老番。</p>\n<p>对中文搜索也不友好。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"下载电影","url":"/blog/2023/03/15/downloading-movie/","content":"<h2 id=\"Grab4K\"><a href=\"#Grab4K\" class=\"headerlink\" title=\"Grab4K\"></a><a href=\"https://www.grab4k.net/\">Grab4K</a></h2><p>无广告。需注册。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/grab4k.png\" class=\"\" title=\"Grab4K\">\n\n<h2 id=\"片库\"><a href=\"#片库\" class=\"headerlink\" title=\"片库\"></a><a href=\"https://www.pkmp4.com/\">片库</a></h2><p>有广告。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/pkmp4.png\" class=\"\" title=\"片库\">\n\n<h2 id=\"布谷TV\"><a href=\"#布谷TV\" class=\"headerlink\" title=\"布谷TV\"></a><a href=\"https://www.bugutv.net/\">布谷TV</a></h2><p>无广告。高清资源需积分。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/bugutv.png\" class=\"\" title=\"布谷TV\">\n\n<h2 id=\"4K圈\"><a href=\"#4K圈\" class=\"headerlink\" title=\"4K圈\"></a><a href=\"http://www.4kquan.com/\">4K圈</a></h2><p>需注册。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/4kquan.png\" class=\"\" title=\"4K圈\">\n\n<h2 id=\"BTNull\"><a href=\"#BTNull\" class=\"headerlink\" title=\"BTNull\"></a><a href=\"https://www.btnull.org/\">BTNull</a></h2><p>有广告。需注册。</p>\n<p>感觉和片库的内容是一样的。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/btnull.png\" class=\"\" title=\"BTNull\">\n\n<h2 id=\"RARBG\"><a href=\"#RARBG\" class=\"headerlink\" title=\"RARBG\"></a><a href=\"https://rarbg.to/\">RARBG</a></h2><p><a href=\"https://en.wikipedia.org/wiki/RARBG\">RARBG</a>最近几年一直在<a href=\"https://torrentfreak.com/\">TorrentFreak</a>的<a href=\"https://torrentfreak.com/top-torrent-sites/\">Top 10 Torrent Sites</a>里。<br>能够看得了生肉，或者愿意折腾字幕可以上这里。</p>\n<img src=\"/blog/2023/03/15/downloading-movie/rarbg.png\" class=\"\" title=\"RARBG\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"elasticsearch在docker中的堆内存大小设置","url":"/blog/2021/12/21/elasticsearch-heap-size/","content":"<p>首先查找<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-set-heap-size\">官方文档</a>，es默认的jvm堆内存大小是docker容器分配内存的一半。</p>\n<p>在我机器上docker容器使用的内存上限是24.99G，es当仁不让的用掉了一半，再加上其它内存使用，便高达13G。</p>\n<p>查看内存设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; docker stats</span><br><span class=\"line\">CONTAINER ID   NAME                                CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O   PIDS</span><br><span class=\"line\">daf5ca2e87dc   elasticsearch                       0.79%     13.33GiB / 24.99GiB   3.31%     45.2MB / 281kB    0B / 0B     88</span><br></pre></td></tr></table></figure>\n\n<p>要修改它有三个方法：</p>\n<ol>\n<li><p>设置docker容器内存上限</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run `</span><br><span class=\"line\">  <span class=\"literal\">-d</span> `</span><br><span class=\"line\">  <span class=\"literal\">--name</span> elasticsearch `</span><br><span class=\"line\">  <span class=\"literal\">-p</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9200</span>:<span class=\"number\">9200</span> <span class=\"literal\">-p</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9300</span>:<span class=\"number\">9300</span> `</span><br><span class=\"line\">  <span class=\"literal\">--memory</span>=<span class=\"string\">&quot;1g&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">--memory-swap</span>=<span class=\"string\">&quot;1g&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-e</span> <span class=\"string\">&quot;discovery.type=single-node&quot;</span> `</span><br><span class=\"line\">  docker.elastic.co/elasticsearch/elasticsearch:<span class=\"number\">7.16</span>.<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用环境变量</p>\n</li>\n</ol>\n<p>这种方式会覆盖掉JVM Options，不建议使用在发布环境下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  --name elasticsearch \\</span><br><span class=\"line\">  -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;discovery.type=single-node&quot;</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span> \\</span><br><span class=\"line\">  docker.elastic.co/elasticsearch/elasticsearch:7.16.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用jvm.options.d</li>\n</ol>\n<p>在容器中放一个<code>jvm.options</code>设置文件在<code>/usr/share/elasticsearch/config/jvm.options.d</code>目录，设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-Xms1g</span><br><span class=\"line\">-Xmx1g</span><br></pre></td></tr></table></figure>\n<p>来控制内存。</p>\n<p>但elasticsearch的docker image没有使用服务，而是在启动时就直接运行bin&#x2F;elasticsearch，所以无法重启服务让新设置生效和，需要bind mount <code>jvm.options.d</code>创建新容器来达成目的。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run `</span><br><span class=\"line\">  <span class=\"literal\">-d</span> `</span><br><span class=\"line\">  <span class=\"literal\">--name</span> elasticsearch `</span><br><span class=\"line\">  <span class=\"literal\">-p</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9200</span>:<span class=\"number\">9200</span> <span class=\"literal\">-p</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9300</span>:<span class=\"number\">9300</span> `</span><br><span class=\"line\">  <span class=\"literal\">--mount</span> <span class=\"built_in\">type</span>=bind,source=<span class=\"variable\">$PWD</span>/jvm.options.d,target=/usr/share/elasticsearch/config/jvm.options.d `</span><br><span class=\"line\">  <span class=\"literal\">-e</span> <span class=\"string\">&quot;discovery.type=single-node&quot;</span> `</span><br><span class=\"line\">  docker.elastic.co/elasticsearch/elasticsearch:<span class=\"number\">7.16</span>.<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong><br>如果host的<code>./jvm.options</code>不存在，docker会创建一个名为<code>jvm.options</code>的空目录，并不会运行报错。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker","elasticsearch"]},{"title":"在win10开启Administrator账户","url":"/blog/2023/01/05/enable-administrator-account-on-win10/","content":"<p>Win10默认禁用了Administrator账户，需要手动开启。</p>\n<h2 id=\"方法一：命令行\"><a href=\"#方法一：命令行\" class=\"headerlink\" title=\"方法一：命令行\"></a>方法一：命令行</h2><p><a href=\"https://learn.microsoft.com/en-us/troubleshoot/windows-server/shell-experience/use-run-as-start-app-admin\">以管理员身份运行</a>命令行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; net user administrator /active:<span class=\"built_in\">yes</span></span><br><span class=\"line\">The <span class=\"built_in\">command</span> completed successfully.</span><br></pre></td></tr></table></figure>\n<p>即可开启。</p>\n<p>注销或锁定后，可以看到增加了Administrator账户。</p>\n<h2 id=\"方法二：在计算机管理中操作\"><a href=\"#方法二：在计算机管理中操作\" class=\"headerlink\" title=\"方法二：在计算机管理中操作\"></a>方法二：在计算机管理中操作</h2><p>使用<code>Win+X组合键</code>或右键点击<code>Win10开始按钮</code>，呼出<a href=\"https://learn.microsoft.com/en-us/shows/inside/windows-x-menu\">Windows-X-Menu</a>，打开<code>计算机管理(Computer Manager)</code>。</p>\n<p>也可在资源管理器右键<code>此电脑</code>，再选择<code>管理(G)</code>进入。</p>\n<p>进入<code>系统工具（System Tools)</code>-<code>本地用户和组(Local Users and Groups)</code>-<code>用户(Users)</code>，双击Administrator，取消禁用。</p>\n<img src=\"/blog/2023/01/05/enable-administrator-account-on-win10/enable-administrator.png\" class=\"\" title=\"开启Administrator账户\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"windows下的time命令","url":"/blog/2022/11/10/equivalent-of-time-command-on-windows/","content":"<p>linux下有一个很方便的命令可以查看任务耗时：<code>time docker-compose build</code>，其实windows下也有类似的工具：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Measure-Command</span> &#123;docker<span class=\"literal\">-compose</span> build | <span class=\"built_in\">Out-Default</span>&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"上市公司信息披露查询","url":"/blog/2020/12/02/fixed-listed-disclosure/","content":"<p>上市公司信息披露的内容和格式可以在<a href=\"http://www.csrc.gov.cn/pub/zjhpublic/index.htm?channel=3300/3302\">证监会网站</a>上找到。</p>\n<p>而具体的上市公司定期财报可以分别在<a href=\"http://www.sse.com.cn/disclosure/listedinfo/regular/\">上交所网站</a>，<a href=\"http://www.szse.cn/disclosure/listed/fixed/index.html\">深交所网站</a>和<a href=\"http://www.bse.cn/disclosure/announcement.html\">北交所</a>很方便的搜索到。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"windows下清理硬盘空间","url":"/blog/2021/11/11/free-up-drive-space-on-windows/","content":"<p>一般说到硬盘空间不足，第一个想到的就是使用windows自带的<code>磁盘清理</code>了。微软也帮我们整理了<a href=\"https://support.microsoft.com/en-us/windows/tips-to-free-up-drive-space-on-your-pc-4d97fc4a-0175-8d49-ac2f-bcf27de46d34\">一套攻略</a>。</p>\n<p>步骤为：</p>\n<ul>\n<li>搜索<code>磁盘清理(disk clean)</code>，<code>以管理员身份运行</code>磁盘清理(%windir%\\system32\\cleanmgr.exe)，然后选择你想要清理的分区</li>\n<li>上面这步也可以从资源管理器-&gt;右键点击分区盘符-&gt;属性-&gt;磁盘清理这个路径来进入</li>\n<li>如果没有<code>以管理员身份运行</code>，需要再次进入<code>清理系统文件</code></li>\n<li>通常这里会有2个大东西可以删除，分别是：老的windows和windows更新清理</li>\n</ul>\n<p>但上面这个不是我要推荐的重点，我要推荐的工具叫<a href=\"https://www.jam-software.com/treesize_free\">TreeSize Free</a>。</p>\n<p>它可以将我们硬盘中所有文件夹扫描出来，以大小排序。这样非常方便查看空间被哪个目录给占用了，可以有针对性的处理。</p>\n<p>重要的是，免费版的功能就已经足够，而且绝不逼逼让人付费。</p>\n<img src=\"/blog/2021/11/11/free-up-drive-space-on-windows/TreeSizeFree-Columns-View.png\" class=\"\" title=\"文件树\">\n\n<img src=\"/blog/2021/11/11/free-up-drive-space-on-windows/TreeSizeFree_0.png\" class=\"\" title=\"图形化\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"小升初学区房","url":"/blog/2019/12/26/from-primary-to-secondary/","content":"<h2 id=\"招生地段公示\"><a href=\"#招生地段公示\" class=\"headerlink\" title=\"招生地段公示\"></a>招生地段公示</h2><p>首先去<a href=\"http://www.pudong.gov.cn/jyj/\">上海浦东教育局</a>下载告示文件。</p>\n<p>路径是先<a href=\"http://www.pudong.gov.cn/shpd/department/019020/019020004/019020004002/\">招生考试</a>，</p>\n<img src=\"/blog/2019/12/26/from-primary-to-secondary/jyj.jpg\" class=\"\" title=\"招生考试\">\n\n<p>然后再<a href=\"http://www.pudong.gov.cn/shpd/department/019020/019020004/019020004004/\">义务教育</a>。</p>\n<img src=\"/blog/2019/12/26/from-primary-to-secondary/compulsory.jpg\" class=\"\" title=\"义务教育\">\n\n<p>通常在每年的3月份左右，教育局会进行招生公示。</p>\n<img src=\"/blog/2019/12/26/from-primary-to-secondary/district.jpg\" class=\"\" title=\"招生公示\">\n\n<p>下载招生地段公示。</p>\n<img src=\"/blog/2019/12/26/from-primary-to-secondary/download.jpg\" class=\"\" title=\"招生地段公示\">\n\n<p>文件格式如下：</p>\n<img src=\"/blog/2019/12/26/from-primary-to-secondary/format.jpg\" class=\"\" title=\"文件格式\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["life"]},{"title":"frp","url":"/blog/2022/07/27/frp/","content":"<p>内网穿透就是将内网服务暴露到公网可访问，适用于没有公网IP的家庭或企业。</p>\n<p>比较著名的开源实现有：</p>\n<ul>\n<li><a href=\"https://github.com/inconshreveable/ngrok\">ngrok</a></li>\n<li><a href=\"https://github.com/fatedier/frp\">frp</a></li>\n<li><a href=\"https://github.com/cnlh/nps\">nps</a></li>\n</ul>\n<p>其中，ngrok提供了免费的服务器，可供测试或临时使用。<br>nps最全面，适合二次开发，提供给多个租户使用。<br>而frp使用极其简单，非常适合个人用者。</p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>frp由客户端和服务端构成，每个端分别有一个可执行文件，和一个配置文件。完了。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载<a href=\"https://github.com/fatedier/frp/releases\">对应的可执行文件包</a>，linux可使用<code>uname -m</code>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf ./frp_0.44.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改frp下的<code>fps.ini</code>，一般只需要两个端口就完事。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">7000</span> </span><br><span class=\"line\"><span class=\"attr\">vhost_bind_port</span> = <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在linux下使用systemd配置服务\"><a href=\"#在linux下使用systemd配置服务\" class=\"headerlink\" title=\"在linux下使用systemd配置服务\"></a>在linux下<a href=\"https://gofrp.org/docs/setup/systemd/\">使用systemd配置服务</a></h3><p>在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下添加frp.service：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"comment\"># 服务名称，可自定义</span></span><br><span class=\"line\"><span class=\"attr\">Description</span> = frp server</span><br><span class=\"line\"><span class=\"attr\">After</span> = network.target syslog.target</span><br><span class=\"line\"><span class=\"attr\">Wants</span> = network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span> = simple</span><br><span class=\"line\"><span class=\"comment\"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class=\"line\"><span class=\"attr\">ExecStart</span> = /root/frp_0.<span class=\"number\">44.0</span>_linux_amd64/frps -c  /root/frp_0.<span class=\"number\">44.0</span>_linux_amd64/frps.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span> = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>开启服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start frps</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> frps</span><br></pre></td></tr></table></figure>\n\n<p>查看服务状态和日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status frps</span><br><span class=\"line\"></span><br><span class=\"line\">journalctl -u frps -b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>穿透web服务搭配nginx反向代理食用最佳。注意<code>http://127.0.0.1:8080</code>中的8080就是上面的vhost_bind_port。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name   *.frp.yourdomain.com;</span><br><span class=\"line\">    listen        80;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        proxy_set_header  X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;        </span><br><span class=\"line\">        proxy_pass        http://127.0.0.1:8080;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改frpc.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = x.x.x.x</span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[jellyfin]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">8096</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = jellyfin.frp.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[luci]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = luci.frp.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[aria2]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">6800</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = aria2.frp.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[clash]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">9090</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = clash.frp.yourdomain.com</span><br></pre></td></tr></table></figure>\n\n<p>注意像<code>[jellyfin]</code>这样的名字不要有重复，会被当作ID使用。</p>\n<h3 id=\"ssh服务\"><a href=\"#ssh服务\" class=\"headerlink\" title=\"ssh服务\"></a>ssh服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 内网用户名@x.x.x.x -p 6000</span><br><span class=\"line\">输入内网用户密码: </span><br></pre></td></tr></table></figure>\n\n<p>frps在接收到客户端的<code>remote_port = 6000</code>后就会代理6000端口，于是可以使用ssh直接登录内网机器。</p>\n<h3 id=\"ariang\"><a href=\"#ariang\" class=\"headerlink\" title=\"ariang\"></a>ariang</h3><p>需要修改ariang的rpc地址，把默认的<code>http://$&#123;host&#125;:6800/jsonrpc</code>改成<code>http://aria2.frp.yourdomain.com:80/jsonrpc</code>才能使用。</p>\n<h3 id=\"使用docker\"><a href=\"#使用docker\" class=\"headerlink\" title=\"使用docker\"></a>使用docker</h3><p>在本地创建<code>frpc.ini</code>，比如<code>f:/frp/frpc.ini</code>。</p>\n<p>然后使用<a href=\"https://github.com/stilleshan/frpc\">第三方docker image</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name=frpc --restart=always -v f:/frp/frpc.ini:/frp/frpc.ini stilleshan/frpc</span><br></pre></td></tr></table></figure>\n\n<p>修改配置则需要重启docker：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart frpc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"openclash\"><a href=\"#openclash\" class=\"headerlink\" title=\"openclash\"></a>openclash</h3><p>需要修改openclash控制台的连接设置，默认是：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host: 192.168.8.1</span><br><span class=\"line\">端口: 9090</span><br><span class=\"line\">密钥：123456</span><br></pre></td></tr></table></figure>\n\n<p>需要修改为：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host: clash.frp.yourdomain.com</span><br><span class=\"line\">端口: 80</span><br><span class=\"line\">密钥：123456</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"使用日本代理后谷歌搜索结果一堆日文","url":"/blog/2022/06/21/google-search-behind-a-proxy/","content":"<p>除了使用英文国家的代理，我们还可能使用日本韩国等非英语国家，这时谷歌的搜索结果就很难看了，搜索结果里会有一堆看不懂的非英文的内容。</p>\n<p>网上说的什么使用<a href=\"https://google.com.hk/\">香港谷歌</a>，使用<a href=\"https://google.com/ncr\">无国家跳转谷歌</a>呀的方法都无效。</p>\n<p>这里提供两个思路：</p>\n<h2 id=\"在浏览器中给谷歌开放位置权限\"><a href=\"#在浏览器中给谷歌开放位置权限\" class=\"headerlink\" title=\"在浏览器中给谷歌开放位置权限\"></a>在浏览器中给谷歌开放位置权限</h2><p>浏览器默认是不给谷歌开放位置权限的，</p>\n<img src=\"/blog/2022/06/21/google-search-behind-a-proxy/site-permissions.png\" class=\"\" title=\"site-permissions\">\n\n<p>所以谷歌只能根据IP来判断用户所在地区，</p>\n<img src=\"/blog/2022/06/21/google-search-behind-a-proxy/google-japan.png\" class=\"\" title=\"google-japan\">\n\n<p>对搜索结果也就会有影响。</p>\n<img src=\"/blog/2022/06/21/google-search-behind-a-proxy/google-result-japan.png\" class=\"\" title=\"google-result-japan\">\n\n<p>所以我们可以赋予谷歌位置权限，让它能正确的识别出我们所使用的语言。</p>\n<img src=\"/blog/2022/06/21/google-search-behind-a-proxy/allow-location.png\" class=\"\" title=\"allow-location\">\n\n<h2 id=\"使用搜索参数\"><a href=\"#使用搜索参数\" class=\"headerlink\" title=\"使用搜索参数\"></a>使用搜索参数</h2><p>在谷歌的<a href=\"https://developers.google.com/custom-search/docs/xml_results#request-parameters\">Programmable Search Engine文档</a>中有提供相应的参数。</p>\n<p>影响搜索结果的显示语言的参数是<a href=\"https://developers.google.com/custom-search/docs/xml_results#interface-languages\"><strong>hl</strong></a>，我们可以在<a href=\"https://developers.google.com/custom-search/docs/xml_results_appendices#interfaceLanguages\">这里</a>找到可用的值。</p>\n<p>另一个和语言有关的参数是<a href=\"https://developers.google.com/custom-search/docs/xml_results#searching-for-documents-written-in-specific-languages\"><strong>lr</strong></a>，如果指定参数，它会过滤网页内容使用的语言。在<a href=\"https://developers.google.com/custom-search/docs/xml_results_appendices#language-collection-values\">这里</a>可以找到可用的值。比如搜索简体和繁体中文的网页内容，可以使用<code>https://google.com/search?hl=zh-CN&amp;lr=lang_zh-TW|lang_zh-CN&amp;c2coff=0</code>。</p>\n<p>综上，我们只需要将搜索引擎的页面改为<code>https://google.com?hl=zh-CN</code>，不管使用的代理IP是哪个国家，搜索结果都不会太受影响。</p>\n<p><strong>示例</strong></p>\n<p>比如在Edge浏览器中，我们可以基于<a href=\"https://docs.microsoft.com/en-us/deployedge/microsoft-edge-policies#defaultsearchprovidersearchurl\">内置的谷歌搜索引擎URL</a>改写为<br><code>&#123;google:baseURL&#125;search?q=%s&amp;&#123;google:RLZ&#125;&#123;google:originalQueryForSuggestion&#125;&#123;google:assistedQueryStats&#125;&#123;google:searchboxStats&#125;&#123;google:searchFieldtrialParameter&#125;&#123;google:iOSSearchLanguage&#125;&#123;google:prefetchSource&#125;&#123;google:searchClient&#125;&#123;google:sourceId&#125;&#123;google:contextualSearchVersion&#125;ie=&#123;inputEncoding&#125;&amp;hl=zh-CN</code></p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["proxy"]},{"title":"web阅读器：hectorqin-reader","url":"/blog/2022/11/23/hectorqin-reader/","content":"<p>安卓上的<a href=\"https://github.com/gedoor/legado\">阅读</a>算得上是小说阅读器终结者了，用它搭配上<a href=\"https://gedoor.github.io/blog/tags/%E4%B9%A6%E6%BA%90\">书源</a>，简直横扫一切。</p>\n<p>iOS就没这么好命，从前有<a href=\"https://mp.weixin.qq.com/s/fSvBGlbljxCOcNp3ZbjvVw\">爱阅书香</a>，后来有<a href=\"https://github.com/kaich/Yuedu\">源阅读</a>，现在啥也没。</p>\n<p>但iOS用户永不为奴，办法总比困难多。这不，出现了一作web版的阅读器：<a href=\"https://github.com/hectorqin/reader\">hectorqin-reader</a>。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>直接使用docker-compose启动即可，搭配<a href=\"/blog/2022/07/27/frp/\" title=\"frp\">frp</a>即可实现手机阅读。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">reader:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">hectorqin/reader</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">reader</span> <span class=\"comment\"># 容器名 可自行修改</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">4396</span><span class=\"string\">:8080</span> <span class=\"comment\"># 4396端口映射可自行修改</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">share_net</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./logs:/logs</span> <span class=\"comment\"># log映射目录 /home/reader/logs 映射目录可自行修改</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./storage:/storage</span> <span class=\"comment\"># 数据映射目录 /home/reader/storage 映射目录可自行修改</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SPRING_PROFILES_ACTIVE=prod</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">READER_APP_USERLIMIT=50</span> <span class=\"comment\"># 用户上限,默认50</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">READER_APP_USERBOOKLIMIT=200</span> <span class=\"comment\"># 用户书籍上限,默认200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">READER_APP_CACHECHAPTERCONTENT=true</span> <span class=\"comment\"># 开启缓存章节内容 V2.0</span></span><br><span class=\"line\">      <span class=\"comment\"># 下面都是多用户模式配置</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">READER_APP_SECURE=true</span> <span class=\"comment\"># 开启登录鉴权，开启后将支持多用户模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">READER_APP_SECUREKEY=password</span>  <span class=\"comment\"># 管理员密码  建议修改</span></span><br><span class=\"line\">      <span class=\"comment\"># - READER_APP_INVITECODE=registercode #注册邀请码 建议修改,如不需要可注释或      </span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">share_net:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>用手机访问网址，再导出到“添加到主屏幕”就好啦。</p>\n<p>管理员账号是admin，密码见上面的<code>READER_APP_SECUREKEY</code>环境变量。</p>\n<h2 id=\"书源\"><a href=\"#书源\" class=\"headerlink\" title=\"书源\"></a>书源</h2><ul>\n<li><a href=\"http://yck.mumuceo.com/\">源仓库</a></li>\n</ul>\n<p>源仓库经常因为访问量过大404，404时可以试试<a href=\"http://yckceo.vip/\">备用网址</a>。</p>\n<ul>\n<li><a href=\"https://legado.git.llc/\">legado.git.llc</a></li>\n</ul>\n<p>不知道是不是官方的。</p>\n<ul>\n<li><a href=\"https://github.com/XIU2/Yuedu\">秀儿</a></li>\n</ul>\n<p>网友<code>xiu2</code>整理的书源。</p>\n<h2 id=\"小说下载\"><a href=\"#小说下载\" class=\"headerlink\" title=\"小说下载\"></a>小说下载</h2><p>如果不想在线阅读想全本下载，可以上<a href=\"http://zxcs.me/\">知轩藏书</a>下载txt文件。</p>\n<h2 id=\"出版物下载\"><a href=\"#出版物下载\" class=\"headerlink\" title=\"出版物下载\"></a>出版物下载</h2><p>出版物可以去<a href=\"https://singlelogin.site/\">Z-Library</a>下载，然后上传到<a href=\"https://weread.qq.com/web/upload\">微信读书</a>阅读。</p>\n<p>注意，Z-Library经常被美国搞，所以网址会变，可以去<a href=\"https://zh.wikipedia.org/zh-tw/Z-Library\">维基</a>找最新网址。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"使用pgsql存储层级数据","url":"/blog/2021/07/28/hierarchical-data-in-psql/","content":"<p>首先这个层级数据一定是很小量的数据，如果数据量很大，那必然是每一级一张表，然后做外键。</p>\n<p>假设我们有这样的数据要存入数据库：公司，部门，员工。</p>\n<h2 id=\"nosql\"><a href=\"#nosql\" class=\"headerlink\" title=\"nosql\"></a>nosql</h2><p>如果使用nosql比如mongodb，我们可以把所有数据都存在一个表里。</p>\n<p>定义数据库中的数据类型，数据类型几乎可以与前端保持一致。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Company</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">departments</span>: <span class=\"title class_\">Department</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Department</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">employees</span>: <span class=\"title class_\">Employee</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Employee</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建公司时，只需要做一次插入动作。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">companies</span>: <span class=\"title class_\">Company</span>[] = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;alibaba&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;阿里巴巴&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">departments</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;research-2&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;研发二部&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">employees</span>: [&#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2021123&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;company&#x27;</span>).<span class=\"title function_\">insertMany</span>(companies)</span><br></pre></td></tr></table></figure>\n\n<p>当要修改任何一处数据时，我们都直接更新整个结构的数据。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">updatedCompany</span>: <span class=\"title class_\">Company</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;alibaba&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;阿里巴巴&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">departments</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;research-3&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;研发三部&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">employees</span>: [&#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2021123&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三三&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2021124&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;company&#x27;</span>).<span class=\"title function_\">updateOne</span>(&#123;<span class=\"attr\">id</span>: updatedCompany.<span class=\"property\">id</span>&#125;, &#123;<span class=\"attr\">$set</span>: updatedCompany&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sql\"><a href=\"#sql\" class=\"headerlink\" title=\"sql\"></a>sql</h2><p>但如果使用通用sql，就需要这样做：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> company (</span><br><span class=\"line\">  id      SERIAL,</span><br><span class=\"line\">  name    TEXT,</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> pk_company <span class=\"keyword\">PRIMARY</span> KEY (id)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> department (</span><br><span class=\"line\">  id              SERIAL,</span><br><span class=\"line\">  name            TEXT,</span><br><span class=\"line\">  company_id      <span class=\"type\">INT</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> pk_department <span class=\"keyword\">PRIMARY</span> KEY (id),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> fk_company <span class=\"keyword\">FOREIGN</span> KEY (company_id) <span class=\"keyword\">REFERENCES</span> company(id)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee (</span><br><span class=\"line\">  id              SERIAL,</span><br><span class=\"line\">  name            TEXT,</span><br><span class=\"line\">  department_id   <span class=\"type\">INT</span>,</span><br><span class=\"line\">  company_id      <span class=\"type\">INT</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> pk_employee <span class=\"keyword\">PRIMARY</span> KEY (id),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> fk_department <span class=\"keyword\">FOREIGN</span> KEY (department_id) <span class=\"keyword\">REFERENCES</span> department(id),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> fk_company <span class=\"keyword\">FOREIGN</span> KEY (company_id) <span class=\"keyword\">REFERENCES</span> company(id)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>新建公司时，拿到前端数据后，必须从上到下的创建。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&quot;postgresql://username:password@localhost/testdb&quot;</span>, echo=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> engine.connect() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">    metadata = MetaData()</span><br><span class=\"line\">    company = Table(<span class=\"string\">&#x27;company&#x27;</span>, metadata, autoload_with=engine)</span><br><span class=\"line\">    ins = company.insert().values(name=<span class=\"string\">&#x27;阿里巴巴&#x27;</span>)</span><br><span class=\"line\">    result = conn.execute(ins)</span><br><span class=\"line\">    company_id = result.inserted_primary_key[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    department = Table(<span class=\"string\">&#x27;department&#x27;</span>, metadata, autoload_with=engine)</span><br><span class=\"line\">    ins = department.insert().values(name=<span class=\"string\">&#x27;研发二部&#x27;</span>, company_id=company_id)</span><br><span class=\"line\">    result = conn.execute(ins)</span><br><span class=\"line\">    department_id = result.inserted_primary_key[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    employee = Table(<span class=\"string\">&#x27;employee&#x27;</span>, metadata, autoload_with=engine)</span><br><span class=\"line\">    ins = employee.insert().values(name=<span class=\"string\">&#x27;研发二部&#x27;</span>, company_id=company_id, department_id=department_id)</span><br><span class=\"line\">    result = conn.execute(ins)</span><br><span class=\"line\">    employee_id = result.inserted_primary_key[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>当修改时，也需要从上到下。比如当员工的部门变化时，需要先确保新部门存在，再修改员工记录。</p>\n<p>如果要像mongodb那样一次更新整个结构，可以用一个事务清空再重建。</p>\n<h2 id=\"ltree-extension\"><a href=\"#ltree-extension\" class=\"headerlink\" title=\"ltree extension\"></a><a href=\"https://www.postgresql.org/docs/current/ltree.html\">ltree extension</a></h2><p>ltree是postgresql的一个扩展插件，它提供了一种数据类型<code>ltree</code>来支持树形结构的存储，同时支持基于标签的查询。</p>\n<p>直接上例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION ltree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test (path ltree);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Science&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Science.Astronomy&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Science.Astronomy.Astrophysics&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Science.Astronomy.Cosmology&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Hobbies&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Hobbies.Amateurs_Astronomy&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections.Pictures&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections.Pictures.Astronomy&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections.Pictures.Astronomy.Stars&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections.Pictures.Astronomy.Galaxies&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;Top.Collections.Pictures.Astronomy.Astronauts&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX path_gist_idx <span class=\"keyword\">ON</span> test <span class=\"keyword\">USING</span> GIST (path);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX path_idx <span class=\"keyword\">ON</span> test <span class=\"keyword\">USING</span> BTREE (path);</span><br></pre></td></tr></table></figure>\n\n<p>继承关系：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">ltreetest<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> path <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> path <span class=\"operator\">&lt;</span>@ <span class=\"string\">&#x27;Top.Science&#x27;</span>;</span><br><span class=\"line\">                path</span><br><span class=\"line\"><span class=\"comment\">------------------------------------</span></span><br><span class=\"line\"> Top.Science</span><br><span class=\"line\"> Top.Science.Astronomy</span><br><span class=\"line\"> Top.Science.Astronomy.Astrophysics</span><br><span class=\"line\"> Top.Science.Astronomy.Cosmology</span><br><span class=\"line\">(<span class=\"number\">4</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n\n<p>路径匹配：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">ltreetest<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> path <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> path <span class=\"operator\">~</span> <span class=\"string\">&#x27;*.Astronomy.*&#x27;</span>;</span><br><span class=\"line\">                     path</span><br><span class=\"line\"><span class=\"comment\">-----------------------------------------------</span></span><br><span class=\"line\"> Top.Science.Astronomy</span><br><span class=\"line\"> Top.Science.Astronomy.Astrophysics</span><br><span class=\"line\"> Top.Science.Astronomy.Cosmology</span><br><span class=\"line\"> Top.Collections.Pictures.Astronomy</span><br><span class=\"line\"> Top.Collections.Pictures.Astronomy.Stars</span><br><span class=\"line\"> Top.Collections.Pictures.Astronomy.Galaxies</span><br><span class=\"line\"> Top.Collections.Pictures.Astronomy.Astronauts</span><br><span class=\"line\">(<span class=\"number\">7</span> <span class=\"keyword\">rows</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ltreetest<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> path <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> path <span class=\"operator\">~</span> <span class=\"string\">&#x27;*.!pictures@.*.Astronomy.*&#x27;</span>;</span><br><span class=\"line\">                path</span><br><span class=\"line\"><span class=\"comment\">------------------------------------</span></span><br><span class=\"line\"> Top.Science.Astronomy</span><br><span class=\"line\"> Top.Science.Astronomy.Astrophysics</span><br><span class=\"line\"> Top.Science.Astronomy.Cosmology</span><br><span class=\"line\">(<span class=\"number\">3</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n\n<p>文本搜索：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">ltreetest<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> path <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> path @ <span class=\"string\">&#x27;Astro*% &amp; !pictures@&#x27;</span>;</span><br><span class=\"line\">                path</span><br><span class=\"line\"><span class=\"comment\">------------------------------------</span></span><br><span class=\"line\"> Top.Science.Astronomy</span><br><span class=\"line\"> Top.Science.Astronomy.Astrophysics</span><br><span class=\"line\"> Top.Science.Astronomy.Cosmology</span><br><span class=\"line\"> Top.Hobbies.Amateurs_Astronomy</span><br><span class=\"line\">(<span class=\"number\">4</span> <span class=\"keyword\">rows</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ltreetest<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> path <span class=\"keyword\">FROM</span> test <span class=\"keyword\">WHERE</span> path @ <span class=\"string\">&#x27;Astro* &amp; !pictures@&#x27;</span>;</span><br><span class=\"line\">                path</span><br><span class=\"line\"><span class=\"comment\">------------------------------------</span></span><br><span class=\"line\"> Top.Science.Astronomy</span><br><span class=\"line\"> Top.Science.Astronomy.Astrophysics</span><br><span class=\"line\"> Top.Science.Astronomy.Cosmology</span><br><span class=\"line\">(<span class=\"number\">3</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n\n<p>回到公司部门员工的应用场景。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> employee_ltree (id_path ltree, name_path ltree);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 注意ltree不能用&#x27;-&#x27;，要用&#x27;_&#x27;代替</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee_ltree <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;alibaba.research_2.2021123&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴.研发二部.张三&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee_ltree <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;alibaba.research_2.2021123&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴.研发二部.李四&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee_ltree <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;alibaba.research_3.2021123&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴.研发三部.王五&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> employee_ltree <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;tencent.marketing.199800001&#x27;</span>, <span class=\"string\">&#x27;腾讯.市场部.钱一&#x27;</span>); </span><br></pre></td></tr></table></figure>\n\n<p>查找所有公司</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> subpath(id_path, <span class=\"number\">0</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> id, subpath(name_path, <span class=\"number\">0</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> name <span class=\"keyword\">FROM</span> employee_ltree;</span><br></pre></td></tr></table></figure>\n\n<p>查找研发二部下的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> subpath(id_path, <span class=\"number\">2</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> id, subpath(name_path, <span class=\"number\">2</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> name </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employee_ltree</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> name_path <span class=\"operator\">~</span> <span class=\"string\">&#x27;*.研发二部.*&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>查找alibaba的所有员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> subpath(id_path, <span class=\"number\">2</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> id, subpath(name_path, <span class=\"number\">2</span>, <span class=\"number\">1</span>)::text <span class=\"keyword\">AS</span> name </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employee_ltree</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> id_path <span class=\"operator\">&lt;</span>@ <span class=\"string\">&#x27;alibaba&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a><a href=\"https://www.postgresql.org/docs/current/functions-json.html\">json</a></h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> company (</span><br><span class=\"line\">  id    serial <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  info  json <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>插入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> company (info)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">  (<span class=\"string\">&#x27;&#123;&quot;id&quot;:&quot;alibaba&quot;,&quot;name&quot;:&quot;阿里巴巴&quot;,&quot;departments&quot;:[&#123;&quot;id&quot;:&quot;research-2&quot;,&quot;name&quot;:&quot;研发二部&quot;,&quot;employees&quot;:[&#123;&quot;id&quot;:&quot;2021123&quot;,&quot;name&quot;:&quot;张三&quot;&#125;]&#125;]&#125;&#x27;</span>),</span><br><span class=\"line\">  (<span class=\"string\">&#x27;&#123;&quot;id&quot;:&quot;alibaba&quot;,&quot;name&quot;:&quot;阿里巴巴&quot;,&quot;departments&quot;:[&#123;&quot;id&quot;:&quot;research-2&quot;,&quot;name&quot;:&quot;研发二部&quot;,&quot;employees&quot;:[&#123;&quot;id&quot;:&quot;2021124&quot;,&quot;name&quot;:&quot;李四&quot;&#125;]&#125;]&#125;&#x27;</span>),</span><br><span class=\"line\">  (<span class=\"string\">&#x27;&#123;&quot;id&quot;:&quot;alibaba&quot;,&quot;name&quot;:&quot;阿里巴巴&quot;,&quot;departments&quot;:[&#123;&quot;id&quot;:&quot;research-3&quot;,&quot;name&quot;:&quot;研发三部&quot;,&quot;employees&quot;:[&#123;&quot;id&quot;:&quot;2021125&quot;,&quot;name&quot;:&quot;王五&quot;&#125;]&#125;]&#125;&#x27;</span>),</span><br><span class=\"line\">  (<span class=\"string\">&#x27;&#123;&quot;id&quot;:&quot;tencent&quot;,&quot;name&quot;:&quot;腾讯&quot;,&quot;departments&quot;:[&#123;&quot;id&quot;:&quot;marketing&quot;,&quot;name&quot;:&quot;市场部&quot;,&quot;employees&quot;:[&#123;&quot;id&quot;:&quot;199800001&quot;,&quot;name&quot;:&quot;钱一&quot;&#125;]&#125;]&#125;&#x27;</span>)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>查找阿里巴巴的研发二部的所有员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  json_array_elements(x.department <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;employees&#x27;</span>) <span class=\"operator\">-</span><span class=\"operator\">&gt;&gt;</span> <span class=\"string\">&#x27;id&#x27;</span> <span class=\"keyword\">AS</span> id,</span><br><span class=\"line\">  json_array_elements(x.department <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;employees&#x27;</span>) <span class=\"operator\">-</span><span class=\"operator\">&gt;&gt;</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">AS</span> name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    json_array_elements(info <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;departments&#x27;</span>) <span class=\"keyword\">AS</span> department</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> company</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> info <span class=\"operator\">-</span><span class=\"operator\">&gt;&gt;</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;阿里巴巴&#x27;</span></span><br><span class=\"line\">) <span class=\"keyword\">AS</span> x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> department <span class=\"operator\">-</span><span class=\"operator\">&gt;&gt;</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;研发二部&#x27;</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复合类型\"><a href=\"#复合类型\" class=\"headerlink\" title=\"复合类型\"></a><a href=\"https://www.postgresql.org/docs/current/rowtypes.html\">复合类型</a></h2><p>使用psql的复合类型也可以用来存储与查询层级数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> TYPE employee <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  id              text,</span><br><span class=\"line\">  name            text</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> TYPE department <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  id              text,</span><br><span class=\"line\">  name            text,</span><br><span class=\"line\">  employees       employee <span class=\"keyword\">array</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> company (</span><br><span class=\"line\">  id              text <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name            text,</span><br><span class=\"line\">  departments     department <span class=\"keyword\">array</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> company</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> </span><br><span class=\"line\">  (<span class=\"string\">&#x27;alibaba&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"keyword\">array</span>[</span><br><span class=\"line\">    (<span class=\"string\">&#x27;research_2&#x27;</span>, <span class=\"string\">&#x27;研发二部&#x27;</span>, <span class=\"keyword\">array</span>[</span><br><span class=\"line\">      (<span class=\"string\">&#x27;2021123&#x27;</span>, <span class=\"string\">&#x27;张三&#x27;</span>),</span><br><span class=\"line\">      (<span class=\"string\">&#x27;2021124&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>)</span><br><span class=\"line\">    ]::employee[]),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;research_3&#x27;</span>, <span class=\"string\">&#x27;研发三部&#x27;</span>, <span class=\"keyword\">array</span>[</span><br><span class=\"line\">      (<span class=\"string\">&#x27;2021125&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>)</span><br><span class=\"line\">    ]::employee[])    </span><br><span class=\"line\">  ]::department[]),</span><br><span class=\"line\">  (<span class=\"string\">&#x27;tencent&#x27;</span>, <span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"keyword\">array</span>[</span><br><span class=\"line\">    (<span class=\"string\">&#x27;marketing&#x27;</span>, <span class=\"string\">&#x27;市场部&#x27;</span>, <span class=\"keyword\">array</span>[</span><br><span class=\"line\">      (<span class=\"string\">&#x27;199800001&#x27;</span>, <span class=\"string\">&#x27;钱一&#x27;</span>)</span><br><span class=\"line\">    ]::employee[])    </span><br><span class=\"line\">  ]::department[])  </span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>查询研发二部下的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> (employee).id <span class=\"keyword\">AS</span> id, (employee).name <span class=\"keyword\">AS</span> name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">UNNEST</span>((department).employees) <span class=\"keyword\">AS</span> employee</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"built_in\">UNNEST</span>(departments) <span class=\"keyword\">AS</span> department <span class=\"keyword\">FROM</span> company</span><br><span class=\"line\">  ) x</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> (department).name <span class=\"operator\">=</span> <span class=\"string\">&#x27;研发二部&#x27;</span></span><br><span class=\"line\">) y</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>以上这些方法可以根据实际需求来选择。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["sql"]},{"title":"http请求的413错误","url":"/blog/2019/05/15/http-413-error/","content":"<p>当收到服务器返回413时，可检查这几处：</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_max_body_size 50M;</span><br></pre></td></tr></table></figure>\n\n<p>默认值只有1M。</p>\n<h2 id=\"koa-bodyparser\"><a href=\"#koa-bodyparser\" class=\"headerlink\" title=\"koa-bodyparser\"></a>koa-bodyparser</h2><p>formLimit: limit of the urlencoded body. If the body ends up being larger than this limit, a 413 error code is returned. Default is 56kb.</p>\n<p>jsonLimit: limit of the json body. Default is 1mb.</p>\n<p>textLimit: limit of the text body. Default is 1mb.</p>\n<h2 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">json</span>(&#123;<span class=\"attr\">limit</span>: <span class=\"string\">&#x27;50mb&#x27;</span>&#125;))</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">urlencoded</span>(&#123;<span class=\"attr\">limit</span>: <span class=\"string\">&#x27;50mb&#x27;</span>, <span class=\"attr\">extended</span>: <span class=\"literal\">false</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"multer\"><a href=\"#multer\" class=\"headerlink\" title=\"multer\"></a>multer</h2><p><strong>limits</strong></p>\n<p>An object specifying the size limits of the following optional properties. Multer passes this object into busboy directly, and the details of the properties can be found on busboy’s page.</p>\n<p>The following integer values are available:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fieldNameSize</td>\n<td>Max field name size</td>\n<td>100 bytes</td>\n</tr>\n<tr>\n<td>fieldSize</td>\n<td>Max field value size</td>\n<td>1MB</td>\n</tr>\n<tr>\n<td>fields</td>\n<td>Max number of non-file fields</td>\n<td>Infinity</td>\n</tr>\n<tr>\n<td>fileSize</td>\n<td>For multipart forms, the max file size (in bytes)</td>\n<td>Infinity</td>\n</tr>\n<tr>\n<td>files</td>\n<td>For multipart forms, the max number of file fields</td>\n<td>Infinity</td>\n</tr>\n<tr>\n<td>parts</td>\n<td>For multipart forms, the max number of parts (fields + files)</td>\n<td>Infinity</td>\n</tr>\n<tr>\n<td>headerPairs</td>\n<td>For multipart forms, the max number of header key&#x3D;&gt;value pairs to parse</td>\n<td>2000</td>\n</tr>\n</tbody></table>\n<p>Specifying the limits can help protect your site against denial of service (DoS) attacks.</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"看图软件","url":"/blog/2021/05/26/image-viewer/","content":"<p>老的ACDSee现在变成了<a href=\"https://www.acdsee.com/en/products/photo-studio-home/\">Photo Studio</a>，走Adobe的路子，更针对专业人士，可弃之。</p>\n<p>推荐两个免费看图软件。</p>\n<h2 id=\"Honeyview\"><a href=\"#Honeyview\" class=\"headerlink\" title=\"Honeyview\"></a><a href=\"https://en.bandisoft.com/honeyview/\">Honeyview</a></h2><p>如果只是简单用用，可以用这款bandi系列中的看图软件，界面长这样</p>\n<img src=\"/blog/2021/05/26/image-viewer/honeyview.jpg\" class=\"\" title=\"honeyview\">\n\n<h2 id=\"XnView-MP\"><a href=\"#XnView-MP\" class=\"headerlink\" title=\"XnView MP\"></a><a href=\"https://www.xnview.com/en/xnviewmp/\">XnView MP</a></h2><p>如果有大量图片的浏览转换需求，那么可以用这款，以前用过ACDSee的人一定会非常熟悉。</p>\n<img src=\"/blog/2021/05/26/image-viewer/xnviewmp.webp\" class=\"\" title=\"xnviewmp\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"在windows上本地安装elasticsearch","url":"/blog/2021/12/30/install-elasticsearch-on-windows/","content":"<p>老样子，开篇先放个<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html\">官方文档</a>。</p>\n<p>官方在windows下提供了两种安装方式：</p>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/zip-windows.html\">zip</a></li>\n<li><a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-16-3\">msi</a></li>\n</ul>\n<p>msi版本已经废弃，<code>7.16.3</code>是最后一个支持的版本。从<a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-17-0\">7.17.0</a>开始就没有msi安装文件。</p>\n<p>一路下一步即可，只介绍几个需要注意的地方。</p>\n<p><strong>Network host</strong></p>\n<p>如不填默认绑<code>127.0.0.1</code>，如果要开放至外网，这里修要修改，下面会重点介绍。</p>\n<p><strong>license</strong></p>\n<p><em>付费是不可能付费的，永远不可能付费的。</em>选择<code>basic</code>吧，默认会是<code>trial</code>30天试用。</p>\n<h3 id=\"开放至外网\"><a href=\"#开放至外网\" class=\"headerlink\" title=\"开放至外网\"></a>开放至外网</h3><p>如果需开放至外网，只将<code>Network host</code>填为<code>0.0.0.0</code>是不行的，同时还需要设置<code>transport.host</code>。</p>\n<p>es的config目录默认在<code>%ALLUSERSPROFILE%\\Elastic\\Elasticsearch\\config</code>，我们需要修改<code>elasticsearch.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">transport.host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html#common-network-settings\"><code>network.host</code></a>基本无需赘述。</p>\n<p>这里的重点在要指定<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html#transport-settings\"><code>transport.host</code></a>，如不指定，它的值会跟<code>network.host</code>一样，而<code>0.0.0.0</code>并不是一个合格的值，所以es会启动不了。</p>\n<p>同时我们可以把<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#general-security-settings\"><code>xpack.security</code></a>关掉。<br>虽然阿里云windows server已经是虚拟机<a href=\"https://help.aliyun.com/document_detail/25412.html#title-ers-q4j-1pk\">无法再开启Hyper-V二次虚拟化</a>使用linux containers，但它带来的好处是端口防火墙可以完全交给安全组。<br>毕竟es的使用对象还是服务器，无需开放给公众，所以阿里云的安全组已经足够。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows","elasticsearch"]},{"title":"如何使用包管理在ubuntu16.04上安装java","url":"/blog/2018/01/21/install-java8-on-ubuntu-16-04/","content":"<h2 id=\"安装默认JRE-x2F-JDK\"><a href=\"#安装默认JRE-x2F-JDK\" class=\"headerlink\" title=\"安装默认JRE&#x2F;JDK\"></a>安装默认JRE&#x2F;JDK</h2><p>最简单的安装方式就是安装默认的OpenJDK8。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install default-jre</span><br><span class=\"line\">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Oracle-JDK\"><a href=\"#安装Oracle-JDK\" class=\"headerlink\" title=\"安装Oracle JDK\"></a>安装Oracle JDK</h2><p>如果要安装oracle java，那么官方默认源里是没有的，我们使用第三方源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<p>接下来就可以安装oracle jdk8或者jdk9</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install oracle-java9-installer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改ppa\"><a href=\"#修改ppa\" class=\"headerlink\" title=\"修改ppa\"></a>修改ppa</h2><p>webupd8team的更新经常不及时，比如截止到目前2018-01-19，webupd8team&#x2F;java上的java8仍然是144版本，但是oracle已经更改了链接，所以直接使用会提示404错误，找不到安装包，我们需要手动修改ppa。</p>\n<p>先将144升级到152</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/dpkg/info</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|JAVA_VERSION=8u144|JAVA_VERSION=8u152|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|PARTNER_URL=http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/|PARTNER_URL=http://download.oracle.com/otn-pub/java/jdk/8u152-b16/aa0333dd3019491ca4f6ddbe78cdb6d0/|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|SHA256SUM_TGZ=&quot;e8a341ce566f32c3d06f6d0f0eeea9a0f434f538d22af949ae58bc86f2eeaae4&quot;|SHA256SUM_TGZ=&quot;218b3b340c3f6d05d940b817d0270dfe0cfd657a636bad074dcabe0c111961bf&quot;|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|J_DIR=jdk1.8.0_144|J_DIR=jdk1.8.0_152|&#x27;</span> oracle-java8-installer.*</span><br></pre></td></tr></table></figure>\n\n<p>再将152升级到161</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/dpkg/info</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|JAVA_VERSION=8u151|JAVA_VERSION=8u161|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|PARTNER_URL=http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/|PARTNER_URL=http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|SHA256SUM_TGZ=&quot;c78200ce409367b296ec39be4427f020e2c585470c4eed01021feada576f027f&quot;|SHA256SUM_TGZ=&quot;6dbc56a0e3310b69e91bb64db63a485bd7b6a8083f08e48047276380a0e2021e&quot;|&#x27;</span> oracle-java8-installer.*</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s|J_DIR=jdk1.8.0_151|J_DIR=jdk1.8.0_161|&#x27;</span> oracle-java8-installer.*</span><br></pre></td></tr></table></figure>\n\n<p>接下来再次安装oracle-java8-installer就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管理java版本\"><a href=\"#管理java版本\" class=\"headerlink\" title=\"管理java版本\"></a>管理java版本</h2><p>如果希望多个java版本并存，就需要进行切换。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>以下是一个示例输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">There are 5 choices for the alternative java (providing /usr/bin/java).</span><br><span class=\"line\"></span><br><span class=\"line\">  Selection    Path                                            Priority   Status</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">* 0            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      auto mode</span><br><span class=\"line\">  1            /usr/lib/jvm/java-6-oracle/jre/bin/java          1         manual mode</span><br><span class=\"line\">  2            /usr/lib/jvm/java-7-oracle/jre/bin/java          2         manual mode</span><br><span class=\"line\">  3            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      manual mode</span><br><span class=\"line\">  4            /usr/lib/jvm/java-8-oracle/jre/bin/java          3         manual mode</span><br><span class=\"line\">  5            /usr/lib/jvm/java-9-oracle/bin/java              4         manual mode</span><br><span class=\"line\"></span><br><span class=\"line\">Press &lt;enter&gt; to keep the current choice[*], or type selection number:</span><br></pre></td></tr></table></figure>\n\n<p>如果只有一个java版本，就会是这样的输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">There is only one alternative in link group java (providing /usr/bin/java): /usr/lib/jvm/java-8-oracle/jre/bin/java</span><br><span class=\"line\">Nothing to configure.</span><br></pre></td></tr></table></figure>\n\n<p>接下来可以针对不同的<em>命令</em>来切换版本，典型的<em>命令</em>有javac, javadoc, jarsigner。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config <span class=\"variable\">$command</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置环境变量JAVA-HOME\"><a href=\"#设置环境变量JAVA-HOME\" class=\"headerlink\" title=\"设置环境变量JAVA_HOME\"></a>设置环境变量JAVA_HOME</h2><p>很多应用都会使用$JAVA_HOME来调用java可执行文件，所以我们需要在安装完后设置$JAVA_HOME。</p>\n<p>首先找到当前使用的java环境目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>然后将找到的目录添加进环境变量。</p>\n<p>打开&#x2F;etc&#x2F;environment。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/environment</span><br></pre></td></tr></table></figure>\n\n<p>加入JAVA_HOME的设置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot;</span><br></pre></td></tr></table></figure>\n\n<p>保存文件，并且加载它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/environment</span><br></pre></td></tr></table></figure>\n\n<p>验证修改是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>\n\n<p>到此java8的安装就完成啦。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["linux","java"]},{"title":"在linux上安装最新版本的Git","url":"/blog/2017/04/19/install-latest-git-on-linux/","content":"<h2 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h2><p>在CentOS上使用yum安装的git默认是1.7.1，使用git 1.7.1去clone一些repo时会出现下面的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /root/blog/.git/</span><br><span class=\"line\">error: The requested URL returned error: 400 Bad Request <span class=\"keyword\">while</span> accessing https://git.coding.net/xxx/xxx.git/info/refs</span><br><span class=\"line\"></span><br><span class=\"line\">fatal: HTTP request failed</span><br></pre></td></tr></table></figure>\n<p>这是因为版本过低的缘故，git.coding.net要求使用1.8+版本的git。</p>\n<p>升级git有两种方式，一种是下载源码编译，一种是使用第三方源。<br>本着懒人原则，我们使用第二种方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo yum install http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm</span><br><span class=\"line\">$ sudo yum update git</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br><span class=\"line\">git version 2.11.1</span><br></pre></td></tr></table></figure>\n\n<p>搞定收工。</p>\n<h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p>在ubuntu14.04上使用apt-get默认安装的版本是1.9.1，但很显然1.9不是最新版本，最新版本已经是2.+了。</p>\n<p>和CentOS一样，使用第三方源来搞定。</p>\n<p>首先添加PPA (Personal Package Archive)中的git-core源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo add-apt-repository ppa:git-core/ppa</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以顺利更新到最新版本的git。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>如果你使用的ubuntu很干净，有可能会提示add-apt-repository命令找不到。它是在software-properties-common包里的。对于一些版本的ubuntu，还需配合python-software-properties食用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install software-properties-common python-software-properties</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science","linux","git"]},{"title":"[OpenWrt]给软路由安装openwrt","url":"/blog/2022/10/01/install-openwrt-on-soft-router/","content":"<h1 id=\"Openwrt-给软路由安装openwrt\"><a href=\"#Openwrt-给软路由安装openwrt\" class=\"headerlink\" title=\"[Openwrt]给软路由安装openwrt\"></a>[Openwrt]给软路由安装openwrt</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>一台电脑</li>\n<li>一个U盘</li>\n<li>一台软路由</li>\n</ul>\n<h3 id=\"openwrt镜像文件\"><a href=\"#openwrt镜像文件\" class=\"headerlink\" title=\"openwrt镜像文件\"></a>openwrt镜像文件</h3><p>去<a href=\"https://downloads.openwrt.org/\">openwrt官网</a>下载对应架构的稳定版镜像文件。</p>\n<h4 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a>版本号</h4><p>试了下最新的<a href=\"https://downloads.openwrt.org/releases/22.03.0/targets/x86/64/\">22.03.0</a>，发现docker daemon无法正常工作。</p>\n<p>建议不要使用小版本号为0的版本，还是回退到上一个稳定版<a href=\"https://downloads.openwrt.org/releases/21.02.3/targets/x86/64/\">22.02.3</a>比较保险。</p>\n<h4 id=\"选哪个镜像\"><a href=\"#选哪个镜像\" class=\"headerlink\" title=\"选哪个镜像\"></a>选哪个镜像</h4><p>OpenWrt的镜像有很多个，大概是下面几个选项的排列组合：</p>\n<ul>\n<li>ext4还是squashfs</li>\n<li>单rootfs还是combined</li>\n<li>efi还是legacy</li>\n</ul>\n<h5 id=\"ext4还是squashfs\"><a href=\"#ext4还是squashfs\" class=\"headerlink\" title=\"ext4还是squashfs\"></a>ext4还是squashfs</h5><p>相比普通的ext4，squashfs引入了只读区域，可以恢复出厂设置，建议选择squashfs。</p>\n<h5 id=\"单rootfs还是combined\"><a href=\"#单rootfs还是combined\" class=\"headerlink\" title=\"单rootfs还是combined\"></a>单rootfs还是combined</h5><p>为了以后更方便迁移扩容，建议combined，把boot和rootfs分开。</p>\n<h5 id=\"efi还是legacy\"><a href=\"#efi还是legacy\" class=\"headerlink\" title=\"efi还是legacy\"></a>efi还是legacy</h5><p>根据软路由主板来决定，一般情况两种都支持。默认efi吧。</p>\n<p>总结一下就是默认下载<code>generic-squashfs-combined-efi.img.gz</code>这个镜像。</p>\n<h3 id=\"WinPE\"><a href=\"#WinPE\" class=\"headerlink\" title=\"WinPE\"></a>WinPE</h3><p>WinPE的全称是Windows Preinstallation Environment，是微软官方出的一个小型操作系统，用来安装、部署和修复正经操作系统。</p>\n<p>一般用户都会使用第三方WinPE，比如<a href=\"https://www.wepe.com.cn/\">微PE</a>、<a href=\"https://www.upe.net/\">优启通</a>等。</p>\n<p>但防人之心不可无，既然官方有，为什么要用民间的呢。</p>\n<h4 id=\"安装官方WinPE\"><a href=\"#安装官方WinPE\" class=\"headerlink\" title=\"安装官方WinPE\"></a>安装官方WinPE</h4><p><a href=\"https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro?view=windows-11#download-winpe\">从Win10 1809开始</a>，官方WinPE包含在<a href=\"https://learn.microsoft.com/zh-cn/windows-hardware/get-started/adk-install\">ADK</a>的<a href=\"https://learn.microsoft.com/zh-cn/windows-hardware/get-started/adk-install#download-the-adk-for-windows-11-version-22h2\">加载项</a>里。</p>\n<h4 id=\"制作WinPE启动U盘\"><a href=\"#制作WinPE启动U盘\" class=\"headerlink\" title=\"制作WinPE启动U盘\"></a>制作WinPE启动U盘</h4><p>下一步是[创建可启动WinPE介质]（<a href=\"https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-create-usb-bootable-drive?view=windows-11%EF%BC%89%E3%80%82\">https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-create-usb-bootable-drive?view=windows-11）。</a></p>\n<ol>\n<li>首先是创建工作文件。</li>\n</ol>\n<p>以管理员身份启动<strong>部署和映像工具环境</strong>（在开始菜单的程序栏Windows Kits下）运行以下脚本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">copype amd64 C:\\WinPE_amd64</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定制WinPE</li>\n</ol>\n<p>默认WinPE只有一个命令行没有界面，如果想使用UI，需要在这一步定制。</p>\n<p>对于自用来说这一步可以省略，命令行是最优雅的人机交互方式（狗头</p>\n<ol start=\"3\">\n<li>烧录至U盘</li>\n</ol>\n<p>烧录有两种方式，一种是使用<strong>部署和映像工具环境</strong>命令行直接烧录</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">MakeWinPEMedia /UFD C:\\WinPE_amd64 P:</span><br></pre></td></tr></table></figure>\n\n<p>另一种是生成iso文件，然后使用通用烧录工具如<a href=\"https://rufus.ie/zh/\">rufus</a>进行烧录，推荐这种方法，更可控些。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">MakeWinPEMedia /ISO C:\\WinPE_amd64 C:\\WinPE_amd64\\WinPE_amd64.iso</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>拷贝物料</li>\n</ol>\n<p>将OpenWrt镜像文件、写盘工具等文件复制到U盘根目录，以供后续使用。</p>\n<h3 id=\"写盘工具\"><a href=\"#写盘工具\" class=\"headerlink\" title=\"写盘工具\"></a>写盘工具</h3><p>我们需要将openwrt.img写入软路由的磁盘，需要写盘工具来完成这一步。</p>\n<p>首推<a href=\"https://m0n0.ch/wall/physdiskwrite.php\">physdiskwrite</a>，目前最新版本为<a href=\"https://m0n0.ch/wall/downloads/physdiskwrite-0.5.3.zip\">0.5.3</a>。</p>\n<p>使用方法：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">physdiskwrite.exe -u generic-squashfs-combined-efi.img</span><br></pre></td></tr></table></figure>\n\n<p>然后选择对应的硬盘，通常是第一个，也就是<code>0</code>号。<strong>注意</strong>，如果有挂载其它硬盘，这一步一定要小心别选错了。</p>\n<p>参数<code>-u</code>是因为软件作者担心用户写错盘，在写入超出2G容量的硬盘时需要显性指定<code>-u</code>参数。</p>\n<h3 id=\"分区工具\"><a href=\"#分区工具\" class=\"headerlink\" title=\"分区工具\"></a>分区工具</h3><p>写完盘后，默认会在硬盘上新建3个分区。分别是efi，boot和rootfs。这三个区一共也才100多兆，硬盘上的上百G空间就被剩了下来。</p>\n<p>此时就需要分区工具来进行扩容，把剩余的空间都划给rootfs。</p>\n<h4 id=\"Diskpart\"><a href=\"#Diskpart\" class=\"headerlink\" title=\"Diskpart\"></a>Diskpart</h4><p><a href=\"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/diskpart\">dispart</a>是微软官方WinPE自带的分区工具。</p>\n<p>进入diskpart提示符后，选择磁盘和卷，扩容（默认使用全部剩余空间），再退出（保存）即可。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">diskpart</span><br><span class=\"line\">DISPART&gt; list volume</span><br><span class=\"line\">DISPART&gt; select disk <span class=\"number\">0</span> </span><br><span class=\"line\">DISPART&gt; select volume <span class=\"number\">3</span></span><br><span class=\"line\">DISPART&gt; extend</span><br><span class=\"line\">DISPART&gt; <span class=\"keyword\">exit</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2022/10/01/install-openwrt-on-soft-router/diskpart_extend_partition.jpg\" class=\"\" title=\"使用diskpart扩容分区\">\n\n<h4 id=\"DiskGenius\"><a href=\"#DiskGenius\" class=\"headerlink\" title=\"DiskGenius\"></a>DiskGenius</h4><p>如果实在不习惯命令行，想用DiskGenius，那最简单的方法是使用第三方WinPE，第三方WinPE都会集成常用工具。比如<a href=\"https://www.upe.net/\">优启通</a>。</p>\n<p>DiskGenius的使用方法就不多说了，扩展rootfs分区使用剩余未分区空间再保存就行。</p>\n<p><strong>注意</strong>，我在使用DiskGenius扩容rootfs分区时，<code>generic-squashfs-combined-efi</code>会出现错误，最后使用了<code>generic-squashfs-combined</code>。</p>\n<h2 id=\"安装Openwrt\"><a href=\"#安装Openwrt\" class=\"headerlink\" title=\"安装Openwrt\"></a>安装Openwrt</h2><p>将软路由接上显示器，键盘，鼠标，U盘，然后插电。</p>\n<h3 id=\"通电直接启动\"><a href=\"#通电直接启动\" class=\"headerlink\" title=\"通电直接启动\"></a>通电直接启动</h3><p>默认软由器会通电直接开机，而不用按下开机键。这样才能在断电又来电后自动恢复。</p>\n<p>这项设置在BIOS的<code>Restore AC Power Loss</code>中，将它设为<code>Power On</code>即可。</p>\n<p><code>Restore AC Power Loss</code>通常在电源管理或者高级设置里。</p>\n<h3 id=\"进入WinPE\"><a href=\"#进入WinPE\" class=\"headerlink\" title=\"进入WinPE\"></a>进入WinPE</h3><p>开机后依据屏幕提示，按<code>F8</code>或<code>F12</code>进入快捷启动，选择U盘启动。</p>\n<p>进入WinPE后，进行<a href=\"#%E5%86%99%E7%9B%98%E5%B7%A5%E5%85%B7\">写盘</a>和<a href=\"#%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7\">分区</a>操作。</p>\n<p>完成后重启机器。</p>\n<h2 id=\"配置Openwrt\"><a href=\"#配置Openwrt\" class=\"headerlink\" title=\"配置Openwrt\"></a>配置Openwrt</h2><p>重启完成后就会进入Openwrt系统了，等待启动完成按下回车键激活命令行。</p>\n<h3 id=\"密码\"><a href=\"#密码\" class=\"headerlink\" title=\"密码\"></a>密码</h3><p>初始系统默认没有密码，无法通过ssh登录。根据提示使用<code>passwd</code>命令设置密码。</p>\n<h3 id=\"配置IP\"><a href=\"#配置IP\" class=\"headerlink\" title=\"配置IP\"></a>配置IP</h3><p>默认的IP是<code>192.168.1.1</code>，很容易跟光猫或主路由冲突。我们把它改为<code>192.168.8.1</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> network.lan.ipaddr=<span class=\"string\">&#x27;192.168.8.1&#x27;</span></span><br><span class=\"line\">uci commit</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置软件源\"><a href=\"#配置软件源\" class=\"headerlink\" title=\"配置软件源\"></a>配置软件源</h3><p>国内源的下载速度与官方比起来就像飞机和汽车。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s_downloads.openwrt.org_mirror.sjtu.edu.cn/openwrt_&#x27;</span> /etc/opkg/distfeeds.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中文界面\"><a href=\"#中文界面\" class=\"headerlink\" title=\"中文界面\"></a>中文界面</h3><p>安装luci中文界面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h3><p>常用软件可参考其它文章。</p>\n<ul>\n<li><a href=\"/blog/2022/07/25/openwrt-openclash/\" title=\"[OpenWrt]使用OpenClash科学上网\">OpenClash</a></li>\n<li><a href=\"/blog/2022/07/26/openwrt-aria2/\" title=\"[Openwrt]使用aria2\">Aria2</a></li>\n<li><a href=\"/blog/2022/08/01/openwrt-samba/\" title=\"[OpenWrt]使用samba\">Samba</a></li>\n<li><a href=\"/blog/2022/07/25/openwrt-unblock-netease-music/\" title=\"[OpenWrt]解除网易云音乐播放限制\">解锁网易云</a></li>\n<li><a href=\"/blog/2022/07/25/openwrt-docker/\" title=\"[Openwrt]使用docker\">Docker</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"在ubuntu16.04系统上安装redis","url":"/blog/2018/03/08/install-redis-on-ubuntu-16-04/","content":"<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04\">请看这里</a></p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"浅谈一下kubernetes","url":"/blog/2023/04/26/intro-kubernetes/","content":"<p>在谈kubernetes之前，先看看一切的基础：容器。</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>容器是什么？<a href=\"https://cloud.google.com/learn/what-are-containers?hl=zh-cn\">谷歌</a>、<a href=\"https://www.ibm.com/cn-zh/topics/containers\">IBM</a>、<a href=\"https://aws.amazon.com/cn/what-is/containerization/\">AWS</a>、<a href=\"https://www.huaweicloud.com/zhishi/edu-arc-jsyfw38.html\">华为</a>、<a href=\"https://learn.microsoft.com/zh-cn/dotnet/architecture/microservices/container-docker-introduction/\">微软</a>对容器都有各自的解释。</p>\n<p>容器可以分上下两个维度来定义：</p>\n<ul>\n<li>从底下看，容器是一种内核<strong>轻量级</strong>的<a href=\"https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96\">操作系统层虚拟化技术</a>。用于在单个操作系统实例中运行多个隔离的用户空间。</li>\n<li>从上面看，容器是在应用程序层面上的一个抽象，它将应用程序及其依赖项打包在一起，以便可以在不同的计算环境中快速而一致地运行。</li>\n</ul>\n<h3 id=\"vs虚拟机\"><a href=\"#vs虚拟机\" class=\"headerlink\" title=\"vs虚拟机\"></a>vs虚拟机</h3><p>虽然都是虚拟化技术，但它和虚拟机是完全不同的。从<a href=\"https://www.docker.com/resources/what-container/\">Docker官网</a>借一张对比图。</p>\n<img src=\"/blog/2023/04/26/intro-kubernetes/container_vs_vm.png\" class=\"\" title=\"容器vs比虚拟机\">\n\n<ul>\n<li>容器是应用程序层的抽象，容器之间共享操作系统内核，每个容器作为隔离的进程在用户空间中运行。容器占用的空间比虚拟机少，可以处理更多的应用程序。</li>\n<li>虚拟机是物理硬件的抽象，将一台服务器变成多台服务器。每个虚拟机都包括完整的操作系统和应用程序，需要更多资源。</li>\n</ul>\n<p><strong>运行效率</strong>，是容器相比虚拟机最大的优势。</p>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>虚拟机使用的是<a href=\"https://en.wikipedia.org/wiki/Hypervisor\">Hypervisor</a>技术，那容器是怎么实现如此高效轻便的隔离特性呢？</p>\n<p>其奥秘就在Linux操作系统内核中，为资源隔离提供了三种技术：<a href=\"https://en.wikipedia.org/wiki/Linux_namespaces\">namespace</a>、<a href=\"https://zh.wikipedia.org/wiki/Cgroups\">cgroups</a>、<a href=\"https://zh.wikipedia.org/wiki/Chroot\">chroot</a>。虽然这三种技术的初衷并不是为了容器，但是它们结合在一起却发生了奇妙的反应。</p>\n<ul>\n<li>namespace<br>可以创建出独立的文件系统、主机名、进程号，还有网络等资源空间。</li>\n<li>cgroup<br>用来实现对进程的CPU、内存等资源的优先级和配额限制。</li>\n<li>chroot<br>可以更改进程的根目录，也就是限制进程访问原有的文件系统。</li>\n</ul>\n<p>综合这三种技术，具有完善的隔离特性的容器就此出现了。早期的容器有<a href=\"https://en.wikipedia.org/wiki/Solaris_Containers\">Solaris Containers</a>、<a href=\"https://wiki.openvz.org/Main_Page\">OpenVz</a>、<a href=\"https://linuxcontainers.org/lxc/introduction/\">Linux Container(LXC)</a>，但直到Docker的出现，才让容器技术真正大众化起来。可以看一下10年前<a href=\"https://github.com/shykes\">Solomon Hykes</a>在<a href=\"https://us.pycon.org/2013/schedule/\">PyCon 2013大会</a>上的Lightning talks：<a href=\"https://www.youtube.com/watch?v=wW9CAH9nSLs\">The future of Linux Containers</a>，首次向全世界展示了Docker技术。顺便，<a href=\"https://blog.aquasec.com/\">Aqua Blog</a>上有一篇<a href=\"https://blog.aquasec.com/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016\">容器发展简史</a>值得一看。</p>\n<h3 id=\"容器编排（Container-Orchestration）\"><a href=\"#容器编排（Container-Orchestration）\" class=\"headerlink\" title=\"容器编排（Container Orchestration）\"></a>容器编排（Container Orchestration）</h3><p>Docker出现后，容器被越来越多人使用。但到生产环境应用部署的时候，却显得<code>步履维艰</code>。因为容器只是针对单个进程的隔离和封装，而实际的应用场景却是要求许多的应用进程互相协同工作，其中的各种关系和需求非常复杂，在容器这个技术层次很难掌控。</p>\n<p>于是在Docker周边涌现出的数不胜数的扩展、增强产品中，出现了一个叫<a href=\"https://orchardup.github.io/fig.sh/index.html\">Fig</a>的小项目。Fig为Docker引入了<a href=\"https://www.vmware.com/topics/glossary/content/container-orchestration.html\">容器编排</a>的概念，使用<a href=\"https://yaml.org/\">YAML</a>来定义容器的启动参数、先后顺序和依赖关系，让用户不再有Docker冗长命令行的烦恼，并第一次见识到了<code>声明式</code>的威力。Docker公司也很快意识到了Fig这个小工具的价值，于是就在2014年7月把它买了下来，集成进Docker内部，改名成了<a href=\"https://docs.docker.com/compose/\">docker compose</a>。</p>\n<h3 id=\"云原生时代\"><a href=\"#云原生时代\" class=\"headerlink\" title=\"云原生时代\"></a>云原生时代</h3><p>容器技术开启了云原生的大潮，面对服务器集群，只能编排单机的docker compose已经力不从心。于是在2014年，Docker公司推出了Docker Swarm（现已更名为<a href=\"https://github.com/docker-archive/classicswarm\">Docker “Classic” Swarm</a>）来支持集群。</p>\n<p>然后在2015年，谷歌将换代的内部集群应用管理系统<a href=\"https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/\">Borg</a>用Go语言改写并开源，命名为<a href=\"https://kubernetes.io/\">Kubernetes</a>。因为Kubernetes背后有着谷歌十多年生产环境经验的支持，理论水平也非常高，一经推出就引起了轰动。</p>\n<p>同年，谷歌联合Linux基金会成立了<a href=\"https://www.cncf.io/\">CNCF（Cloud Native Computing Foundation，云原生基金会）</a>，<a href=\"https://techcrunch.com/2015/07/21/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundation-with-ibm-intel-twitter-and-others/?guccounter=1\">把Kubernetes捐献出来作为种子项目</a>。有了谷歌和Linux的保驾护航，再加上宽容开放的社区，作为CNCF的“头把交椅”，Kubernetes仅用了两年就打败了<a href=\"https://mesos.apache.org/\">Apache Mesos</a>和<a href=\"https://docs.docker.com/engine/swarm/\">Docker Swarm</a>，成为了云原生时代容器编排的唯一霸主和事实标准。</p>\n<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>从某种角度上说，k8s（k8s代表k和s中间有8个字母，类似用i18n表示internationalization）可以说是一个集群级别的操作系统，主要功能就是资源管理和作业调度。</p>\n\n\n<p>操作系统的一个重要功能就是抽象，从繁琐的底层事务中抽象出一些简洁的概念，然后基于这些概念去管理系统资源。</p>\n<p>Kubernetes也是这样，它的管理目标是大规模的集群和应用，必须要能够把系统抽象到足够高的层次，分解出一些松耦合的对象，才能简化系统模型，减轻用户的心智负担。</p>\n<h3 id=\"集群架构\"><a href=\"#集群架构\" class=\"headerlink\" title=\"集群架构\"></a>集群架构</h3><img src=\"/blog/2023/04/26/intro-kubernetes/cloud-operation-system.png\" class=\"\" title=\"k8s-cluster.webp 集群架构\">\n\n<p>Kubernetes采用了现今流行的<a href=\"https://en.wikipedia.org/wiki/Control_plane\"><strong>控制面&#x2F;数据面</strong>（Control Plane&#x2F;Data Plane）架构</a>，集群里的计算机被称为<strong>节点</strong>（Node），少量的节点用作控制面来执行集群的管理维护工作，其他的大部分节点都被划归数据面，用来跑业务应用。</p>\n<p>节点内部也具有复杂的结构，可分为核心的<a href=\"https://kubernetes.io/docs/concepts/overview/components/\">组件</a>和锦上添花的<a href=\"https://kubernetes.io/docs/concepts/cluster-administration/addons/\">插件</a>。</p>\n<h4 id=\"Master节点\"><a href=\"#Master节点\" class=\"headerlink\" title=\"Master节点\"></a>Master节点</h4><p>Master里有4个组件，分别是apiserver、etcd、scheduler、controller-manager。</p>\n<ul>\n<li>API Server<br>apiserver是Master节点，同时也是整个k8s系统的唯一入口，它对外公开了一系列的RESTful API，并且加上了验证、授权等功能，所有其他组件只能和它直接通信，可以说是k8s里的联络员。</li>\n<li>Scheduler</li>\n<li>Controller Manager</li>\n<li>etcd</li>\n</ul>\n<h4 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h4><ul>\n<li>kubelet<br>定期向apiserver上报节点状态，apiserver再存到etcd里。</li>\n<li>kube-proxy<br>实现了TCP&#x2F;UDP反向代理，让容器对外提供稳定的服务。</li>\n<li>Container Runtime<br>任何支持<a href=\"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md\">CRI（Container Runtime Interface）</a>的容器运行时，比如<a href=\"https://containerd.io/\">containerd</a>，<a href=\"https://cri-o.io/#what-is-cri-o\">CRI-O</a>。</li>\n</ul>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>从可用到好用的实现路径之一就是插件。k8s设计非常灵活，使用k8s资源对象（如DaemonSet、Deployment等）来实现插件。</p>\n<p>常用的有<a href=\"https://github.com/kubernetes/dashboard#kubernetes-dashboard\">Dashboard</a>和<a href=\"https://kubernetes.io/docs/concepts/cluster-administration/addons/\">DNS</a>。</p>\n<h3 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h3><h4 id=\"声明式与命令式\"><a href=\"#声明式与命令式\" class=\"headerlink\" title=\"声明式与命令式\"></a>声明式与命令式</h4><ul>\n<li><p>命令式<br>交互性强，注重顺序和过程。但必须“告诉”计算机每步该做什么，所有的步骤都列清楚，这样程序才能够一步步走下去，最后完成任务，显得计算机有点“笨”。</p>\n</li>\n<li><p>声明式<br>不关心具体的过程，更注重结果。我们不需要“教”计算机该怎么做，只要告诉它一个目标状态，它自己就会想办法去完成任务，相比起来自动化、智能化程度更高。</p>\n</li>\n</ul>\n<p>来看一个例子：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ngx-dep</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ngx-dep</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">ngx-dep</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">ngx-dep</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<p>注意里面的<code>replicas: 2</code>，这一句表示期望的副本数量。也就是说，要在集群中运行多少个实例。</p>\n<p>我们只要声明期望的状态，Deployment对象就可以扮演运维监控人员的角色，自动地在集群里调整Pod的数量，这就是声明式的魅力。</p>\n<p>为了更好的实现声明式，k8s使用了<a href=\"https://yaml.org/\">YAML</a>，它是JSON的一个超集。</p>\n<h4 id=\"API对象\"><a href=\"#API对象\" class=\"headerlink\" title=\"API对象\"></a>API对象</h4><p>YAML语言只相当于“语法”，要与Kubernetes对话，我们还必须有足够的“词汇”来表示“语义”。</p>\n<p>作为一个集群操作系统，Kubernetes 归纳总结了 Google 多年的经验，在理论层面抽象出了很多个概念，用来描述系统的管理运维工作，这些概念就叫做“API 对象”。说到这个名字，你也许会联想到上次课里讲到的 Kubernetes 组件 apiserver。没错，它正是来源于此。</p>\n<p>因为 apiserver 是 Kubernetes 系统的唯一入口，外部用户和内部组件都必须和它通信，而它采用了 HTTP 协议的 URL 资源理念，API 风格也用 RESTful 的 GET&#x2F;POST&#x2F;DELETE 等等，所以，这些概念很自然地就被称为是“API 对象”了。</p>\n<img src=\"/blog/2023/04/26/intro-kubernetes/api-resources.png\" class=\"\" title=\"API对象\">\n\n<h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><p>Kubernetes的<strong>Master&#x2F;Node架构</strong>是它具有自动化运维能力的关键，再用另一张参考架构图来简略说明一下它的运行机制。</p>\n<img src=\"/blog/2023/04/26/intro-kubernetes/kubernetes-control-plane.png\" class=\"\" title=\"Master&#x2F;Node架构\">\n\n<h3 id=\"工作负荷（Workload）\"><a href=\"#工作负荷（Workload）\" class=\"headerlink\" title=\"工作负荷（Workload）\"></a>工作负荷（Workload）</h3><p>工作负荷就是在k8s中运行的应用。而<a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">pods</a>是k8s管理应用的最小单位，所有的工作负荷都是从pod扩展出来的。</p>\n<img src=\"/blog/2023/04/26/intro-kubernetes/pod.webp\" class=\"\" title=\"pod\">\n\n<h4 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h4><p>一个容器中只运行一个进程或应用。Pod可以解决联合运行的需求，但作为一个整体它又足够轻量。类似Docker中的compose project。</p>\n<p>一个简单的pod：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">busybox:latest</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">busy</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">os</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"string\">&quot;ubuntu&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">debug</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/bin/echo</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;$(os), $(debug)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题</strong></p>\n<p>如果你试一下，就会发现上面这个pod运行后的状态是<code>CrashLoopBackOff</code>。其实在docker里也是一样的，因为<code>/bin/echo</code>不是一个守护进程，它执行完就退出了，而不管是docker还是k8s，默认运行的都是在线服务，而不是一次性任务。</p>\n<p>我们当然可以使用<code>tail -f /dev/null</code>或<code>exec /bin/bash -c &quot;trap : TERM INT; sleep infinity &amp; wait&quot;</code>来保持进程不退出，但这样会占用资源，而且不够优雅。</p>\n<h4 id=\"Job-x2F-CronJob\"><a href=\"#Job-x2F-CronJob\" class=\"headerlink\" title=\"Job&#x2F;CronJob\"></a>Job&#x2F;CronJob</h4><p>为了解决离线任务的需求，k8s引入了job和cronjob。Job是一次性任务，而CronJob是定时任务。</p>\n<p><strong>job</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echo-job</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">echo-job</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/echo&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">args:</span> [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/04/26/intro-kubernetes/job-yaml.png\" class=\"\" title=\"job\">\n\n<p>从这里可以感受到api对象的魅力。</p>\n<p><strong>cronjob</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echo-cj</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&#x27;*/1 * * * *&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">echo-cj</span></span><br><span class=\"line\">            <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/echo&quot;</span>]</span><br><span class=\"line\">            <span class=\"attr\">args:</span> [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/04/26/intro-kubernetes/cronjob-yaml.png\" class=\"\" title=\"cronjob\">\n\n<h4 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h4><h4 id=\"Daemonset\"><a href=\"#Daemonset\" class=\"headerlink\" title=\"Daemonset\"></a>Daemonset</h4><h4 id=\"StatefulSet\"><a href=\"#StatefulSet\" class=\"headerlink\" title=\"StatefulSet\"></a>StatefulSet</h4><h3 id=\"服务与网络\"><a href=\"#服务与网络\" class=\"headerlink\" title=\"服务与网络\"></a>服务与网络</h3><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><h4 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h4><h3 id=\"配置与存储\"><a href=\"#配置与存储\" class=\"headerlink\" title=\"配置与存储\"></a>配置与存储</h3><h4 id=\"ConfigMap-x2F-Secret\"><a href=\"#ConfigMap-x2F-Secret\" class=\"headerlink\" title=\"ConfigMap&#x2F;Secret\"></a>ConfigMap&#x2F;Secret</h4><h4 id=\"PersistentVolume\"><a href=\"#PersistentVolume\" class=\"headerlink\" title=\"PersistentVolume\"></a>PersistentVolume</h4><h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ngx-pod-resources</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">ngx</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">10m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">20m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"简单介绍一下stable diffusion","url":"/blog/2023/02/17/intro-stable-diffusion/","content":"<p><a href=\"https://en.wikipedia.org/wiki/Stable_Diffusion\">Stable Diffusion</a>是一个在2022年由<a href=\"https://ommer-lab.com/\">LMU</a>、<a href=\"https://www.iwr.uni-heidelberg.de/\">IWR, Heidelberg University</a>、<a href=\"https://runwayml.com/\">Runway</a><a href=\"https://ommer-lab.com/research/latent-diffusion-models/\">联合提出</a>的文本生成图片的机器学习模型。具体实现由<a href=\"https://github.com/CompVis\">CompVis</a>小组<a href=\"https://github.com/CompVis/stable-diffusion\">开源</a>，<a href=\"https://stability.ai/\">Stability AI</a>提供商业支持。Version 2由Stability AI<a href=\"https://github.com/Stability-AI/stablediffusion\">开源</a>。</p>\n<h2 id=\"线上体验\"><a href=\"#线上体验\" class=\"headerlink\" title=\"线上体验\"></a>线上体验</h2><p>Stability AI提供了在线体验：<a href=\"https://beta.dreamstudio.ai/\">dreamstudio</a>。</p>\n<img src=\"/blog/2023/02/17/intro-stable-diffusion/dreamstudio.png\" class=\"\" title=\"dreamstudio\">\n\n<p>生成图片需要消耗积分，新账号有大概100积分，可以稍微玩一会。</p>\n<p><a href=\"https://novelai.dev/\">NovelAI.Dev</a>也提供了<a href=\"https://www.kamiya.dev/\">魔法小镇</a>可以在线体验，需要翻墙获取<a href=\"https://www.kamiya.dev/openid.html\">注册码</a>。</p>\n<h2 id=\"本机自建\"><a href=\"#本机自建\" class=\"headerlink\" title=\"本机自建\"></a>本机自建</h2><p>如果自己的显卡还行的话，可以尝试在本地运行。NovelAI.Dev提供了一份<a href=\"https://guide.novelai.dev/guide/install/sd-webui\">安装指南</a>。</p>\n<h3 id=\"预训练\"><a href=\"#预训练\" class=\"headerlink\" title=\"预训练\"></a>预训练</h3><p>不需要完全从头训练，CompVis有将自己训练后的参数以<a href=\"https://github.com/CompVis/stable-diffusion#weights\">检查点（checkpoint）</a>的形式共享出来，放在了<a href=\"https://huggingface.co/CompVis\">Hugging Face</a>。Stability AI也同样放出了<a href=\"https://huggingface.co/stabilityai\">v2的参数</a>。</p>\n<h3 id=\"ui\"><a href=\"#ui\" class=\"headerlink\" title=\"ui\"></a>ui</h3><p>虽然sd(stable diffusion)官方有指导文档，但对新手还是不够友好，可以使用带ui的<a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui\">stable-diffusion-webui</a>。</p>\n<p>使用stable-diffusion-webui，<a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui#installation-and-running\">按照教程</a>一步步来，把程序当作黑箱，也可以很轻易的运行起来。<br>全默认设置渲染一张在GTX 1080上需要耗时10秒出头。</p>\n<img src=\"/blog/2023/02/17/intro-stable-diffusion/self-host.png\" class=\"\" title=\"本机示例\">\n\n<h2 id=\"提示语\"><a href=\"#提示语\" class=\"headerlink\" title=\"提示语\"></a>提示语</h2><p>怎么写提示语还是有点讲究的。</p>\n<p><a href=\"https://openart.ai/\">Openart</a>上有大量网友上传的文本生成图像作品可以参考。<br>而且有整理出一本<a href=\"https://cdn.openart.ai/assets/Stable%20Diffusion%20Prompt%20Book%20From%20OpenArt%2011-13.pdf\">PromptBook</a>，值得一阅。</p>\n<p><a href=\"https://stable-diffusion-art.com/\">stable diffusion art</a>也有一篇<a href=\"https://stable-diffusion-art.com/prompt-guide/\">提示语指南</a>。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"stable-diffusion-webui教程\"><a href=\"#stable-diffusion-webui教程\" class=\"headerlink\" title=\"stable-diffusion-webui教程\"></a>stable-diffusion-webui教程</h3><ol>\n<li>安装python 3.10.6</li>\n</ol>\n<p>注意，一定要3.10.6。可以用anaconda：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n py310 python=3.10.6</span><br><span class=\"line\">conda activate py310</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用git下载代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>下载ckpt放在<code>models/Stable-diffusion</code></li>\n</ol>\n<p>从<a href=\"https://huggingface.co/CompVis/stable-diffusion-v-1-4-original\">Hugging Face</a>下载ckpt。</p>\n<p>这里提供一个sd-v1-4的<a href=\"magnet:?xt=urn:btih:3a4a612d75ed088ea542acac52f9f45987488d1c&dn=sd-v1-4.ckpt&tr=udp%3a%2f%2ftracker.openbittorrent.com%3a6969%2fannounce&tr=udp%3a%2f%2ftracker.opentrackr.org%3a1337\">磁力链接</a>。</p>\n<ol start=\"4\">\n<li>运行<code>webui-user.bat</code></li>\n</ol>\n<p>这一步要很久，需要下载安装很多依赖。耐心多等一会。</p>\n<ol start=\"5\">\n<li>[可选]安装<a href=\"https://github.com/facebookresearch/xformers\">xformers</a>以<a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers\">加速图片生成</a></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -U xformers</span><br></pre></td></tr></table></figure>\n\n<p>在启动webui时，需要添加<code>--xformers</code>才能会检查xformers，否则还是会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Checking Dreambooth requirements...</span><br><span class=\"line\">[+] bitsandbytes version 0.35.0 installed.</span><br><span class=\"line\">[+] diffusers version 0.10.2 installed.</span><br><span class=\"line\">[+] transformers version 4.25.1 installed.</span><br><span class=\"line\">[ ] xformers version N/A installed.</span><br><span class=\"line\">[+] torch version 1.13.1+cu117 installed.</span><br><span class=\"line\">[+] torchvision version 0.14.1+cu117 installed.</span><br></pre></td></tr></table></figure>\n\n<p>可以修改<code>webui-user.bat</code>：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> COMMANDLINE_ARGS=--xformers</span><br></pre></td></tr></table></figure>\n\n<p>再次启动就正常了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Checking Dreambooth requirements...</span><br><span class=\"line\">[+] bitsandbytes version 0.35.0 installed.</span><br><span class=\"line\">[+] diffusers version 0.10.2 installed.</span><br><span class=\"line\">[+] transformers version 4.25.1 installed.</span><br><span class=\"line\">[+] xformers version 0.0.16rc425 installed.</span><br><span class=\"line\">[+] torch version 1.13.1+cu117 installed.</span><br><span class=\"line\">[+] torchvision version 0.14.1+cu117 installed.</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"限制wsl2的最大使用内存","url":"/blog/2022/08/04/limit-wsl2-memory/","content":"<p>wsl2默认会吃下80%的内存（<code>build 20175</code>之前的版本，之后的版本是50%内存和8G取较小值）(任务管理器中的<a href=\"https://devblogs.microsoft.com/oldnewthing/20180717-00/?p=99265\">Vmmem</a>就是它啦)，并且不会积极释放，所以一旦执行过重负载任务，就得重启才能恢复，实在影响体验。</p>\n<blockquote>\n<p>可以在PowerShell中使用<code>[environment]::OSVersion.Version</code>或者CMD中使用<code>ver</code>来查看系统版本。</p>\n</blockquote>\n<p>可是docker<a href=\"https://docs.docker.com/desktop/windows/wsl/#enabling-docker-support-in-wsl-2-distros\">推荐的后端又是wsl2</a>，性能比hyper-v好一些，所以如果系统版本早于<code>build 20175</code>就还是给wsl2设置一下内存限制吧。</p>\n<p>在<code>%USERPROFILE%</code>下新建<a href=\"https://docs.microsoft.com/en-us/windows/wsl/wsl-config#wslconfig\">.wslconfig</a>配置文件，添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"line\">[wsl2]</span><br><span class=\"line\"></span><br><span class=\"line\"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span><br><span class=\"line\">memory=4GB</span><br></pre></td></tr></table></figure>\n<p>然后重启即可。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker"]},{"title":"在sh中操作特殊字符的文件夹","url":"/blog/2023/02/03/manipulate-files-with-special-characters/","content":"<p>最简单的解法就是用<a href=\"https://www.geeksforgeeks.org/awk-command-unixlinux-examples/\">awk</a>。</p>\n<p>比如这个例子：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">live mp4 电视剧 电影 动漫</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> | awk <span class=\"string\">&#x27;NR==3&#x27;</span></span><br><span class=\"line\">电视剧</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"string\">&quot;`ls | awk &#x27;NR==3&#x27;`&quot;</span></span><br><span class=\"line\">电视剧 $</span><br></pre></td></tr></table></figure>\n\n<p>想操作第几个，就用awk截取ls结果。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;`ls | awk &#x27;NR==3&#x27;`&quot;</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"matlab连接postgresql","url":"/blog/2020/11/30/matlab-connect-to-postgresql/","content":"<p>本文章基本摘自matlab<a href=\"https://www.mathworks.com/help/database/ug/postgresql-jdbc-windows.html\">官方文档</a>，如果想获取更详细信息可以访问。</p>\n<h2 id=\"下载PostgreSQL-JDBC-driver\"><a href=\"#下载PostgreSQL-JDBC-driver\" class=\"headerlink\" title=\"下载PostgreSQL JDBC driver\"></a>下载PostgreSQL JDBC driver</h2><p>如果之前没有配置过JDBC，那么第一步是前往<a href=\"https://jdbc.postgresql.org/download\">postgresql官网</a>下载JDBC驱动。</p>\n<p>要注意的是，一定要下载<strong>匹配的java版本</strong>。</p>\n<p>比如MATLAB R2018b对应的java版本是java 8，那么必须使用PostgreSQL JDBC 4.2；<br>而如果MATLAB R2018b对应的java版本是java 7，那么则需使用PostgreSQL JDBC 4.1。</p>\n<p>下面matlab命令可以查看适配的java版本。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; version -java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ans</span> =</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;Java 1.8.0_152-b16 with Oracle Corporation Java HotSpot(TM) 64-Bit Server VM mixed mode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装PostgreSQL-JDBC-driver\"><a href=\"#安装PostgreSQL-JDBC-driver\" class=\"headerlink\" title=\"安装PostgreSQL JDBC driver\"></a>安装PostgreSQL JDBC driver</h2><p>JDBC driver只是一个jar文件，还需要让matlab能读到。</p>\n<p>matlab<a href=\"https://www.mathworks.com/help/matlab/matlab_external/java-class-path.html\">搜索java库</a>有两种方式，<a href=\"https://www.mathworks.com/help/matlab/matlab_external/static-path-of-java-class-path.html\">静态路径</a>和<a href=\"https://www.mathworks.com/help/matlab/matlab_external/dynamic-path-of-java-class-path.html\">动态路径</a>。前者更简单，我们用这个。</p>\n<p>matlab会在启动时读取用户首选项文件夹下的javaclasspath.txt来载入java路径，我们只需要将下载好的jar路径写入这个文件。</p>\n<ul>\n<li>在matlab中编辑javaclasspath.txt<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd(prefdir)</span><br><span class=\"line\">edit javaclasspath.txt</span><br></pre></td></tr></table></figure></li>\n<li>在文件末尾添加jar文件路径<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\Users\\matlab\\Downloads\\postgresql-42.2.18.jar</span><br></pre></td></tr></table></figure></li>\n<li>重启matlab让它加载</li>\n</ul>\n<h2 id=\"直接代码走起\"><a href=\"#直接代码走起\" class=\"headerlink\" title=\"直接代码走起\"></a>直接代码走起</h2><p>如果是急性子，现在就已经可以运行SQL查询了。具体使用方法可参见<a href=\"https://www.mathworks.com/help/database/ug/database.html\">官网文档</a>。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%% Make connection to database</span></span><br><span class=\"line\">conn = database(<span class=\"string\">&#x27;database-name&#x27;</span>,<span class=\"string\">&#x27;username&#x27;</span>,<span class=\"string\">&#x27;password&#x27;</span>,<span class=\"string\">&#x27;Vendor&#x27;</span>,<span class=\"string\">&#x27;POSTGRESQL&#x27;</span>,<span class=\"string\">&#x27;Server&#x27;</span>,<span class=\"string\">&#x27;server-host&#x27;</span>,<span class=\"string\">&#x27;PortNumber&#x27;</span>,port-number);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% Execute query and fetch results</span></span><br><span class=\"line\">data = fetch(conn,[<span class=\"string\">&#x27;SELECT * &#x27;</span> ...</span><br><span class=\"line\">    <span class=\"string\">&#x27;FROM schema.table&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">%% Close connection to database</span></span><br><span class=\"line\">close(conn)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用matlab内置的Database-Explorer来查看数据\"><a href=\"#使用matlab内置的Database-Explorer来查看数据\" class=\"headerlink\" title=\"使用matlab内置的Database Explorer来查看数据\"></a>使用matlab内置的Database Explorer来查看数据</h2><p>打开app标签下的Database Exploerer：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-app.png\" class=\"\" title=\"matlab app\">\n\n<p>配置JDBC数据源：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-database-explorer-1.png\" class=\"\" title=\"matlab app\">\n\n<p>添加PostgreSQL JDBC数据源：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-database-explorer-2.png\" class=\"\" title=\"matlab app\">\n\n<p>创建查询：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-database-explorer-3.png\" class=\"\" title=\"matlab app\">\n\n<p>选择刚才添加的数据源：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-database-explorer-4.png\" class=\"\" title=\"matlab app\">\n\n<p>输入账号密码即可连接预览：</p>\n<img src=\"/blog/2020/11/30/matlab-connect-to-postgresql/matlab-database-explorer-5.png\" class=\"\" title=\"matlab app\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["sql"]},{"title":"【转载】在远程桌面下启动MATLAB的方法","url":"/blog/2021/04/06/matlab-on-remote/","content":"<p>本文转载自<a href=\"https://www.zhihu.com/people/zkw-zkw\">zkw zkw</a>的<a href=\"https://zhuanlan.zhihu.com/p/32228416\">知乎专栏文章</a>。</p>\n<p>此方法可以解决远程桌面下启动MATLAB时的License Manager Error -103错误。</p>\n<p>也能够解决远程桌面下启动modelsim的错误。</p>\n<p>方法如下：</p>\n<ol>\n<li>打开C:\\Program Files\\MATLAB\\R2015b\\licenses\\license*.lic</li>\n<li>在每条记录后添加“TS_OK”</li>\n</ol>\n<p>之后就可以在远程桌面中正常打开matlab。</p>\n<img src=\"/blog/2021/04/06/matlab-on-remote/lic.jpg\" class=\"\" title=\"lic\">\n\n<p>可使用vs code正则表达式来快速添加：<br>查找内容：<code>SIGN=\\w&#123;12&#125;</code><br>替换内容：<code>$0 TS_OK</code></p>\n<p>方法思路来源：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/yanerhao/article/details/52203394\">远程登录时安装MATLAB的License Manager Error -103错误</a> ：Matlab出现这一出错信息，通常为远程登录所致。究其原因，大概是FLEXlm的一个bug，凡是用到FLEXlm的软件，在打开时都必须有一个本地用户登录，否则远程登录就会出错。<br>发现了MATLAB与FLEXlm的关系。</li>\n<li><a href=\"https://blog.csdn.net/a58220655/article/details/48996045\">RVCT远程登录时报错的解决办法</a> ：最后参考RVDS自带的文档“Macrovision FLEXlm End User Guide v9.0”里面的介绍，在licence.dat文件中相关位置加上了 TS_OK字段后远程登录就再也没问题了。<br>发现了TS_OK字段。</li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_471e6c930102x2qv.html\">为什么我的MATLAB激活成功后打开还是激活界面！</a><br>找到了TS_OK字段的具体用法样例。</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"mac下的windows远程桌面","url":"/blog/2022/06/16/microsoft-remote-desktop-mac/","content":"<p><a href=\"https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients\">Microsoft Remote Desktop</a>是微软官方的远程桌面软件，它的<a href=\"https://apps.apple.com/app/microsoft-remote-desktop/id1295203466?mt=12\">mac版</a>也非常好用，但莫名奇妙的有一天从中国应用商店下架了。</p>\n<p>好吧，那我们只能去找非商店版本。</p>\n<p>可以去到微软的<a href=\"https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-mac\">Get started with the macOS client</a>页面，找到<a href=\"https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac\">Microsoft Remote Desktop for Mac</a>。</p>\n<p>或者找到<a href=\"https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/mac-whatsnew\">What’s new in the macOS client</a>中的<a href=\"https://aka.ms/rdmacbeta\">https://aka.ms/rdmacbeta</a>也一样。<code>rdmacbeta</code>其实就是上面的<a href=\"https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac\">Microsoft Remote Desktop for Mac</a>的短网址。</p>\n<p>因为苹果应用商店中已经提供了正式版，所以在这个下载页面微软只提供Beta版本。</p>\n<p>但没关系，Beta版总好过用不了对吧。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"微软应用商店无法连接","url":"/blog/2021/07/30/microsoft-store-error/","content":"<p>因为<a href=\"https://zh.wikipedia.org/zh-cn/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E\">GFW</a>，一般来说首先怀疑的是网络连接。</p>\n<p><strong>* 关闭代理</strong></p>\n<p>Microsoft Store似乎无法工作在代理下，第一个要尝试的就是关掉代理重试。</p>\n<p>只是简单的关掉代理有时并不能有效的解决问题，可以去windows的设置中取消代理设置：</p>\n<ul>\n<li>打开<code>Internet Explorer</code>，就是老的自带浏览器，非Edge</li>\n<li>点击<code>工具(Tool)</code>菜单</li>\n<li>打开<code>Internet选项</code>设置</li>\n<li>选择<code>连接(Connection)</code>标签页</li>\n<li>进入<code>局域网设置(LAN Settings)</code></li>\n<li>把3个单选框都取消。</li>\n</ul>\n<p>如果使用的是clash for windows客户端，在<strong>系统代理（system proxy）</strong>时会修改此处的<code>使用自动配置脚本</code>配置，将自动配置脚本的地址设置为<code>http://127.0.0.1:59742/pac?t=1636534581626</code>。<br>其中的内容是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FindProxyForURL</span>(<span class=\"params\">url, host</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;PROXY 127.0.0.1:7890; SOCKS5 127.0.0.1:7890; DIRECT;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>取消clash for windows的<strong>系统代理（system proxy）</strong>也会取消<code>使用自动配置脚本</code>配置项的选中。</p>\n<p><strong>DNS</strong> </p>\n<p>尝试修改DNS为<code>4.2.2.1</code>或<code>4.2.2.2</code>，不使用宽带运营商的。</p>\n<p>如果确保网络没问题，那大概率是应用商店设置的问题。</p>\n<p><strong>清理应用商店的缓存</strong></p>\n<p>运行WSReset，清除缓存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">WSReset.exe</span><br></pre></td></tr></table></figure>\n\n<p><strong>重置应用商店</strong></p>\n<p>打开 设置&gt;应用&gt;应用和功能&gt;在左边的列表中找到应用商店选中&gt;高级选项&gt;重置。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"modevol","url":"/blog/2023/03/15/modevol/","content":"<p>本期善用佳软推荐一种新的线上学习模式，由于建国（下面称YJango）开发的线上学习网站<a href=\"https://www.modevol.com/\">modevol</a>。</p>\n<p>YJango是一个科普UP主，第一次认识他是因为他在B站上发布的<a href=\"https://space.bilibili.com/344849038/channel/seriesdetail?sid=341793\">学习观系列视频</a>。这套视频从18年开始，一直制作到了21年，目前也还在更新。<br>当时我正在自学机器学习，感觉机器学习中训练模型和人类学习的过程有一定的相似之处。恰好看到了这套视频，发现里面很详尽的讨论了人类学习的步骤，非常有共鸣。可惜因为YJango更新过慢，后面就没追下去。</p>\n<p>最近因为他最新一期视频<a href=\"https://www.bilibili.com/video/BV1MY4y1R7EN/?vd_source=c7886e2725f3aa3fc604633fdf1c0bf7\">【渐构】万字科普GPT-4为什么会颠覆人类社会</a>重新关注了他，发现他创建了一个线上学习网站，把他之前做的<a href=\"https://www.modevol.com/episode/cl4zh80o48f2101o3e2iv849s\">学习观</a>视频搬上去了。</p>\n<img src=\"/blog/2023/03/15/modevol/learning-model.png\" class=\"\" title=\"学习观\">\n\n<p>同时介绍了他<a href=\"https://www.modevol.com/episode/claca9lijb13j01me2inlbu1t\">为什么会创建这样一个网站</a>（果然他是从事多模态机器学习研究的计算机工学博士，我就说他对机器学习的理解怎么这么深）。</p>\n<img src=\"/blog/2023/03/15/modevol/teaching-method.png\" class=\"\" title=\"教学方式\">\n\n<p><a href=\"https://www.modevol.com/episode/clf9d5kni0zo301mm6tkl9t87\">最近的ChatGPT</a>，他认为这很有可能就是他一直追求的学习系统升级。</p>\n<img src=\"/blog/2023/03/15/modevol/chatgpt.png\" class=\"\" title=\"ChatGPT\">\n\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"下载软件idm的替代品：ndm","url":"/blog/2022/07/07/neat-download-manager/","content":"<p>上一期我们介绍了最好用的下载工具之一<a href=\"https://www.internetdownloadmanager.com/\">idm</a>，但有人即不想付费也不想钻漏洞搞无限试用，那么隆重推荐idm的替代品：<a href=\"https://www.neatdownloadmanager.com/\">ndm: NeatDownloadManager</a>。</p>\n<p>它在易用性和功能性方面略逊于idm，但这些功能我们平时也用不到呀，最重要的是它是免费软件，而且支持macOS。那还说啥，冲就完事。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"网络小说推荐","url":"/blog/2023/01/30/network-literature-recommendation/","content":"<p>还没想好要怎么归类，先堆在这吧，以后再优化。</p>\n<p>连载字数均为截止至发文时间。</p>\n<p><a href=\"https://duread8.com/book/book_detail/100184877\">暴风城打工实录</a> - 又一个鱼雷<br>平台：独阅读<br>状态：连载<br>字数：149万字<br>故事背景是魔兽世界，但并不是网游文，情节推动合理，WOW玩家狂喜。</p>\n<p><a href=\"https://book.qidian.com/info/1024194308/\">玩家请上车</a> - 海晏山<br>平台：起点中文<br>状态：连载<br>字数：299万字<br>无限悬疑，一轮一轮游戏看的挺爽。</p>\n<p><a href=\"https://book.qidian.com/info/1035515248/\">我可不是侦探</a> - 海底漫步者<br>平台：起点中文<br>状态：连载<br>字数：61万字<br>海底新书，事件和日常交融的挺好的。</p>\n<p><a href=\"https://book.qidian.com/info/1025461668/\">每天都离现形更进一步</a> - 陈词懒调<br>平台：起点中文<br>状态：连载<br>字数：135万字<br>都市文，攒一两百章可以一口气看下去。</p>\n<p><a href=\"https://book.qidian.com/info/1031793987/\">死亡赔偿金</a> - 虚鸣<br>平台：起点中文<br>状态：连载<br>字数：178万字<br>无限流，攒一卷下来看的挺爽的。<br>第一个世界是武侠，第二个世界是被人从武侠嚯嚯成诡异武侠。<br>每个世界里反转和高潮写都不错，主角也没吃瘪。<br>配角很标签化不够深刻，不过贯彻了标签，能够在这个世界里记住他。</p>\n<p><a href=\"https://book.qidian.com/info/1027630529/\">呢喃诗章</a> - 咸鱼飞行家<br>平台：起点中文<br>状态：连载<br>字数：442万字</p>\n<p><a href=\"https://book.qidian.com/info/1009398284/\">逆流纯真年代</a>  - 人间武库<br>平台：起点中文<br>状态：完结，2022-11-25<br>字数：218万字</p>\n<p><a href=\"https://book.qidian.com/info/1013026063/\">重生野性时代</a> - 王梓钧<br>平台：起点中文<br>状态：完结，2021-06-13<br>字数：205万字</p>\n<p><a href=\"https://book.qidian.com/info/1017266570/\">重塑千禧年代</a> - 渔雪<br>平台：起点中文<br>状态：连载<br>字数：331万字<br>重生回2000年代，弄潮中国互联网的故事，写风投和互联网公司之间的故事很精彩，主角突出一个厚黑。</p>\n<p><a href=\"https://book.qidian.com/info/1035508684/\">吃货封神录</a> - 一点雨山前<br>平台：起点中文<br>状态：连载<br>字数：37万字<br>美食文，穿越者哮天犬养性转杨戬。</p>\n<p><a href=\"https://book.qidian.com/info/1015350660/\">降魔专家</a> - 吃书妖<br>平台：起点中文<br>状态：太监，作者最近一次更新是2020-12-15，说自己住院<br>字数：42万字<br>分段短篇故事无敌流。<br>剧情出彩，人物独立特别。脑洞大，伏笔回收合理，逻辑自治。<br>虽然太监了，但是每章都是独立故事，每一章都相当完结一部短篇可以补。</p>\n<p><a href=\"https://mip.ciweimao.com/book/100018709\">反正我是超能力者</a> - 吃书妖<br>平台：刺猬猫<br>状态：完结，2018-10-05<br>字数：132万<br>短篇副本流无敌文，降魔专家作者吃书妖的早期作品，相对降魔有些不成熟更二次元，但是剧情依然出彩，人物刻画特别，不少反派有血有肉，最主要，完结了。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"使用新必应New Bing","url":"/blog/2023/03/08/new-bing/","content":"<p>微软推出了<a href=\"https://www.bing.com/new\">New Bing</a>，但从大陆直连会被重定向到<a href=\"https://cn.bing.com/\">中国必应</a>，无法申请或使用。</p>\n<p>顺带一提，<a href=\"https://chat.openai.com/\">ChatGPT</a>也做了访问限制，ban掉了中国大陆IP和常见的机场IP。</p>\n<p>网站会根据访问者的IP，以及Cookie等信息来判断访问者所在地区。</p>\n<h2 id=\"修改Http-Header\"><a href=\"#修改Http-Header\" class=\"headerlink\" title=\"修改Http Header\"></a>修改Http Header</h2><p>如果你在网上搜索怎么在国内访问新必应，得到的答案通常会是修改Http Header。</p>\n<p>比如使用Edge扩展<a href=\"https://microsoftedge.microsoft.com/addons/detail/modheader-modify-http-h/opgbiafapkbbnbnjcdomjaghbckfkglc\">ModHeader</a>来将<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For\">X-Forwarded-For</a>设置为<code>8.8.8.8</code>。</p>\n<img src=\"/blog/2023/03/08/new-bing/mod-header.png\" class=\"\" title=\"ModHeader\">\n\n<p>但并不会一直成功，经常会出现错误：</p>\n<img src=\"/blog/2023/03/08/new-bing/bad-ref.png\" class=\"\" title=\"ref错误\">\n\n<h2 id=\"使用Edge-Dev\"><a href=\"#使用Edge-Dev\" class=\"headerlink\" title=\"使用Edge Dev\"></a>使用Edge Dev</h2><p>有一个更简单的方法是使用<a href=\"https://www.microsoftedgeinsider.com/zh-cn/download\">Edge Dev渠道版本</a>，在Edge Dev的右上角直接有一个新必应的图标，点击即可使用。</p>\n<img src=\"/blog/2023/03/08/new-bing/edge-dev.png\" class=\"\" title=\"Edge Dev\">\n\n<h2 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理</h2><p>可以设置使用代理访问<code>www.bing.com</code>，可以参考这篇<a href=\"/blog/2022/07/25/openwrt-openclash/#自定义规则集\">OpenClash的文章</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"nginx优化","url":"/blog/2018/01/21/nginx-optimization/","content":"<h2 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h2><p><strong>worker_processes</strong></p>\n<p>进程数设置，通常和worker_cpu_affinity搭配使用。</p>\n<p>比如一个4核机器，设置为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes    4;</span><br><span class=\"line\">worker_cpu_affinity 0001 0010 0100 1000;</span><br></pre></td></tr></table></figure>\n<p>代表开4个进程，分别绑定CPU0-CPU3。</p>\n<p>worker_processes取值可以为auto，会自动设置为cpu个数。<br>worker_cpu_affinity取值也可以为auto，会自动分别绑定可用的cpu。也可以auto 01010101，表示分别绑定CPU1、CPU3、CPU5、CPU7。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"开源直播软件obs","url":"/blog/2023/01/10/obs/","content":"<p>这期的善用佳软是一款<a href=\"https://github.com/obsproject/obs-studio\">开源</a>直播软件<a href=\"https://obsproject.com/\">Open Broadcaster Software(OBS)</a>。</p>\n<p>支持Windows是肯定的，同时还支持macOS，甚至丧心病狂的支持了Linux。</p>\n<p>软件的界面长这个样子：</p>\n<img src=\"/blog/2023/01/10/obs/ui.png\" class=\"\" title=\"主界面\">\n\n<p>软件的设计者讲求极简，设置一目了然。</p>\n<p>如果要当作虚拟摄像头使用，可以在自动配置向导中选择：</p>\n<img src=\"/blog/2023/01/10/obs/only-for-virtual-camera.png\" class=\"\" title=\"只使用虚拟摄像头\">\n\n<p>如果你的电脑没有硬件摄像头，在启动虚拟摄像机后，打开windows自带的Camera应用，会发现仍然无法找到摄像头。此时不要困惑，因为Camera应用只识别硬件摄像头，会忽略虚拟摄像头。</p>\n<p>我们换成钉钉或腾讯会议，就会发现OBS Camera了。</p>\n<img src=\"/blog/2023/01/10/obs/dingtalk.png\" class=\"\" title=\"钉钉中的摄像头\">\n\n<p>注意，当OBS设置为虚拟摄像头时，它真正输出的是预览界面水平翻转后的画面，因为使用摄像头的软件默认会将摄像头画面水平翻转。</p>\n<p>钉钉很不错，提供了“开启镜像”的开关，我们取消掉就行了。腾讯会议也提供了“视频镜像”的开关。</p>\n<img src=\"/blog/2023/01/10/obs/tencent-meeting.png\" class=\"\" title=\"腾讯会议中的摄像头\">\n\n<p>如果软件没有提供水平翻转的开关，我们可以在OBS里将来源放进一个分组，然后给分组设置一个水平翻转的变换。只是这样预览就变成镜像了。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"office-admin-debugging时每次都提示localhost loopback","url":"/blog/2021/05/13/office-admin-debugging-loopback/","content":"<p>最近在做一个<a href=\"https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-overview\">excel插件</a>，使用新的<a href=\"https://github.com/OfficeDev/office-js\">office.js</a>技术栈而不是<a href=\"https://docs.microsoft.com/en-us/visualstudio/vsto/create-vsto-add-ins-for-office-by-using-visual-studio?view=vs-2019\">VisualStudio Tools for Office</a>。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>开发时需要用到office-addin-debugging，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ office-addin-debugging start manifest.xml desktop --app excel</span><br><span class=\"line\">Debugging is being started...</span><br><span class=\"line\">App <span class=\"built_in\">type</span>: desktop</span><br><span class=\"line\">? Allow localhost loopback <span class=\"keyword\">for</span> Microsoft Edge WebView? (Y/n) </span><br></pre></td></tr></table></figure>\n\n<p>但每次启动都会提示而不是会记住选择。</p>\n<h2 id=\"查找原因\"><a href=\"#查找原因\" class=\"headerlink\" title=\"查找原因\"></a>查找原因</h2><p>看了下源码，问题出现的原因其实出奇的简单。</p>\n<p>我们一步步的看吧。</p>\n<h3 id=\"office-addin-debugging命令\"><a href=\"#office-addin-debugging命令\" class=\"headerlink\" title=\"office-addin-debugging命令\"></a>office-addin-debugging命令</h3><p><code>office-addin-debugging</code>调用的是<code>node_modules\\.bin\\</code>下的可执行文件，在windwos下是<code>office-addin-debugging.cmd</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node  <span class=\"string\">&quot;%~dp0\\..\\office-addin-debugging\\cli.js&quot;</span> %* </span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-debugging/src/cli.ts#L32\">cli.ts</a> -&gt;<br><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-debugging/src/commands.ts#L82\">commands.ts@start</a> -&gt;<br><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-debugging/src/start.ts#L244\">start.ts@startDebugging</a> -&gt;<br><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-debugging/src/start.ts#L300\">office-addin-dev-settings@ensureLoopbackIsEnabled</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// enable loopback for Edge</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isWindowsPlatform &amp;&amp; <span class=\"built_in\">parseInt</span>(os.<span class=\"title function_\">release</span>(), <span class=\"number\">10</span>) === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = isDesktopAppType ? <span class=\"string\">&quot;EdgeWebView&quot;</span> : <span class=\"string\">&quot;EdgeWebBrowser&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> devSettings.<span class=\"title function_\">ensureLoopbackIsEnabled</span>(name); <span class=\"comment\">// &lt;- 为edge开启loopback</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"office-addin-dev-settings\"><a href=\"#office-addin-dev-settings\" class=\"headerlink\" title=\"office-addin-dev-settings\"></a>office-addin-dev-settings</h3><p><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-dev-settings/src/appcontainer.ts#L123\">appcontainer.ts@ensureLoopbackIsEnabled</a> -&gt;<br><a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-dev-settings/src/appcontainer.ts#L51\">appcontainer.ts@isLoopbackExemptionForAppcontainer</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`CheckNetIsolation.exe LoopbackExempt -s`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  childProcess.<span class=\"title function_\">exec</span>(command, <span class=\"function\">(<span class=\"params\">error, stdout</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(stdout);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> expr = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`Name: <span class=\"subst\">$&#123;name&#125;</span>`</span>, <span class=\"string\">&quot;i&quot;</span>); <span class=\"comment\">// &lt;- 判断是否已经在豁免列表</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">found</span>: <span class=\"built_in\">boolean</span> = expr.<span class=\"title function_\">test</span>(stdout);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(found);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"stdout\"><a href=\"#stdout\" class=\"headerlink\" title=\"stdout\"></a>stdout</h3><p>stdout的内容会根据<a href=\"https://docs.microsoft.com/en-us/windows/console/console-code-pages\">console code page</a>变化，并不一定是英文的。</p>\n<p>如果我们的windows显示语言为中文，活跃代码页为<a href=\"https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers\">936(gb2312)</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chcp</span><br><span class=\"line\">活动代码页: 936</span><br></pre></td></tr></table></figure>\n\n<p>此时上面的命令行<code>CheckNetIsolation.exe LoopbackExempt -s</code>输出的stout为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ CheckNetIsolation.exe LoopbackExempt -s</span><br><span class=\"line\"></span><br><span class=\"line\">列出环回免除的 AppContainer</span><br><span class=\"line\"></span><br><span class=\"line\">[1] -----------------------------------------------------------------</span><br><span class=\"line\">    名称: microsoft.win32webviewhost_cw5n1h2txyewy</span><br><span class=\"line\">    SID:  S-1-15-2-1310292540-1029022339-4008023048-2190398717-53961996-4257829345-603366646</span><br></pre></td></tr></table></figure>\n\n<p>注意到那个汉字<code>名称:</code>了吗？此时的匹配就会无效<code>RegExp(`Name: $&#123;name&#125;`, &quot;i&quot;)</code>。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>直接改源码，只需将<a href=\"https://github.com/OfficeDev/Office-Addin-Scripts/blob/4ad77d7ac6e8ce8b7f5e778ad76e47749b489943/packages/office-addin-dev-settings/src/appcontainer.ts#L63\"><code>RegExp(`Name: $&#123;name&#125;`, &quot;i&quot;)</code></a>改为<code>RegExp(`$&#123;name&#125;`, &quot;i&quot;)</code>就完事。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>不改源码，让<code>childProcess.exec(command,</code>的stdout为英文。</p>\n<p>方案二可能会增加开发的前置工作，故直接使用方案一。只需要修改excel插件工程下的<code>node_modules\\office-addin-dev-settings\\lib\\appcontainer.js</code>，就对当前工程一直用效。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"[Openwrt]使用aria2","url":"/blog/2022/07/26/openwrt-aria2/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>aria2包括三部分：</p>\n<ul>\n<li>内核: aria2</li>\n<li>web控制台: ariang</li>\n<li>luci页面: luci-app-aria2。中文语言包，luci-i18n-aria2-zh-cn。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install aria2</span><br><span class=\"line\">opkg install ariang</span><br><span class=\"line\">opkg install luci-app-aria2</span><br><span class=\"line\">opkg install luci-i18n-aria2-zh-cn</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用服务\"><a href=\"#启用服务\" class=\"headerlink\" title=\"启用服务\"></a>启用服务</h2><p>在去控制台启用aria2服务之前，要先确定下载目录存在并且aria2用户有写入权限。</p>\n<img src=\"/blog/2022/07/26/openwrt-aria2/openwrt-aria2.png\" class=\"\" title=\"启用服务\">\n\n<p>假设下载目录为<code>/root/aria2/download</code>，我们需要先</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/aria2/download</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /root/aria2/download</span><br></pre></td></tr></table></figure>\n\n<p>才可以启用aria2，保存并应用，等待并检查aria2服务是否正确启用。</p>\n<p>另外，我们需要将配置文件目录从默认的临时目录<code>/var/etc/aria2</code>改到一个永久目录，比如<code>/root/aria2/config</code>，防止重启后配置丢失。</p>\n<p><a href=\"https://forum.openwrt.org/t/persistent-var/119427/2\">openwrt的&#x2F;var目录是指向&#x2F;tmp的一个符号链接</a>，<a href=\"https://forum.openwrt.org/t/permanent-var-directory-will-i-be-safe/37071/4\">不要直接把&#x2F;var指向永久目录</a>。</p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>在使用aria2下载磁力链接前，先设置初始BitTorrent Trackers。</p>\n<p>使用<a href=\"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt\">trackers_best_ip.txt</a>，注意要将2个换行符替换成<code>,</code>来适配语法。</p>\n\n\n<h2 id=\"内网穿透\"><a href=\"#内网穿透\" class=\"headerlink\" title=\"内网穿透\"></a>内网穿透</h2><p>如果想用内网穿透访问AriaNg页面，默认是无法访问的。</p>\n<p>原因是默认的Aria2 RPC地址是<code>http://luci.domain.com:6800/jsonrpc</code>，注意里面的<code>:6800</code>。</p>\n<p>内网穿透一般不支持80或443之外的端口，需要修改两个地方：</p>\n<ol>\n<li><p>frpc<br>在frpc添加</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[ariang]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">6800</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = aria2.domain.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AriaNg<br>在AriaNg的<code>AriaNg设置</code>中，修改RPC的地址为<code>http://aria2.domain.com:80/jsonrpc</code>。</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[Openwrt]使用clouddrive","url":"/blog/2022/07/29/openwrt-clouddrive/","content":"<p><a href=\"https://t.me/s/cloud_nas\">CloudDrive</a>是一个<strong>闭源</strong>的软件，可以将115、阿里云等网盘mount到本地使用。</p>\n<p>因为需要登录，而它又是闭源的，所以使用是有<strong>风险</strong>的，请不要登录自己的重要账号，建一个小号来使用它。</p>\n<p>它有两个版本，windows版和<a href=\"https://hub.docker.com/r/cloudnas/clouddrive\">docker版</a>，我们使用docker版本。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"fuse\"><a href=\"#fuse\" class=\"headerlink\" title=\"fuse\"></a>fuse</h3><p>首先它依赖fuse，先安装fuse-utils：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update &amp;&amp; opkg install fuse-utils</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shared-mount\"><a href=\"#shared-mount\" class=\"headerlink\" title=\"shared mount\"></a>shared mount</h3><p>因为clouddrive使用fuse来挂载云盘，为了能将容器中挂载的fuse共享到宿主机，我们挂载到docker容器的卷必须是shared类型，<del>且为docker 数据分区</del>，所以我们需要准备一个shared类型的挂载点。</p>\n<p><del>docker数据分区为<code>/opt/docker</code>，而我们使用的磁盘<code>/dev/sdb1</code>被挂载在了根目录，所以满足要求，可以用来当挂载点：<code>mount /dev/sdb1 /mnt/system</code>。</del></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount --make-shared /mnt/system</span><br></pre></td></tr></table></figure>\n\n<p>同时，记得将<code>mount --make-shared /mnt/system</code>这行代码加到开机启动脚本<code>/etc/rc.local</code>的<code>exit 0</code>前面，使得重启后也有效。</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --name clouddrive \\</span><br><span class=\"line\">    --restart unless-stopped \\</span><br><span class=\"line\">    -v /mnt/system/CloudNAS:/CloudNAS:shared \\</span><br><span class=\"line\">    -v /mnt/system/CloudConfig:/Config \\</span><br><span class=\"line\">    -p 9798:9798 \\</span><br><span class=\"line\">    --privileged \\</span><br><span class=\"line\">    --device /dev/fuse:/dev/fuse \\</span><br><span class=\"line\">    cloudnas/clouddrive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>打开控制台<code>http://192.168.8.1:9798</code>，绑定阿里云盘。</p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>于是我们可以使用<a href=\"https://jellyfin.org/\">Jellyfin</a>观看云盘上的内容了。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[Openwrt]使用docker","url":"/blog/2022/07/25/openwrt-docker/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install dockerd</span><br><span class=\"line\">opkg install luci-app-dockerman</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>安装完后需要重启一次，docker0 bridge interface才会生效。</p>\n<h2 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h2><p>docker使用的目录为<code>/opt/docker</code>，所以我们在安装docker前，需要准确一个足够剩余空间的<code>/opt</code>，docker的镜像文件还是蛮占空间的。</p>\n<h2 id=\"以jellyfin为例\"><a href=\"#以jellyfin为例\" class=\"headerlink\" title=\"以jellyfin为例\"></a>以jellyfin为例</h2><p>我们试着<a href=\"https://jellyfin.org/docs/general/administration/installing.html#container-images\">在docker中安装jellyfin</a>。</p>\n<ol>\n<li>下载镜像文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jellyfin/jellyfin</span><br></pre></td></tr></table></figure>\n\n<p>如果官方源连接失败，我们可以切换到国内源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; docker pull jellyfin/jellyfin</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">Error response from daemon: Get <span class=\"string\">&quot;https://registry-1.docker.io/v2/&quot;</span>: net/http: TLS handshake <span class=\"built_in\">timeout</span></span><br></pre></td></tr></table></figure>\n\n<p>修改<code>/etc/config/dockerd</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># The following settings require a restart of docker to take full effect, A reload will only have partial or no effect:</span><br><span class=\"line\"># bip</span><br><span class=\"line\"># blocked_interfaces</span><br><span class=\"line\"># extra_iptables_args</span><br><span class=\"line\"># device</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#x27;globals&#x27;</span><br><span class=\"line\">#       option alt_config_file &#x27;/etc/docker/daemon.json&#x27;</span><br><span class=\"line\">        option data_root &#x27;/opt/docker/&#x27;</span><br><span class=\"line\">        option log_level &#x27;warn&#x27;</span><br><span class=\"line\">        option iptables &#x27;1&#x27;</span><br><span class=\"line\">#       list hosts &#x27;unix:///var/run/docker.sock&#x27;</span><br><span class=\"line\">#       option bip &#x27;172.18.0.1/24&#x27;</span><br><span class=\"line\">#       option fixed_cidr &#x27;172.17.0.0/16&#x27;</span><br><span class=\"line\">#       option fixed_cidr_v6 &#x27;fc00:1::/80&#x27;</span><br><span class=\"line\">#       option ipv6 &#x27;1&#x27;</span><br><span class=\"line\">#       option ip &#x27;::ffff:0.0.0.0&#x27;</span><br><span class=\"line\">#       list dns &#x27;172.17.0.1&#x27;</span><br><span class=\"line\">        list registry_mirrors &#x27;https://docker.mirrors.ustc.edu.cn/&#x27;    # &lt;-------- 添加国内源</span><br><span class=\"line\">#       list registry_mirrors &#x27;https://hub.docker.com&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># Docker ignores fw3 rules and by default all external source IPs are allowed to connect to the Docker host.</span><br><span class=\"line\"># See https://docs.docker.com/network/iptables/ for more details.</span><br><span class=\"line\"># firewall config changes are only additive i.e firewall will need to be restarted first to clear old changes,</span><br><span class=\"line\"># then docker restarted to load in new changes.</span><br><span class=\"line\">config firewall &#x27;firewall&#x27;</span><br><span class=\"line\">        option device &#x27;docker0&#x27;</span><br><span class=\"line\">        list blocked_interfaces &#x27;wan&#x27;</span><br><span class=\"line\">#       option extra_iptables_args &#x27;--match conntrack ! --ctstate RELATED,ESTABLISHED&#x27; # allow outbound connections</span><br></pre></td></tr></table></figure>\n\n<p>修改完后重启dockerd并验证国内源是否添加成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; service dockerd restart</span><br><span class=\"line\">$&gt; docker info</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> Registry: https://index.docker.io/v1/</span><br><span class=\"line\"> Labels:</span><br><span class=\"line\"> Experimental: <span class=\"literal\">false</span></span><br><span class=\"line\"> Insecure Registries:</span><br><span class=\"line\">  127.0.0.0/8</span><br><span class=\"line\"> Registry Mirrors:</span><br><span class=\"line\">  https://docker.mirrors.ustc.edu.cn/</span><br><span class=\"line\"> Live Restore Enabled: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: No swap <span class=\"built_in\">limit</span> support</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，使用国内源后，latest版本的更新可能不会那么及时，如果需要使用docker hub上的最新版，还得恢复到官方源，<a href=\"https://docs.docker.com/network/proxy/\">使用代理</a>来拉取。</p>\n<ol start=\"2\">\n<li>创建一个持久化的目录来保存配置和缓存</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /root/jellyfin/config</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /root/jellyfin/cache</span><br></pre></td></tr></table></figure>\n\n<p>或者也可以使用<a href=\"https://docs.docker.com/storage/volumes/\">volume</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create jellyfin-config</span><br><span class=\"line\">docker volume create jellyfin-cache</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name jellyfin \\</span><br><span class=\"line\"> --user uid:gid \\</span><br><span class=\"line\"> --net=host \\</span><br><span class=\"line\"> --volume /path/to/config:/config \\</span><br><span class=\"line\"> --volume /path/to/cache:/cache \\</span><br><span class=\"line\"> --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/path/to/media,target=/media \\</span><br><span class=\"line\"> --restart=unless-stopped \\</span><br><span class=\"line\"> jellyfin/jellyfin</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的uid:gid，和三个路径。</p>\n<p>如果全部使用默认配置，则可以直接一步到位：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/jellyfin/config</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/jellyfin/cache</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/media</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\"> --name jellyfin \\</span><br><span class=\"line\"> --net=host \\</span><br><span class=\"line\"> --volume /root/jellyfin/config:/config \\</span><br><span class=\"line\"> --volume /root/jellyfin/cache:/cache \\</span><br><span class=\"line\"> --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/media,target=/media \\</span><br><span class=\"line\"> --restart=unless-stopped \\</span><br><span class=\"line\"> jellyfin/jellyfin</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>控制台</li>\n</ol>\n<p>默认端口为8096，直接访问<code>http://ip-address-of-openwrt:8096</code>即可访问jellyfin控制台进行初始化设置。</p>\n<p>jellyfin中的<code>/media</code>为OpenWrt中的<code>/root/media</code>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[Openwrt]在Hyper-V中安装OpenWrt","url":"/blog/2023/02/02/openwrt-in-hyper-v/","content":"<p>之前有介绍过在<a href=\"/blog/2022/07/22/openwrt-in-vbox/\" title=\"[Openwrt]在VirtualBox虚拟机中玩耍OpenWrt\">VirtualBox中玩耍OpenWrt</a>，但发现打开Hyper-V后，<a href=\"/blog/2023/02/01/virtualbox-running-slow/\" title=\"VirtualBox在win上特别卡\">VirtualBox的性能大幅下降</a>。其实也可以使用Hyper-V来玩耍OpenWrt。</p>\n<h2 id=\"开启Hyper-V\"><a href=\"#开启Hyper-V\" class=\"headerlink\" title=\"开启Hyper-V\"></a>开启Hyper-V</h2><p>开启Hyper-V有3种方式，参见微软文档<a href=\"https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\">在 Windows 10 上安装 Hyper-V</a>。</p>\n<ol>\n<li><p>在<code>启用或关闭 Windows 功能</code>中找到Hyper-V的选项，将其打开。</p>\n</li>\n<li><p>以管理员身份运行PowerShell</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Enable-WindowsOptionalFeature</span> <span class=\"literal\">-Online</span> <span class=\"literal\">-FeatureName</span> Microsoft<span class=\"literal\">-Hyper-V</span> <span class=\"literal\">-All</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>又或者以管理员身份运行DISM</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISM /Online /<span class=\"built_in\">Enable-Feature</span> /All /FeatureName:Microsoft<span class=\"literal\">-Hyper-V</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>但如果是家庭版Windows，会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS&gt; Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All   </span><br><span class=\"line\">Enable-WindowsOptionalFeature : 功能名称 Microsoft-Hyper-V 未知。</span><br><span class=\"line\">所在位置 行:1 字符: 1</span><br><span class=\"line\">+ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V  ...</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [Enable-WindowsOptionalFeature], COMException</span><br><span class=\"line\">    + FullyQualifiedErrorId : Microsoft.Dism.Commands.EnableWindowsOptionalFeatureCommand</span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; DISM /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V</span><br><span class=\"line\">错误: 0x800f080c</span><br><span class=\"line\"></span><br><span class=\"line\">功能名称 Microsoft-Hyper-V 未知。</span><br><span class=\"line\">未识别出 Windows 功能名称。</span><br><span class=\"line\">请使用 /Get-Features 选项在映像中查找功能名称，然后重试该命令。</span><br><span class=\"line\"></span><br><span class=\"line\">可以在 C:\\WINDOWS\\Logs\\DISM\\dism.log 上找到 DISM 日志文件</span><br></pre></td></tr></table></figure>\n\n<p>找不到功能<code>Microsoft-Hyper-V</code>，但其实系统里是有的，在<code>%SystemRoot%\\servicing\\Packages\\</code>下，只是没有添加。</p>\n<p>以管理员身份运行Command Pormpt，输入下面的命令：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dir</span> /b <span class=\"variable\">%SystemRoot%</span>\\servicing\\Packages\\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f %i <span class=\"keyword\">in</span> (&#x27;<span class=\"built_in\">findstr</span> /i . hyper-v.txt <span class=\"number\">2</span>^&gt;<span class=\"built_in\">nul</span>&#x27;) <span class=\"keyword\">do</span> dism /online /norestart /add-package:&quot;<span class=\"variable\">%SystemRoot%</span>\\servicing\\Packages\\%i&quot;</span><br><span class=\"line\"><span class=\"built_in\">del</span> hyper-v.txt</span><br><span class=\"line\">Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL</span><br></pre></td></tr></table></figure>\n<p>会提示<code>Microsoft-Hyper-V</code>已安装，但没有完全打开。先不用管，重启一下就行了。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"映像转换\"><a href=\"#映像转换\" class=\"headerlink\" title=\"映像转换\"></a>映像转换</h3><p>与VirtualBox一样，Hyper-V也不支持<a href=\"https://openwrt.org/releases/start\">OpenWrt官网下载</a>的RAW格式.img文件，需要转换成<a href=\"https://learn.microsoft.com/en-us/windows-server/storage/disk-management/manage-virtual-hard-disks\">虚拟硬盘</a>使用。虚拟硬盘的格式包括vhd和第二版的<a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-vhdx/83e061f8-f6e2-4de1-91bd-5d518a43d477\">vhdx</a>两种，可以<a href=\"https://learn.microsoft.com/en-us/troubleshoot/system-center/vmm/convert-between-vhd-vhdx-formats\">互相转换</a>。推荐使用vhdx。</p>\n<p>相比vbox是使用<code>VBoxManage convertfromraw --format VDI openwrt-22.03.3-x86-64-generic-squashfs-combined-efi.img openwrt.vdi</code>命令来将raw转成vdi，hyper-v在命令行之外还提供了带界面的选择。</p>\n<h4 id=\"使用命令行\"><a href=\"#使用命令行\" class=\"headerlink\" title=\"使用命令行\"></a>使用命令行</h4><p>hyper-v这边使用的命令行工具是diskpart。</p>\n<p>首先运行<a href=\"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskpart\">diskpart</a>进入DISKPART命令行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Microsoft DiskPart 版本 10.0.19041.964</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (C) Microsoft Corporation.</span><br><span class=\"line\">On computer: DESKTOP-DEMO</span><br><span class=\"line\"></span><br><span class=\"line\">DISKPART&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建虚拟硬盘文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISKPART&gt; create vdisk file=c:\\test.vhdx maximum=204800 <span class=\"built_in\">type</span>=expandable</span><br><span class=\"line\">    100 percent completed</span><br><span class=\"line\">DiskPart successfully created the virtual disk file.</span><br></pre></td></tr></table></figure>\n\n<p>然后附加，或者说挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISKPART&gt; select vdisk file=c:\\test.vhdx</span><br><span class=\"line\">DiskPart successfully selected the virtual disk file.</span><br><span class=\"line\"></span><br><span class=\"line\">DISKPART&gt; attach vdisk</span><br><span class=\"line\">    100 percent completed</span><br><span class=\"line\">DiskPart successfully attached the virtual disk file.</span><br></pre></td></tr></table></figure>\n\n<p>刷入openwrt的img。此步可以使用刷盘工具<a href=\"https://rufus.ie/zh/\">rufus</a>来进行。</p>\n<img src=\"/blog/2023/02/02/openwrt-in-hyper-v/rufus.png\" class=\"\" title=\"rufus\">\n\n<p>刷入完成后分离，或者说卸载虚拟硬盘</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DISKPART&gt; detach vdisk</span><br><span class=\"line\">DiskPart successfully detached the virtual disk file.</span><br></pre></td></tr></table></figure>\n\n<p>最后记得退出diskpart，否则它还是会占用转换好的vhdx文件。</p>\n<h4 id=\"使用界面\"><a href=\"#使用界面\" class=\"headerlink\" title=\"使用界面\"></a>使用界面</h4><p>使用<a href=\"https://learn.microsoft.com/zh-cn/windows-server/storage/disk-management/overview-of-disk-management\">磁盘管理</a>工具，可按照<a href=\"https://learn.microsoft.com/zh-cn/windows-server/storage/disk-management/manage-virtual-hard-disks\">微软官方的文档</a>操作。</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>我们需要给OpenWrt虚拟机准备两个虚拟交换机：</p>\n<ul>\n<li>一个外部网络，用来对接上级网络，比如光猫；</li>\n<li>一个内部网络，用来连接宿主机和OpenWrt。</li>\n</ul>\n<h4 id=\"外部网络\"><a href=\"#外部网络\" class=\"headerlink\" title=\"外部网络\"></a>外部网络</h4><p>注意在创建外部网络时，先<strong>不要取消</strong><code>允许管理操作系统共享此网络适配器</code>。</p>\n<img src=\"/blog/2023/02/02/openwrt-in-hyper-v/external-network.png\" class=\"\" title=\"外部网络\">\n\n<p>在后续最后全部搞定后，再勾上这个，把以太网的适配器关掉，来让windows使用<code>内部网络</code>这张网卡上网。</p>\n<h4 id=\"内部网络\"><a href=\"#内部网络\" class=\"headerlink\" title=\"内部网络\"></a>内部网络</h4><p>创建好内部网络的虚拟交换机后，需要去设置一下适配器的<code>Internet 协议版本 4 (TCP/IPv4) 属性</code>。</p>\n<h2 id=\"创建虚拟机\"><a href=\"#创建虚拟机\" class=\"headerlink\" title=\"创建虚拟机\"></a>创建虚拟机</h2><img src=\"/blog/2023/02/02/openwrt-in-hyper-v/create-vm.png\" class=\"\" title=\"创建虚拟机\">\n\n<p>有几个注意点：</p>\n<p><strong>代数</strong></p>\n<p>代数<strong>必须</strong>选择第一代，选第二代会提示无法找到UEFI启动设备。</p>\n<p><strong>网络</strong></p>\n<p>默认网络选Internal，这样直接添加第二张网卡External就正好是符合OpenWrt中wan在第二张网卡的习惯。</p>\n<p>OpenWrt默认将第一个网卡<code>eth0</code>视为lan，第二个网卡<code>eth1</code>视作wan，在给虚拟机添加网卡时要注意顺序，与通用习惯保持一致。</p>\n<img src=\"/blog/2023/02/02/openwrt-in-hyper-v/adapter-order.png\" class=\"\" title=\"网卡添加顺序\">\n\n<h2 id=\"启动OpenWrt并连接\"><a href=\"#启动OpenWrt并连接\" class=\"headerlink\" title=\"启动OpenWrt并连接\"></a>启动OpenWrt并连接</h2><p>启动后，输入<code>uci show network</code>查看openwrt的默认网络设置。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network.loopback</span>=interface</span><br><span class=\"line\"><span class=\"attr\">network.loopback.device</span>=<span class=\"string\">&#x27;lo&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.loopback.proto</span>=<span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.loopback.ipaddr</span>=<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.loopback.netmask</span>=<span class=\"string\">&#x27;255.0.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.globals</span>=globals</span><br><span class=\"line\"><span class=\"attr\">network.globals.ula_prefix</span>=<span class=\"string\">&#x27;fd4d:16fb:0036::/48&#x27;</span></span><br><span class=\"line\">network.@device<span class=\"section\">[0]</span>=device</span><br><span class=\"line\">network.@device<span class=\"section\">[0]</span>.<span class=\"attr\">name</span>=<span class=\"string\">&#x27;br-lan&#x27;</span></span><br><span class=\"line\">network.@device<span class=\"section\">[0]</span>.<span class=\"attr\">type</span>=<span class=\"string\">&#x27;bridge&#x27;</span></span><br><span class=\"line\">network.@device<span class=\"section\">[0]</span>.<span class=\"attr\">ports</span>=<span class=\"string\">&#x27;eth0&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.lan</span>=interface</span><br><span class=\"line\"><span class=\"attr\">network.lan.device</span>=<span class=\"string\">&#x27;br-lan&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.lan.proto</span>=<span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.lan.ipaddr</span>=<span class=\"string\">&#x27;192.168.1.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.lan.netmask</span>=<span class=\"string\">&#x27;255.255.255.0&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">network.lan.ip6assign</span>=<span class=\"string\">&#x27;60&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意OpenWrt默认的<code>network.lan.ipaddr</code>是<code>192.168.1.1</code>，之前在创建Internal网卡时，为了避免与上游网关冲突，我们改成了一个不常用的网段<code>192.168.88.1</code>，需要在这里修改配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> network.lan.ipaddr=<span class=\"string\">&#x27;192.168.88.1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果第二块网卡wan是在第一次启动之后再添加，那么默认配置里不会有wan，需要手动添加。<br>但如果在第一次启动前就已经添加好了外部网卡，就不用自己加了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> network.wan=interface</span><br><span class=\"line\">uci <span class=\"built_in\">set</span> network.wan.ifname=<span class=\"string\">&#x27;eth1&#x27;</span></span><br><span class=\"line\">uci <span class=\"built_in\">set</span> network.wan.proto=<span class=\"string\">&#x27;dhcp&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改完后提交并重启。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci commit</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>重启后就一切正常了，即可以通过<a href=\"http://192.168.1.1/\">http://192.168.1.1</a> 访问luci，OpenWrt本身也能够连接网络：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS &gt; ssh root@192.168.1.1</span><br><span class=\"line\">root@OpenWrt:~<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master br-lan state UP qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:15:5d:f2:44:ef brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:15:5d:f2:44:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.0.133/24 brd 192.168.0.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::215:5dff:fef2:44f0/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: br-lan: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 00:15:5d:f2:44:ef brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.88.1/24 brd 192.168.88.255 scope global br-lan</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fdaa:e3e7:5474::1/60 scope global noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::215:5dff:fef2:44ef/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">root@OpenWrt:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>OpenWrt官方映像默认只有几十M的空间，我们之前创建虚拟硬盘时可是指定了200G，需要扩容使用。</p>\n<p>扩容要放在安装软件之前，避免扩容失败反复做无用功。</p>\n<p>参见这篇文章<a href=\"/blog/2023/02/02/openwrt-resize-root/\" title=\"[Openwrt]扩容\">OpenWrt扩容</a></p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows","openwrt"]},{"title":"[Openwrt]在VirtualBox虚拟机中玩耍OpenWrt","url":"/blog/2022/07/22/openwrt-in-vbox/","content":"<p><a href=\"https://openwrt.org/\">OpenWrt官方</a>对OpenWrt的定义，是适合于嵌入式设备的一个Linux发行版。但其实对用户来说，它就是一个开源的路由器操作系统。可以方便的使用<a href=\"https://openwrt.org/docs/guide-user/additional-software/opkg\">opkg</a>包管理来安装和卸载软件，同时有<a href=\"https://openwrt.org/docs/guide-user/luci/start\">luci</a>做为web ui。</p>\n<p>使用OpenWrt制作一个软路由需要一个物理设备，比如经典的低功耗Arm软路由<a href=\"https://openwrt.org/toh/friendlyarm/nanopi_r4s_v1\">R4S</a>，又或者是一个x86的<a href=\"https://item.jd.com/10040065077494.html\">工控机</a>。在这篇贴子里，我们先用虚拟机熟悉一下OpenWrt操作系统，这样以后购买设备后才不会一头雾水。关于设备的挑选，篇幅较长足够另起一篇贴子了，这里就先跳过。</p>\n<h2 id=\"安装VirtualBox\"><a href=\"#安装VirtualBox\" class=\"headerlink\" title=\"安装VirtualBox\"></a>安装VirtualBox</h2><p>谈到虚拟机软件，一般都会推荐<a href=\"https://customerconnect.vmware.com/cn/home\">VMware</a>，但它是商业付费的。而<a href=\"https://www.virtualbox.org/\">VirtualBox</a>是<a href=\"https://www.virtualbox.org/svn/vbox/trunk/\">免费开源</a>的虚拟机软件，成为唯一真神。</p>\n<p>在<a href=\"https://www.virtualbox.org/wiki/Downloads\">下载页面</a>下载对应平台的安装包，全程默认配置运行安装即可。</p>\n<h2 id=\"在vbox中安装OpenWrt\"><a href=\"#在vbox中安装OpenWrt\" class=\"headerlink\" title=\"在vbox中安装OpenWrt\"></a>在vbox中安装OpenWrt</h2><p>OpenWrt官方已经给出了指南：<a href=\"https://openwrt.org/docs/guide-user/virtualization/virtualbox-vm\">在Virtualbox虚拟机中运行OpenWrt</a>，直接对着着做就行，只记录几个需要留意的点。</p>\n<h3 id=\"OpenWrt镜像选择\"><a href=\"#OpenWrt镜像选择\" class=\"headerlink\" title=\"OpenWrt镜像选择\"></a>OpenWrt镜像选择</h3><p>镜像建议使用<code>generic-squashfs-combined-efi.img.gz</code>。ext4没有overlay分区，后续需要额外设置，麻烦。</p>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>OpenWrt推荐的值是128MiB，这有点太少了，后续我们会运行docker，128M绝对不够，建议最少给个1GB。</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><p>默认的单核差不多能将科学上网的网速跑到2MB&#x2F;s。<br>但如果开启了Hyper-V，不要轻易增加核心数，可能会有反效果。关于Hyper-V与VirutalBox的冲突可查看<a href=\"/blog/2023/02/01/virtualbox-running-slow/\" title=\"VirtualBox在win上特别卡\">VirtualBox在win上特别卡</a>。</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>如果想通过VBox里的OpenWrt上网，桥接网卡是必选项，注意要桥接到用来上网的实体网卡上。</p>\n<h2 id=\"OpenWrt国内镜像站\"><a href=\"#OpenWrt国内镜像站\" class=\"headerlink\" title=\"OpenWrt国内镜像站\"></a>OpenWrt国内镜像站</h2><p>国内有<a href=\"https://developer.aliyun.com/mirror/openwrt/\">阿里</a>和<a href=\"https://mirror.sjtu.edu.cn/openwrt/\">上交大</a>两个<a href=\"https://openwrt.org/downloads#mirrors\">官方镜像站</a>任君选择。</p>\n<p>还有<a href=\"https://mirrors.cloud.tencent.com/openwrt/\">腾讯</a>、<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/openwrt/\">清华</a>等非官方的镜像站。</p>\n<p>配置源特别简单，修改<code>/etc/opkg/distfeeds.conf</code>中的网址就好。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s_downloads.openwrt.org_mirror.sjtu.edu.cn/openwrt_&#x27;</span> /etc/opkg/distfeeds.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h2><p>如果想将luci显示语言换成中文，安装中文语言包再刷新下页面就好了。后面可以进到“系统”-&gt;“系统”-&gt;“语言和界面”里切换。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>官方的镜像文件只有100多M的空间，肯定不够用，我们需要将root扩容。</p>\n<p><a href=\"#%E5%AE%9E%E6%9C%BA%E6%89%A9%E5%AE%B9\">实机扩容</a>root大致可以分两步，先是<a href=\"https://openwrt.org/docs/guide-user/storage/usb-drives\">挂载新硬盘</a>获得新的存储空间，再是<a href=\"https://openwrt.org/docs/guide-user/additional-software/extroot_configuration\">扩容root</a>。可以参见：<a href=\"/blog/2023/02/02/openwrt-resize-root/\" title=\"[Openwrt]扩容\">OpenWrt扩容</a>。</p>\n<p>同为虚拟机，VBox里的扩容比Hyper-V要简单得多。</p>\n<p>首先将虚拟机关机；<br>然后在VBox的工具-&gt;介质中，选择我们使用的虚拟磁盘<code>openwrt.vdi</code>，直接将虚拟分配空间的大小改到200G;<br>最后启动虚拟机，完事。</p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><ul>\n<li><a href=\"/blog/2022/07/26/openwrt-aria2/\" title=\"[Openwrt]使用aria2\">[OpenWrt]使用aria2</a></li>\n<li><a href=\"/blog/2022/07/25/openwrt-openclash/\" title=\"[OpenWrt]使用OpenClash科学上网\">[OpenWrt]使用OpenClash科学上网</a></li>\n<li><a href=\"/blog/2022/07/25/openwrt-docker/\" title=\"[Openwrt]使用docker\">[OpenWrt]使用docker</a></li>\n<li><a href=\"/blog/2022/07/25/openwrt-unblock-netease-music/\" title=\"[OpenWrt]解除网易云音乐播放限制\">[OpenWrt]解除网易云音乐播放限制</a></li>\n</ul>\n<h2 id=\"宿主机使用虚拟机中的OpenWrt上网\"><a href=\"#宿主机使用虚拟机中的OpenWrt上网\" class=\"headerlink\" title=\"宿主机使用虚拟机中的OpenWrt上网\"></a>宿主机使用虚拟机中的OpenWrt上网</h2><p>实现宿主机使用虚拟机上网有蛮多路径，我们实现最简单的一种：虚拟机桥接模式。</p>\n<p>虚拟机需要设置两块网卡，一块Host Only，一块桥接网卡。其中，</p>\n<ul>\n<li>Host Only网卡，视为lan。用以连接宿主机。</li>\n<li>桥接网卡，视为wlan。用以连接宿主机的上游，通常是路由器。注意宿主机还可能有Hyper-V等虚拟网卡，桥接网卡是实体网卡，通常以Intel开头，不要选错了。</li>\n</ul>\n<p>在上面<a href=\"https://openwrt.org/zh/docs/guide-user/virtualization/virtualbox-vm#vm%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE\">创建虚拟机</a>时，多半已经设置了这两个网卡，而且还多出一个<code>网络地址转换NAT</code>网卡，需要把NAT网卡先删除掉。</p>\n<p>我们的思路是，宿主机使用Host Only网卡连接虚拟机，虚拟机使用桥接网卡连接上游路由器，同时禁掉宿主机到上游路由器的ipv4，迫使网络走仅剩的虚拟机通道。</p>\n<p>要实现这点，需要修改宿主机和虚拟机中的Host Only网卡的配置，将网关反过来。</p>\n<ol>\n<li>修改虚拟机的lan ip为<code>192.168.8.1</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> network.lan.ipaddr=<span class=\"string\">&#x27;192.168.8.1&#x27;</span></span><br><span class=\"line\">uci commit</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></li>\n<li>修改宿主机的<code>VirtualBox Host-Only Network</code>的ipv4为<code>192.168.8.2</code>，同时网关和dns为<code>192.168.8.1</code></li>\n</ol>\n<img src=\"/blog/2022/07/22/openwrt-in-vbox/Host-Only%20Network.png\" class=\"\" title=\"Host-Only Network\">\n\n<ol start=\"3\">\n<li>禁掉宿主机的以太网ipv4</li>\n</ol>\n<img src=\"/blog/2022/07/22/openwrt-in-vbox/ethnet.png\" class=\"\" title=\"禁掉宿主机的以太网ipv4\">\n\n<blockquote>\n<p>注意：禁掉宿主机的以太网ipv4后，有些应用会直接无法连接网络，比如Office。它不会去使用VirtualBox Host-Only网卡，而是判断到以太网网卡无ipv4就认为断网。<br>如果需要联网则需要暂时恢复本地以太网ipv4。</p>\n</blockquote>\n<h2 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h2><p>在<code>&quot;$ENV:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\&quot;</code>创建一个<code>vbox.bat</code>，内容为：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">VBoxManage startvm OpenWrt --<span class=\"built_in\">type</span> headless</span><br></pre></td></tr></table></figure>\n\n<p>即可实现开机自启。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[OpenWrt]充当kms激活服务器","url":"/blog/2022/11/25/openwrt-kms-server/","content":"<h2 id=\"安装vlmcsd\"><a href=\"#安装vlmcsd\" class=\"headerlink\" title=\"安装vlmcsd\"></a>安装vlmcsd</h2><p>首先需要安装openwrt上的kms服务端：<a href=\"https://github.com/cokebar/openwrt-vlmcsd\">openwrt-vlmcsd</a>。</p>\n<p>vlmcsd很久没有更新了，但不要看着最近更新时间是2018年就害怕，它不更新是因为没必要更新，大敢的用吧。</p>\n<p>可以直接下载预编译的ipk，最新的版本是<a href=\"https://raw.githubusercontent.com/cokebar/openwrt-vlmcsd/gh-pages/vlmcsd_svn1113-1_x86_64.ipk\">svn1113-1</a>。</p>\n<h2 id=\"luci-app-vlmcsd\"><a href=\"#luci-app-vlmcsd\" class=\"headerlink\" title=\"luci-app-vlmcsd\"></a>luci-app-vlmcsd</h2><p>如果不想敲命令行，下一步可以安装<a href=\"https://github.com/cokebar/luci-app-vlmcsd\">luci-app-vlmcsd</a>。</p>\n<p>它预编译的<a href=\"https://github.com/cokebar/luci-app-vlmcsd/releases\">最新发布版</a>是<a href=\"https://github.com/cokebar/luci-app-vlmcsd/releases/download/v1.0.2-1/luci-app-vlmcsd_1.0.2-1_all.ipk\">1.0.2-1</a>。</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>去到vlmcsd的luci-app控制页面，启用服务。</p>\n<p>一般不需要修改配置文件。</p>\n<p>虽然vlmcsd不需要我们提供kms密钥，可以了解一下。微软把Windows的kms密钥直接公布在<a href=\"https://learn.microsoft.com/en-us/windows-server/get-started/kms-client-activation-keys\">网站上</a>，Office的kms密钥<a href=\"http://woshub.com/configure-kms-server-for-ms-office-2016-volume-activation/\">随便搜搜</a>就有。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h3 id=\"安装Office-2016\"><a href=\"#安装Office-2016\" class=\"headerlink\" title=\"安装Office 2016\"></a>安装Office 2016</h3><p>没有找到官方源，但可以通过<code>SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO</code>这个文件名在网上很轻易的搜索到第三方下载链接。<br>一听到第三方下载链接是不是就有点怕，好在有checksum可以验证。</p>\n<p>文件: SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO<br>大小: 1123452928 字节<br>MD5: 60DC8B1892F611E41140DD3631F39793<br>SHA1: AEB58DE1BC97685F8BC6BFB0A614A8EF6903E318<br>CRC32: 8D8AC6D1</p>\n<p>可以运行PowerShell Cmdlet: <a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash\">Get-FileHash</a>来很方便的验证：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">Get-FileHash</span> SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20<span class=\"literal\">-42426</span>.ISO <span class=\"literal\">-Algorithm</span> SHA1 | <span class=\"built_in\">Format-List</span></span><br><span class=\"line\"></span><br><span class=\"line\">Algorithm : SHA1</span><br><span class=\"line\">Hash      : AEB58DE1BC97685F8BC6BFB0A614A8EF6903E318</span><br><span class=\"line\">Path      : F:\\SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20<span class=\"literal\">-42426</span>.ISO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"激活Office\"><a href=\"#激活Office\" class=\"headerlink\" title=\"激活Office\"></a>激活Office</h3><p>使用<strong>管理员权限</strong>运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">cd</span> <span class=\"string\">&quot;C:\\Program Files\\Microsoft Office\\Office16&quot;</span></span><br><span class=\"line\">&gt; cscript ospp.vbs /sethst:<span class=\"number\">192.168</span>.<span class=\"number\">8.1</span></span><br><span class=\"line\">Microsoft (<span class=\"built_in\">R</span>) Windows Script Host Version <span class=\"number\">5.812</span></span><br><span class=\"line\">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">---Processing--------------------------</span></span><br><span class=\"line\"><span class=\"literal\">---------------------------------------</span></span><br><span class=\"line\">Successfully applied setting.</span><br><span class=\"line\"><span class=\"literal\">---------------------------------------</span></span><br><span class=\"line\"><span class=\"literal\">---Exiting-----------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; cscript ospp.vbs /act</span><br><span class=\"line\">Microsoft (<span class=\"built_in\">R</span>) Windows Script Host Version <span class=\"number\">5.812</span></span><br><span class=\"line\">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">---Processing--------------------------</span></span><br><span class=\"line\"><span class=\"literal\">---------------------------------------</span></span><br><span class=\"line\">Installed product key detected - attempting to activate the following product:</span><br><span class=\"line\">SKU ID: d450596f<span class=\"literal\">-894d-49e0-966a-fd39ed4c4c64</span></span><br><span class=\"line\">LICENSE NAME: Office <span class=\"number\">16</span>, Office16ProPlusVL_KMS_Client edition</span><br><span class=\"line\">LICENSE DESCRIPTION: Office <span class=\"number\">16</span>, VOLUME_KMSCLIENT channel</span><br><span class=\"line\">Last <span class=\"number\">5</span> characters of installed product key: WFG99</span><br><span class=\"line\">&lt;Product activation successful&gt;</span><br><span class=\"line\"><span class=\"literal\">---------------------------------------</span></span><br><span class=\"line\"><span class=\"literal\">---------------------------------------</span></span><br><span class=\"line\"><span class=\"literal\">---Exiting-----------------------------</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[OpenWrt]使用OpenClash科学上网","url":"/blog/2022/07/25/openwrt-openclash/","content":"<p><a href=\"https://github.com/vernesong/OpenClash\">OpenClash</a>几乎支持了所有协议，并且配置也很全面。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>首先手动下载<code>.ipk</code>包文件。截止这篇文章，最新版本为<a href=\"https://github.com/vernesong/OpenClash/releases/tag/v0.45.100-beta\">v0.45.100-beta</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O luci-app-openclash.ipk https://github.com/vernesong/OpenClash/releases/download/v0.45.100-beta/luci-app-openclash_0.45.100-beta_all.ipk</span><br></pre></td></tr></table></figure>\n\n<p>如果在OpenWrt中无法下载，那么可在宿主机通过代理下载后再拷贝上去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp ./luci-app-openclash.ipk root@192.168.88.1:/root/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>注意要先<a href=\"https://github.com/vernesong/OpenClash/wiki/%E5%AE%89%E8%A3%85\">安装依赖</a>。</p>\n<p>这里为了简洁只写了一部分，不代表未来还能正常安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg remove dnsmasq</span><br><span class=\"line\">opkg install luci-compat</span><br><span class=\"line\">opkg install ./luci-app-openclash.ipk</span><br></pre></td></tr></table></figure>\n\n<p>openclash使用了dnsmasq-full，为了避免冲突，需要先卸载dnsmasq。<br>同时，openclash也依赖luci的cbi模块，需要先安装luci-compat。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h3><p>内核是没有放在<code>ipk</code>包中的，所以初次使用时需要下载内核。</p>\n<img src=\"/blog/2022/07/25/openwrt-openclash/openclash-core-config.png\" class=\"\" title=\"内核\">\n\n<p>内核的下载地址是github仓库，github会间歇性的抽风，当抽风时无法在控制台下载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2022-07-25 07:26:34 【Dev】版本内核更新失败，请确认设备闪存空间足够后再试！</span><br><span class=\"line\">2022-07-25 07:26:34 【Dev】版本内核下载成功，开始更新...</span><br><span class=\"line\">2022-07-25 07:26:04 【Dev】版本内核正在下载，如下载失败请尝试手动下载并上传...</span><br><span class=\"line\">2022-07-25 07:23:56 警告：OpenClash 目前处于未启用状态，请从插件页面启动本插件，脚本退出...</span><br></pre></td></tr></table></figure>\n\n<p>不要被日志中的<code>请确认设备闪存空间足够后再试</code>骗了，其实是网络错误而不是闪存空间不足。</p>\n<p>这时需要像下载<code>ipk</code>那样，手动下载再上传到OpenWrt上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O clash-linux-amd64.tar.gz https://github.com/vernesong/OpenClash/releases/download/Clash/clash-linux-amd64.tar.gz</span><br><span class=\"line\">scp clash-linux-amd64.tar.gz root@192.168.88.1:/etc/openclash/core</span><br></pre></td></tr></table></figure>\n\n<p>内核下载地址</p>\n<ul>\n<li><a href=\"https://github.com/vernesong/OpenClash/releases/tag/Clash\">Dev 内核</a></li>\n<li><a href=\"https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium\">Tun 内核</a></li>\n<li><a href=\"https://github.com/vernesong/OpenClash/releases/tag/TUN\">Tun 游戏内核</a></li>\n</ul>\n<p>上传完后，在OpenWrt中解压。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/openclash/core</span><br><span class=\"line\">tar -zxvf clash-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">rm</span> clash-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>下载Dev内核并应用后，就可以配置好代理，之后使用控制台来更新内核了。</p>\n<p><strong>UDP</strong></p>\n<p>如果要玩游戏，需要UDP连接，必须切换至TUN或混合模式。</p>\n<p>比如原神就需要UDP连接，如果使用增强模式会进入游戏后会白屏然后连接超时，需要切换到TUN或混合模式以支持UDP连接。</p>\n<h3 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h3><p>如果使用的是<a href=\"https://justmysocks5.net/\">justmysocks</a>机场的订阅链接，必须使用订阅转换服务，否则将不能识别订阅配置。使用默认的<code>api.dler.io(默认)</code>即可。</p>\n<img src=\"/blog/2022/07/25/openwrt-openclash/openclash-subscribe.png\" class=\"\" title=\"订阅转换\">\n\n<p>有时候订阅服务器会出问题，可以试着使用其它备用订阅转换网站的转换网址。</p>\n<ul>\n<li><p>ACL4SSR 订阅转换</p>\n<p>比较知名的规则转换网站。</p>\n<p><a href=\"https://acl4ssr-sub.github.io/\">https://acl4ssr-sub.github.io/</a></p>\n</li>\n<li><p>つつの订阅转换 · 鲸歌</p>\n<p>TAG 机场合作的订阅转换网站。</p>\n<p><a href=\"https://sub.tsutsu.one/\">https://sub.tsutsu.one/</a></p>\n</li>\n</ul>\n<h3 id=\"仪表盘\"><a href=\"#仪表盘\" class=\"headerlink\" title=\"仪表盘\"></a>仪表盘</h3><p>如果订阅链接没有问题，此时应该一切正常。</p>\n<img src=\"/blog/2022/07/25/openwrt-openclash/openclash-overview.png\" class=\"\" title=\"仪表盘\">\n\n<p>可以打开<code>Dashboard控制面板</code>去仪表盘进行策略配置了。</p>\n<h3 id=\"Fake-IP模式\"><a href=\"#Fake-IP模式\" class=\"headerlink\" title=\"Fake IP模式\"></a>Fake IP模式</h3><p>OpenClash支持Redir-Host和Fake-IP两种模式，默认为Redir-Host模式。</p>\n<p>Fake IP出自<a href=\"https://www.rfc-editor.org/rfc/rfc3089\">RFC3089</a>，这个RFC定义了一种新的将TCP连接封装成SOCKS协议的方法。<a href=\"https://blog.skk.moe/post/what-happend-to-dns-in-proxy/#Zai-redir-x2F-tun2socks-Zhong-Shi-Yong-Fake-IP\">这里</a>有篇文章介绍的比较详细。</p>\n<p>它与Redir-Host模式的最主要区别是：</p>\n<ol>\n<li>客户端发出的DNS解析请求会被代理端捕获，然后立即从Fake IP池子里取一个IP建立映射返回。</li>\n<li>客户端发起对这个Fake IP的TCP连接，又被代理端截获，再返查出域名。</li>\n<li>代理端使用SOCKS协议封装TCP连接和域名。<br>整个过程都无需解析DNS，因此速度会更快。</li>\n</ol>\n<p>但它也有几个问题：</p>\n<ul>\n<li>无法ping域名，解析得到的会是内网的Fake IP</li>\n<li><a href=\"https://github.com/vernesong/OpenClash/issues/6\">windows会认为没有连接到互联网</a>，需要将<code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\NlaSvc\\Parameters\\Internet</code>下的<a href=\"https://www.zhihu.com/question/48856675\">几个域名</a>添加至覆写设置-&gt;DNS设置-&gt;Fake-IP-Filter。</li>\n<li>windows时间同步的NTP（Network Time Protocol）域名：time.windows.com</li>\n</ul>\n<p>如果对性能不是有很强的要求，还是建议使用Redir-Host模式。</p>\n<h3 id=\"偶尔有部分网址无法连接\"><a href=\"#偶尔有部分网址无法连接\" class=\"headerlink\" title=\"偶尔有部分网址无法连接\"></a>偶尔有部分网址无法连接</h3><p>偶尔有百度无法连接的情况，此时可将代理模式切换至Global模式，再切回Rule，通常药到病除。只是重启OpenClash不行。</p>\n<p>可参看这个<a href=\"https://github.com/vernesong/OpenClash/issues/31\">Issue</a>。</p>\n<h3 id=\"自定义规则集\"><a href=\"#自定义规则集\" class=\"headerlink\" title=\"自定义规则集\"></a>自定义规则集</h3><p>规则集英文是<a href=\"https://lancellc.gitbook.io/clash/clash-config-file/rule-provider\">Rule Provider</a>，它可以在<code>config.yml</code>之外补充一些规则。</p>\n<p>比如最近大陆把微软OneDrive墙了，那么我们可以在<code>配置文件管理</code>中，新增一个类型为classic的本地规则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload:</span><br><span class=\"line\">  # &gt; OneDrive</span><br><span class=\"line\">  - DOMAIN-SUFFIX,onedrive.live.com</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>规则集与策略组管理</code>中的<code>自定义规则集与策略组管理</code>中使用它：</p>\n<img src=\"/blog/2022/07/25/openwrt-openclash/use-rule-provider.png\" class=\"\" title=\"使用自定义规则集\">\n\n<p>这样当访问后缀为<code>onedrive.live.com</code>的网站时，就会使用代理了。</p>\n<h3 id=\"geo数据库订阅\"><a href=\"#geo数据库订阅\" class=\"headerlink\" title=\"geo数据库订阅\"></a>geo数据库订阅</h3><p>如果在更新geo数据库时出错，可能会导致geo文件缺乏，openclash无法启动。此时需要手动下载并上传geo数据库的文件。</p>\n<p>geo数据库的文件有好几个，<code>Country.mmdb</code>，<code>GeoSite.dat</code>，<code>GeoIP.dat</code>都在<code>/etc/openclash/</code>下。</p>\n<p>我们可以在<code>/usr/share/openclash/</code>目录下找到对应的更新脚本：<code>openclash_ipdb.sh</code>，<code>openclash_geosite.sh</code>，<code>openclash_geoip.sh</code>，</p>\n<p>再在更新脚本中找到下载地址：<code>https://raw.githubusercontent.com/alecthw/mmdb_china_ip_list/release/lite/Country.mmdb</code>，<code>https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat</code>，<code>https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat</code>。</p>\n<p>在本地下载后，再上传至openwrt的<code>/etc/openclash/</code>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[Openwrt]扩容","url":"/blog/2023/02/02/openwrt-resize-root/","content":"<h2 id=\"OpenWrt固件\"><a href=\"#OpenWrt固件\" class=\"headerlink\" title=\"OpenWrt固件\"></a>OpenWrt固件</h2><p>OpenWrt官网提供了<a href=\"https://openwrt.org/docs/guide-user/installation/openwrt_x86\">多个固件下载</a>。国内很贴心的提供了镜像，比如<a href=\"https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/22.03.3/targets/x86/64/\">清华</a>。</p>\n<p>这些固件的多个版本主要由3个参数组合：</p>\n<ul>\n<li>combined和rootfs<br>rootfs即只有一个分区：<code>/</code>即root，combined则是增加了<code>boot</code>启动引导区。一般人都不会去碰rootfs，启动引导太折腾。</li>\n<li>ext4和squashfs<br>相比ext4，squashfs增加了只读区以提供系统恢复功能，但无法做分区扩容（但可以挂载扩容）。</li>\n<li>efi<br>efi则是增加了<code>bios_grub</code>启动引导区，同时也保留了<code>legacy_boot</code>。</li>\n</ul>\n<p>如果是实机安装，建议使用squashfs-combined-efi；虚拟机则首选ext4-combined。</p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>OpenWrt官方的固件只留了几十M的用户空间，正式使用完全不够用。所以官方有提供<a href=\"https://openwrt.org/docs/guide-user/installation/openwrt_x86#resizing_partitions\">扩容文档</a>。</p>\n<p>扩容方案有很多种，最彻底的当然是按照硬件大小直接<a href=\"https://openwrt.org/docs/guide-user/installation/openwrt_x86#building_your_own_image_with_larger_partition_size\">编译自己的固件</a>，但过于硬核。这里提供另外两种，安装后扩容和安装前扩容。</p>\n<h3 id=\"安装后扩容\"><a href=\"#安装后扩容\" class=\"headerlink\" title=\"安装后扩容\"></a>安装后扩容</h3><h4 id=\"同盘扩展\"><a href=\"#同盘扩展\" class=\"headerlink\" title=\"同盘扩展\"></a>同盘扩展</h4><p><strong>注意</strong>：同盘扩展需要在开机后第一时间做，做完立即重启，不要安装完软件再来做，会有机率搞坏系统无限重启。</p>\n<ol>\n<li>使用<a href=\"http://man.cx/parted\">parted</a>扩展分区</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s_downloads.openwrt.org_mirror.sjtu.edu.cn/openwrt_&#x27;</span> /etc/opkg/distfeeds.conf</span><br><span class=\"line\"></span><br><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install parted</span><br><span class=\"line\">BOOT=<span class=\"string\">&quot;<span class=\"subst\">$(sed -n -e <span class=\"string\">&quot;\\|\\s/boot\\s.*$|&#123;s///p;q&#125;&quot;</span> /etc/mtab)</span>&quot;</span></span><br><span class=\"line\">PART=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT##*[^0-9]&#125;</span>&quot;</span></span><br><span class=\"line\">DISK=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT%<span class=\"variable\">$&#123;PART&#125;</span>&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> fix | parted -l ---pretend-input-tty</span><br><span class=\"line\">parted -s <span class=\"variable\">$&#123;DISK%p&#125;</span> resizepart $((PART+<span class=\"number\">1</span>)) 100%</span><br></pre></td></tr></table></figure>\n\n<p>如果是efi镜像，还需要更新grub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install lsblk</span><br><span class=\"line\">BOOT=<span class=\"string\">&quot;<span class=\"subst\">$(sed -n -e <span class=\"string\">&quot;\\|\\s/boot\\s.*$|&#123;s///p;q&#125;&quot;</span> /etc/mtab)</span>&quot;</span></span><br><span class=\"line\">PART=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT##*[^0-9]&#125;</span>&quot;</span></span><br><span class=\"line\">DISK=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT%<span class=\"variable\">$&#123;PART&#125;</span>&#125;</span>&quot;</span></span><br><span class=\"line\">ROOT=<span class=\"string\">&quot;<span class=\"variable\">$&#123;DISK&#125;</span><span class=\"subst\">$((PART+1)</span>)&quot;</span></span><br><span class=\"line\">UUID=<span class=\"string\">&quot;<span class=\"subst\">$(lsblk -n -o PARTUUID $&#123;ROOT&#125;)</span>&quot;</span></span><br><span class=\"line\">sed -i -r -e <span class=\"string\">&quot;s|(PARTUUID=)\\S+|\\1<span class=\"variable\">$&#123;UUID&#125;</span>|g&quot;</span> /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用losetup挂载，然后使用resize2fs扩展</li>\n</ol>\n<p>针对<code>ext4-combined</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install losetup resize2fs</span><br><span class=\"line\">BOOT=<span class=\"string\">&quot;<span class=\"subst\">$(sed -n -e <span class=\"string\">&quot;\\|\\s/boot\\s.*$|&#123;s///p;q&#125;&quot;</span> /etc/mtab)</span>&quot;</span></span><br><span class=\"line\">PART=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT##*[^0-9]&#125;</span>&quot;</span></span><br><span class=\"line\">DISK=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT%<span class=\"variable\">$&#123;PART&#125;</span>&#125;</span>&quot;</span></span><br><span class=\"line\">ROOT=<span class=\"string\">&quot;<span class=\"variable\">$&#123;DISK&#125;</span><span class=\"subst\">$((PART+1)</span>)&quot;</span></span><br><span class=\"line\">LOOP=<span class=\"string\">&quot;<span class=\"subst\">$(losetup -f)</span>&quot;</span></span><br><span class=\"line\">losetup <span class=\"variable\">$&#123;LOOP&#125;</span> <span class=\"variable\">$&#123;ROOT&#125;</span></span><br><span class=\"line\">resize2fs -f <span class=\"variable\">$&#123;LOOP&#125;</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>针对<code>squashfs-combined</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install losetup resize2fs</span><br><span class=\"line\">BOOT=<span class=\"string\">&quot;<span class=\"subst\">$(sed -n -e <span class=\"string\">&quot;\\|\\s/boot\\s.*$|&#123;s///p;q&#125;&quot;</span> /etc/mtab)</span>&quot;</span></span><br><span class=\"line\">PART=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT##*[^0-9]&#125;</span>&quot;</span></span><br><span class=\"line\">DISK=<span class=\"string\">&quot;<span class=\"variable\">$&#123;BOOT%<span class=\"variable\">$&#123;PART&#125;</span>&#125;</span>&quot;</span></span><br><span class=\"line\">ROOT=<span class=\"string\">&quot;<span class=\"variable\">$&#123;DISK&#125;</span><span class=\"subst\">$((PART+1)</span>)&quot;</span></span><br><span class=\"line\">LOOP=<span class=\"string\">&quot;<span class=\"subst\">$(losetup -n -l | sed -n -e <span class=\"string\">&quot;\\|\\s.*\\s<span class=\"variable\">$&#123;ROOT#/dev&#125;</span>\\s.*$|&#123;s///p;q&#125;&quot;</span>)</span>&quot;</span></span><br><span class=\"line\">resize2fs -f <span class=\"variable\">$&#123;LOOP&#125;</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>打完收工。</p>\n<h4 id=\"新盘扩展\"><a href=\"#新盘扩展\" class=\"headerlink\" title=\"新盘扩展\"></a>新盘扩展</h4><h5 id=\"分区和格式化\"><a href=\"#分区和格式化\" class=\"headerlink\" title=\"分区和格式化\"></a>分区和格式化</h5><ol>\n<li>首先我们找到新硬盘</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; <span class=\"built_in\">ls</span> -ltr /dev/sd*</span><br><span class=\"line\">brw-------    1 root     root        8,   0 Jul 22 06:00 /dev/sda</span><br><span class=\"line\">brw-------    1 root     root        8,   1 Jul 22 06:00 /dev/sda1</span><br><span class=\"line\">brw-------    1 root     root      259,   0 Jul 22 06:00 /dev/sda128</span><br><span class=\"line\">brw-------    1 root     root        8,   2 Jul 22 06:00 /dev/sda2</span><br><span class=\"line\">brw-------    1 root     root        8,  16 Jul 22 06:00 /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>这里的&#x2F;dev&#x2F;sdb就是新添加的硬盘了。</p>\n<ol start=\"2\">\n<li>使用gdisk工具来进行磁盘分区</li>\n</ol>\n<p>注意opkg package list并不会持久化，所以每次重启后都需要再运行一次<code>opkg update</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install gdisk</span><br><span class=\"line\">gdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GPT fdisk (gdisk) version 1.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: Partition table header claims that the size of partition table</span><br><span class=\"line\">entries is 0 bytes, but this program  supports only 128-byte entries.</span><br><span class=\"line\">Adjusting accordingly, but partition table may be garbage.</span><br><span class=\"line\">Warning: Partition table header claims that the size of partition table</span><br><span class=\"line\">entries is 0 bytes, but this program  supports only 128-byte entries.</span><br><span class=\"line\">Adjusting accordingly, but partition table may be garbage.</span><br><span class=\"line\">Partition table scan:</span><br><span class=\"line\">  MBR: not present</span><br><span class=\"line\">  BSD: not present</span><br><span class=\"line\">  APM: not present</span><br><span class=\"line\">  GPT: not present</span><br><span class=\"line\"></span><br><span class=\"line\">Creating new GPT entries in memory.</span><br><span class=\"line\"></span><br><span class=\"line\">Command (? for help): n</span><br><span class=\"line\">Partition number (1-128, default 1):</span><br><span class=\"line\">First sector (34-419430366, default = 2048) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class=\"line\">Last sector (2048-419430366, default = 419430366) or &#123;+-&#125;size&#123;KMGTP&#125;:</span><br><span class=\"line\">Current type is 8300 (Linux filesystem)</span><br><span class=\"line\">Hex code or GUID (L to show codes, Enter = 8300):</span><br><span class=\"line\">Changed type of partition to &#x27;Linux filesystem&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Command (? for help): w</span><br><span class=\"line\"></span><br><span class=\"line\">Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING</span><br><span class=\"line\">PARTITIONS!!</span><br><span class=\"line\"></span><br><span class=\"line\">Do you want to proceed? (Y/N): y</span><br><span class=\"line\">OK; writing new GUID partition table (GPT) to /dev/sdb.</span><br><span class=\"line\">The operation has completed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>分好区后，我们应该可以看到<code>/dev/sdb1</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; <span class=\"built_in\">ls</span> -ltr /dev/sd*</span><br><span class=\"line\">brw-------    1 root     root        8,  17 Jul 22 06:17 /dev/sdb1</span><br><span class=\"line\">brw-------    1 root     root        8,  16 Jul 22 06:17 /dev/sdb</span><br><span class=\"line\">brw-------    1 root     root        8,   2 Jul 22 06:17 /dev/sda2</span><br><span class=\"line\">brw-------    1 root     root      259,   0 Jul 22 06:17 /dev/sda128</span><br><span class=\"line\">brw-------    1 root     root        8,   1 Jul 22 06:17 /dev/sda1</span><br><span class=\"line\">brw-------    1 root     root        8,   0 Jul 22 06:17 /dev/sda</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>格式化</li>\n</ol>\n<p>之前我们创建磁盘时已经选择了设置为<strong>固态驱动器</strong>，所以这里我们使用f2fs来代替ext4。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install f2fs-tools</span><br><span class=\"line\">opkg install kmod-fs-f2fs</span><br><span class=\"line\">mkfs.f2fs /dev/sdb1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自动挂载\"><a href=\"#自动挂载\" class=\"headerlink\" title=\"自动挂载\"></a>自动挂载</h5><p>下一步来设置重启后自动挂载sdb1。</p>\n<p><strong>先安装block工具</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install block-mount</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，可以使用<code>block</code>命令，同时在luci的系统菜单下会出现<code>挂载点</code>页面，可以更方便的查看挂载情况。</p>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; block detect</span><br><span class=\"line\">config <span class=\"string\">&#x27;global&#x27;</span></span><br><span class=\"line\">        option  anon_swap       <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        option  anon_mount      <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">        option  auto_swap       <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        option  auto_mount      <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">        option  delay_root      <span class=\"string\">&#x27;5&#x27;</span></span><br><span class=\"line\">        option  check_fs        <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">config <span class=\"string\">&#x27;mount&#x27;</span></span><br><span class=\"line\">        option  target  <span class=\"string\">&#x27;/boot&#x27;</span></span><br><span class=\"line\">        option  uuid    <span class=\"string\">&#x27;FB5E-DCEF&#x27;</span></span><br><span class=\"line\">        option  enabled <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">config <span class=\"string\">&#x27;mount&#x27;</span></span><br><span class=\"line\">        option  target  <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">        option  uuid    <span class=\"string\">&#x27;ff313567-e9f1-5a5d-9895-3ba130b4a864&#x27;</span></span><br><span class=\"line\">        option  enabled <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">config <span class=\"string\">&#x27;mount&#x27;</span></span><br><span class=\"line\">        option  target  <span class=\"string\">&#x27;/mnt/sdb1&#x27;</span></span><br><span class=\"line\">        option  uuid    <span class=\"string\">&#x27;fb80a835-f956-4264-8875-09a8e093f13c&#x27;</span></span><br><span class=\"line\">        option  enabled <span class=\"string\">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>修改fstab</strong></p>\n<p>接下来的操作可以在luci网页上操作，也可以纯用命令行，在这里当然是推荐使用网页。</p>\n<p>在挂载点中选中&#x2F;mnt&#x2F;sdb1，然后点下面的<code>保存&amp;应用</code>。顺便把<code>在挂载前检查文件系统</code>也选中，同样，再次点击<code>保存&amp;应用</code>。</p>\n<p>事实上在网页上的操作就相当于下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> fstab.@mount[-1].enabled=<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">uci commit fstab</span><br><span class=\"line\"></span><br><span class=\"line\">uci <span class=\"built_in\">set</span> fstab.@global[0].check_fs=<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">uci commit fstab</span><br></pre></td></tr></table></figure>\n\n<p>你可以在操作前后使用命令<code>uci show fstab</code>来对比。</p>\n<p><strong>重启检查</strong></p>\n<p>做完这一步可以试着reboot重启，检查自动挂载有没有生效。</p>\n<p>重启后，我们查看磁盘使用情况，sdb1应该会正确的挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; <span class=\"built_in\">df</span> -h</span><br><span class=\"line\">Filesystem                Size      Used Available Use% Mounted on</span><br><span class=\"line\">/dev/root               102.4M     17.3M     83.0M  17% /</span><br><span class=\"line\">tmpfs                   494.5M     64.0K    494.4M   0% /tmp</span><br><span class=\"line\">/dev/sda1                16.0M      5.3M     10.7M  33% /boot</span><br><span class=\"line\">/dev/sda1                16.0M      5.3M     10.7M  33% /boot</span><br><span class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</span><br><span class=\"line\">/dev/sdb1               200.0G      2.4G    197.6G   1% /mnt/sdb1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"扩容root\"><a href=\"#扩容root\" class=\"headerlink\" title=\"扩容root\"></a>扩容root</h5><p>扩容root有两种方式，一种是使用新磁盘直接替换根目录，另一种是使用overlay。</p>\n<p>为了简便，我们在这里使用前一种，直接替换根目录。</p>\n<ol>\n<li><p>首先卸载掉&#x2F;dev&#x2F;sdb1</p>\n</li>\n<li><p>再次挂载&#x2F;dev&#x2F;sdb1，选择作为根目录使用</p>\n</li>\n</ol>\n\n\n<p>保存并应用。</p>\n<p>这一步就相当于下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uci <span class=\"built_in\">set</span> fstab.@mount[-2].enabled=<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">uci <span class=\"built_in\">set</span> fstab.@mount[-1].target=<span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">uci <span class=\"built_in\">set</span> fstab.@mount[-1].enabled=<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">uci commit fstab</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行命令迁移根目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /tmp/introot</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /tmp/extroot</span><br><span class=\"line\">mount --<span class=\"built_in\">bind</span> / /tmp/introot</span><br><span class=\"line\">mount /dev/sdb1 /tmp/extroot  <span class=\"comment\"># 注意这里要改为/dev/sdb1</span></span><br><span class=\"line\">tar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -</span><br><span class=\"line\">umount /tmp/introot</span><br><span class=\"line\">umount /tmp/extroot</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; <span class=\"built_in\">df</span> -h</span><br><span class=\"line\">Filesystem                Size      Used Available Use% Mounted on</span><br><span class=\"line\">/dev/root               102.4M     17.3M     83.0M  17% /rom</span><br><span class=\"line\">tmpfs                   494.5M    228.0K    494.3M   0% /tmp</span><br><span class=\"line\">/dev/sdb1               200.0G      2.4G    197.6G   1% /</span><br><span class=\"line\">/dev/sda1                16.0M      5.3M     10.7M  33% /boot</span><br><span class=\"line\">/dev/sda1                16.0M      5.3M     10.7M  33% /boot</span><br><span class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</span><br></pre></td></tr></table></figure>\n\n<p>重启后可以看到根目录已经在&#x2F;dev&#x2F;sdb1而不是&#x2F;dev&#x2F;root了。</p>\n<h3 id=\"安装前扩容（修改img）\"><a href=\"#安装前扩容（修改img）\" class=\"headerlink\" title=\"安装前扩容（修改img）\"></a>安装前扩容（修改img）</h3><p>安装前扩容的思路是修改官方固件的.img文件，这样在安装完系统后直接就是正确的容量。</p>\n<p>但坏处是.img文件会暴增到扩容后的大小，只适用于较小容量的扩容，如果要扩容到上百G那这种方式还是不合适，还是要去用官方提供的<a href=\"https://openwrt.org/docs/guide-user/additional-software/imagebuilder\">Image Builder</a>。</p>\n<p><strong>注意</strong><br>下面的操作仅支持ext4-combined.img，不支持efi，也不支持squashfs。</p>\n<ol>\n<li><p>给img映像文件增加4G空间</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/zero bs=1G count=4 &gt;&gt; openwrt-22.03.3-x86-64-generic-ext4-combined.img</span><br><span class=\"line\"></span><br><span class=\"line\">4+0 records <span class=\"keyword\">in</span></span><br><span class=\"line\">4+0 records out</span><br><span class=\"line\">4294967296 bytes (4.3 GB, 4.0 GiB) copied, 4.09236 s, 1.0 GB/s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载镜像到loop设备</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo losetup -f openwrt-22.03.3-x86-64-generic-ext4-combined.img</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>使用<a href=\"https://linux.die.net/man/8/losetup\">losetup</a>查看挂载设备后的名称，这里示例是<code>loop13</code>，在你的机器上可能会是其它数字。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">losetup </span><br><span class=\"line\"></span><br><span class=\"line\">NAME        SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE                                                                    DIO LOG-SEC</span><br><span class=\"line\">/dev/loop13         0      0         0  0 /home/&lt;username&gt;/sambashare/openwrt-22.03.3-x86-64-generic-ext4-combined.img   0     512</span><br></pre></td></tr></table></figure>\n\n<p>使用<a href=\"https://linux.die.net/man/8/lsblk\">lsblk</a>查看分区，大小是4.1G</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsblk</span><br><span class=\"line\"></span><br><span class=\"line\">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class=\"line\">loop13   7:13   0   4.1G  0 loop</span><br></pre></td></tr></table></figure>\n\n<p>使用partx读取分区信息，然后再次查看分区</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo partx -a /dev/loop13</span><br><span class=\"line\"></span><br><span class=\"line\">lsblk </span><br><span class=\"line\">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">loop13       7:13   0   4.1G  0 loop</span><br><span class=\"line\">├─loop13p1 259:0    0    16M  0 part</span><br><span class=\"line\">└─loop13p2 259:1    0   104M  0 part</span><br></pre></td></tr></table></figure>\n<p>可以看到loop13有2个分区（boot和root），第2个分区大小为104M，并没有扩展到4G。</p>\n<ol start=\"3\">\n<li>扩展root分区<br>使用<code>fdisk</code>扩展root分区<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo fdisk /dev/loop13</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to fdisk (util-linux 2.37.2).</span><br><span class=\"line\">Changes will remain <span class=\"keyword\">in</span> memory only, until you decide to write them.</span><br><span class=\"line\">Be careful before using the write <span class=\"built_in\">command</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入p查看分区信息，记住/dev/loop0p2分区的开始扇区</span></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>): p</span><br><span class=\"line\">Disk /dev/loop13: 4.12 GiB, 4421320704 bytes, 8635392 sectors</span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel <span class=\"built_in\">type</span>: dos</span><br><span class=\"line\">Disk identifier: 0xabeae232</span><br><span class=\"line\"></span><br><span class=\"line\">Device        Boot Start    End Sectors  Size Id Type</span><br><span class=\"line\">/dev/loop13p1 *      512  33279   32768   16M 83 Linux</span><br><span class=\"line\">/dev/loop13p2      33792 246783  212992  104M 83 Linux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除/dev/loop13p2分区，输入d之后输入2(默认)</span></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>): d</span><br><span class=\"line\">Partition number (1,2, default 2): 2</span><br><span class=\"line\"></span><br><span class=\"line\">Partition 2 has been deleted.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入n新建分区</span></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>): n</span><br><span class=\"line\">Partition <span class=\"built_in\">type</span></span><br><span class=\"line\">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class=\"line\">   e   extended (container <span class=\"keyword\">for</span> logical partitions)</span><br><span class=\"line\"><span class=\"comment\"># 输入p主分区(默认)</span></span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\"><span class=\"comment\"># 输入2(默认)</span></span><br><span class=\"line\">Partition number (2-4, default 2): 2</span><br><span class=\"line\"><span class=\"comment\"># 输入分区2的开始扇区，一定要和上面的一样，这里是33792</span></span><br><span class=\"line\">First sector (33280-8635391, default 34816): 33792</span><br><span class=\"line\"><span class=\"comment\"># 输入结束扇区，一定要比33792大，如果直接回车就是全部剩余都将作为第二分区，这里直接回车</span></span><br><span class=\"line\">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33792-8635391, default 8635391):</span><br><span class=\"line\"></span><br><span class=\"line\">Created a new partition 2 of <span class=\"built_in\">type</span> <span class=\"string\">&#x27;Linux&#x27;</span> and of size 4.1 GiB.</span><br><span class=\"line\">Partition <span class=\"comment\">#2 contains a ext4 signature.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提示，是否移除分区的签名，这里一定要输入n，不然镜像会出问题</span></span><br><span class=\"line\">Do you want to remove the signature? [Y]es/[N]o: n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入w保存我们的更改</span></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>): w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 会有警告，这里不用管</span></span><br><span class=\"line\">The partition table has been altered.</span><br><span class=\"line\">Calling ioctl() to re-read partition table.</span><br><span class=\"line\">Re-reading the partition table failed.: Invalid argument</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提示说内核依然会使用旧的分区表，新的分区表需要在下次重启或运行 partprobe(8)或kpartx(8)命令后生效</span></span><br><span class=\"line\">The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8).</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>更新分区信息，使用新的分区表。然后再次查看分区。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo partx -u /dev/loop13</span><br><span class=\"line\"></span><br><span class=\"line\">lsblk</span><br><span class=\"line\">NAME       MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class=\"line\">loop13       7:13   0   4.1G  0 loop</span><br><span class=\"line\">├─loop13p1 259:2    0    16M  0 part</span><br><span class=\"line\">└─loop13p2 259:3    0   4.1G  0 part</span><br></pre></td></tr></table></figure>\n<p>root分区已经扩容到4.1G</p>\n<ol start=\"4\">\n<li><p>同步分区信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先使用e2fsck镜像检测，纠错</span></span><br><span class=\"line\">sudo e2fsck -f /dev/loop13p2</span><br><span class=\"line\">e2fsck 1.46.5 (30-Dec-2021)</span><br><span class=\"line\">Pass 1: Checking inodes, blocks, and sizes</span><br><span class=\"line\">Pass 2: Checking directory structure</span><br><span class=\"line\">Pass 3: Checking directory connectivity</span><br><span class=\"line\">Pass 4: Checking reference counts</span><br><span class=\"line\">Pass 5: Checking group summary information</span><br><span class=\"line\">Padding at end of inode bitmap is not <span class=\"built_in\">set</span>. Fix&lt;y&gt;? <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">rootfs: ***** FILE SYSTEM WAS MODIFIED *****</span><br><span class=\"line\">rootfs: 1445/6656 files (0.0% non-contiguous), 5178/26624 blocks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始同步</span></span><br><span class=\"line\">sudo resize2fs /dev/loop13p2</span><br><span class=\"line\">resize2fs 1.46.5 (30-Dec-2021)</span><br><span class=\"line\">Resizing the filesystem on /dev/loop13p2 to 1075200 (4k) blocks.</span><br><span class=\"line\">The filesystem on /dev/loop13p2 is now 1075200 (4k) blocks long.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载<br>卸载系统中的分区</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo partx -d /dev/loop13</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>卸载loop设备</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo losetup -d /dev/loop13</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[OpenWrt]使用samba","url":"/blog/2022/08/01/openwrt-samba/","content":"<p>为了更好的管理openwrt上的文件，我们开启<a href=\"https://openwrt.org/docs/guide-user/services/nas/samba\">samba</a>服务。</p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>首先安装软件包，我们选择<a href=\"\">samba4</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update </span><br><span class=\"line\">opkg install luci-app-samba4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>安装完后，去到<code>/etc/samba</code>目录，下面有这几个文件：</p>\n<ul>\n<li>secrets.tdb</li>\n<li>smb.conf -&gt; &#x2F;var&#x2F;etc&#x2F;smb.conf</li>\n<li>smb.conf.template</li>\n<li>smbpasswd</li>\n</ul>\n<p>我们只需要修改<code>smb.conf.template</code>，每次重启samba4服务，都会从模板生成一份配置文件到<code>/var/etc/smb.conf</code>，所以不要直接修改后者。</p>\n<h3 id=\"去除root用户限制\"><a href=\"#去除root用户限制\" class=\"headerlink\" title=\"去除root用户限制\"></a>去除root用户限制</h3><p>为了尽可能的简单，我们直接使用root用户登录samba。默认为了安全考虑，是不支持root用户登录samba的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">## set invalid users</span><br><span class=\"line\"># invalid users = root # 把这一句注释掉，不限制root用户登录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给samba中的root设置密码\"><a href=\"#给samba中的root设置密码\" class=\"headerlink\" title=\"给samba中的root设置密码\"></a>给samba中的root设置密码</h3><p>samba中的用户密码是独立于系统用户在<code>/etc/password</code>中的密码的。我们使用<a href=\"https://www.samba.org/samba/docs/current/man-html/smbpasswd.8.html\">smbpasswd命令行工具</a>给root用户设置一下密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -a root</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加共享目录\"><a href=\"#添加共享目录\" class=\"headerlink\" title=\"添加共享目录\"></a>添加共享目录</h3><p>在luci网页添加共享目录，修改会保存在<code>/etc/config/samba4</code>配置文件中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">config samba</span><br><span class=\"line\">        option workgroup &#x27;WORKGROUP&#x27;</span><br><span class=\"line\">        option charset &#x27;UTF-8&#x27;</span><br><span class=\"line\">        option description &#x27;Samba on OpenWRT&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">config sambashare</span><br><span class=\"line\">        option name &#x27;media&#x27;</span><br><span class=\"line\">        option path &#x27;/root/media&#x27;</span><br><span class=\"line\">        option read_only &#x27;no&#x27;</span><br><span class=\"line\">        option guest_ok &#x27;yes&#x27;</span><br><span class=\"line\">        option create_mask &#x27;0666&#x27;</span><br><span class=\"line\">        option dir_mask &#x27;0777&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>或者直接修改模板文件<code>/etc/samba/smb.conf.template</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[media]</span><br><span class=\"line\">        path = /root/media</span><br><span class=\"line\">        create mask = 0666</span><br><span class=\"line\">        directory mask = 0777</span><br><span class=\"line\">        read only = no</span><br><span class=\"line\">        guest ok = yes</span><br><span class=\"line\">        vfs objects = io_uring</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h3><p>最后在luci中保存并应用，或者手动运行命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/samba4 stop</span><br><span class=\"line\">service samba4 start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><h3 id=\"windows出现“不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接”\"><a href=\"#windows出现“不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接”\" class=\"headerlink\" title=\"windows出现“不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接”\"></a>windows出现“不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接”</h3><p>查看连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use</span><br></pre></td></tr></table></figure>\n\n<p>释放连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use * /del /y</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"[OpenWrt]解除网易云音乐播放限制","url":"/blog/2022/07/25/openwrt-unblock-netease-music/","content":"<p><a href=\"https://github.com/UnblockNeteaseMusic/server\">解除网易云音乐播放限制</a>的工作原理是拦劫网易云音乐的网络请求，使用其它音源来代替变灰的歌曲来实现解除播放限制。</p>\n<p>它的使用需要一定的门槛，而且每个客户端还需要单独设置代理。所以不如直接使用OpenWrt路由器插件。</p>\n<p><a href=\"https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic\">[OpenWrt]解除网易云音乐播放限制</a>是一个OpenWrt的开源软件，它提供了两种安装方式：</p>\n<ul>\n<li><a href=\"https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic/releases\">下载预编译的<code>.ipk</code></a></li>\n<li>自行编译</li>\n</ul>\n<p>在这里我们选择使用预编译的<code>ipk</code>文件。</p>\n<h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>首先下载<a href=\"https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic/releases/download/v3.1-4/luci-app-unblockneteasemusic_3.1-4_javascript_all.ipk\">最新的<code>ipk</code>文件</a>，截止到本文编写时间，最新版本为<code>v3.1-4</code>，使用node.js。</p>\n<p>可直接在OpenWrt中使用命令行下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic/releases/download/v3.1-4/luci-app-unblockneteasemusic_3.1-4_javascript_all.ipk</span><br></pre></td></tr></table></figure>\n\n<p>但如果github被墙，那么就需要在本地先通过代理下载好，再拷贝至OpenWrt。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp ./luci-app-unblockneteasemusic_3.1-4_javascript_all.ipk root@192.168.56.2:/root/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>直接使用opkg安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install ./luci-app-unblockneteasemusic_3.1-4_javascript_all.ipk</span><br></pre></td></tr></table></figure>\n\n<p><strong>dnsmasq</strong></p>\n<p>如果是初始环境，很可能遇到下面这个错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Configuring kmod-nfnetlink.</span><br><span class=\"line\">Configuring libnfnetlink0.</span><br><span class=\"line\">Configuring kmod-nf-conntrack-netlink.</span><br><span class=\"line\">Configuring libmnl0.</span><br><span class=\"line\">Configuring libnetfilter-conntrack3.</span><br><span class=\"line\">Configuring libgmp10.</span><br><span class=\"line\">Configuring libnettle8.</span><br><span class=\"line\">Configuring kmod-ipt-ipset.</span><br><span class=\"line\">Collected errors:</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /etc/hotplug.d/ntp/25-dnsmasqsec</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /etc/init.d/dnsmasq</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /usr/lib/dnsmasq/dhcp-script.sh</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /usr/sbin/dnsmasq</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /usr/share/acl.d/dnsmasq_acl.json</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /usr/share/dnsmasq/dhcpbogushostname.conf</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * check_data_file_clashes: Package dnsmasq-full wants to install file /usr/share/dnsmasq/rfc6761.conf</span><br><span class=\"line\">        But that file is already provided by package  * dnsmasq</span><br><span class=\"line\"> * opkg_install_cmd: Cannot install package luci-app-unblockneteasemusic.</span><br></pre></td></tr></table></figure>\n\n<p>这是因为在<code>luci-app-unblockneteasemusic</code>中依赖了<code>dnsmasq-full</code>，与预装的<code>dnsmasq</code>发生冲突。</p>\n<p><code>dnsmasq-full</code>可以替代<code>dnsmasq</code>，我们卸载<code>dnsmasq</code>后重装安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg remove dnsmasq</span><br><span class=\"line\">opkg install ./luci-app-unblockneteasemusic_3.1-4_javascript_all.ipk</span><br></pre></td></tr></table></figure>\n\n<p>即可安装成功。</p>\n<p>安装结束后会提示一个错误，可以忽略。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Collected errors:</span><br><span class=\"line\"> * resolve_conffiles: Existing conffile /etc/config/dhcp is different from the conffile <span class=\"keyword\">in</span> the new package. The new conffile will be placed at /etc/config/dhcp-opkg.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网页\"><a href=\"#网页\" class=\"headerlink\" title=\"网页\"></a>网页</h3><p>安装完成后，如果没有出现配置菜单，登出再登入即可，不需要重启。</p>\n<p>如果是初始环境，在打开配置网页时可能会出现下面的错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/lib/lua/luci/dispatcher.lua:1347: module <span class=\"string\">&#x27;luci.cbi&#x27;</span> not found:</span><br><span class=\"line\">\tno field package.preload[<span class=\"string\">&#x27;luci.cbi&#x27;</span>]</span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;./luci/cbi.lua&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/share/lua/luci/cbi.lua&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/share/lua/luci/cbi/init.lua&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/luci/cbi.lua&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/luci/cbi/init.lua&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;./luci/cbi.so&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/luci/cbi.so&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/loadall.so&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;./luci.so&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/luci.so&#x27;</span></span><br><span class=\"line\">\tno file <span class=\"string\">&#x27;/usr/lib/lua/loadall.so&#x27;</span></span><br><span class=\"line\">stack traceback:</span><br><span class=\"line\">\t[C]: <span class=\"keyword\">in</span> <span class=\"keyword\">function</span> <span class=\"string\">&#x27;require&#x27;</span></span><br><span class=\"line\">\t/usr/lib/lua/luci/dispatcher.lua:1347: <span class=\"keyword\">in</span> <span class=\"keyword\">function</span> <span class=\"string\">&#x27;_cbi&#x27;</span></span><br><span class=\"line\">\t/usr/lib/lua/luci/dispatcher.lua:1024: <span class=\"keyword\">in</span> <span class=\"keyword\">function</span> <span class=\"string\">&#x27;dispatch&#x27;</span></span><br><span class=\"line\">\t/usr/lib/lua/luci/dispatcher.lua:985: <span class=\"keyword\">in</span> <span class=\"keyword\">function</span> <span class=\"string\">&#x27;dispatch&#x27;</span></span><br><span class=\"line\">\t/usr/lib/lua/luci/dispatcher.lua:479: <span class=\"keyword\">in</span> <span class=\"keyword\">function</span> &lt;/usr/lib/lua/luci/dispatcher.lua:478&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这是因为缺少库<code>luci-compat</code>，补上后再刷新网页即可工作正常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">opkg install luci-compat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>默认配置不需要修改即可使用，所以可以直接勾选<code>启用本插件</code>开启服务，然后<code>保存并提交</code>。</p>\n<p>在安装完成后，是没有核心的。所以在首次使用时，会在后台下载核心，需要等待一会。</p>\n<p>可以去<code>日志</code>标签页查看是否更新完成。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">Local version: NOT FOUND, latest version: 7cbc0acff167f78748f69709894dd6a0747ccdbc.</span><br><span class=\"line\">Updating core...</span><br></pre></td></tr></table></figure>\n\n<p>如果更新失败，需要手动在<code>更新组件</code>标签页去再次更新核心。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">Succeeded in updating core.</span><br><span class=\"line\">Current core version: 7cbc0acff167f78748f69709894dd6a0747ccdbc.</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;level&quot;:30,&quot;time&quot;:1658718197068,&quot;pid&quot;:6249,&quot;hostname&quot;:&quot;OpenWrt&quot;,&quot;scope&quot;:&quot;app&quot;,&quot;msg&quot;:&quot;HTTP Server running @ http://0.0.0.0:5200&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:30,&quot;time&quot;:1658718197070,&quot;pid&quot;:6249,&quot;hostname&quot;:&quot;OpenWrt&quot;,&quot;scope&quot;:&quot;app&quot;,&quot;msg&quot;:&quot;HTTPS Server running @ http://0.0.0.0:5201&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直至下载成功后，本插件才可以正常工作。</p>\n<h3 id=\"客户端版本\"><a href=\"#客户端版本\" class=\"headerlink\" title=\"客户端版本\"></a>客户端版本</h3><p>注意截止至本文编写时，win10客户端的最新版本2.10.2无法使用代理，请参见<a href=\"https://github.com/UnblockNeteaseMusic/server/issues/695\">github issue</a>。</p>\n<p>解决方法：降级使用<a href=\"https://d1.music.126.net/dmusic/cloudmusicsetup2.9.9.199909.exe\">2.9.9版本客户端</a>。</p>\n<p>安装低版本客户端后，请关闭自动更新，避免又自动恢复到高版本。</p>\n<img src=\"/blog/2022/07/25/openwrt-unblock-netease-music/turn-off-auto-update.png\" class=\"\" title=\"关闭自动更新\">\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>不确定是OpenClash的版本问题，还是UnblockNeteaseMusic的版本问题，当前最新版无法与OpenClash一起使用。</p>\n<p>两个单独使用都正常，但一起开DNS就会出问题，无法解析所有域名。</p>\n<p>先开OpenClash，一切正常。再开网易云，此时UnblockNeteaseMusic不会出现日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO: (app) HTTP Server running @ http://0.0.0.0:5200</span><br><span class=\"line\">INFO: (app) HTTPS Server running @ http://0.0.0.0:5201</span><br></pre></td></tr></table></figure>\n<p>同时DNS坏掉。关掉网易云后正常。</p>\n<p>先开网易云，一切正常。再开OpenClash，此时DNS坏掉。关掉OpenClash后仍不正常，需要再关掉网易云才正常。</p>\n<p>工作正常的环境：<br>OpenWrt 21.02.3<br>unblockneteasemusic v2.13-1<br>OpenClash v0.45.78-beta, [Dev] v1.12.0-8, [TUN] 2022.11.25-8, [Meta] alpha-g7a6432, Fake-IP 混合, 使用api.dler.io转换订阅模板<br>一切正常。包括<code>curl https://google.com</code>。</p>\n<p>工作正常的环境：<br>OpenWrt 21.02.5<br>unblockneteasemusic v3.1-4<br>OpenClash v0.45.87-beta, [Dev] v1.13.0-3, [TUN] 2023.01.29-3, [Meta] alpha-g4c25f5e7, Redir-Host 兼容&#x2F;混合, 使用api.dler.io转换订阅模板<br>使用Fake-IP工作正常。<br>而且不管是Redir-Host还是Fake-IP，在openwrt上<code>curl https://google.com</code>都无法连接。</p>\n<p>工作<strong>不正常</strong>的环境：<br>OpenWrt 22.03.2&#x2F;22.03.3<br>unblockneteasemusic v2.13-1&#x2F;v3.1-4<br>OpenClash v0.45.87-beta, [Dev] v1.13.0-3, [TUN] 2023.01.29-3, [Meta] alpha-g4c25f5e7, Redir-Host&#x2F;Fake-IP 兼容&#x2F;混合, 使用api.dler.io转换订阅模板</p>\n<p>通过测试基本可以判定，原因出在系统OpenWrt 22.03，还是使用OpenWrt 21.02版本吧。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["openwrt"]},{"title":"翻墙","url":"/blog/2022/03/01/pass-the-wall/","content":"<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p>目前主流的协议有<a href=\"https://shadowsocks.org/en/index.html\">shadowsocks</a>和<a href=\"https://www.v2ray.com/developer/protocols/vmess.html\">vmess</a>。</p>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>服务器分两大类，自建vps和机场。</p>\n<p>vps是一台虚拟服务器，除了搭配机场还可以用作其它用途，和阿里腾讯的云服务器没大差别。</p>\n<p>机场则是一组服务器节点，直接提供代理服务。</p>\n<h3 id=\"自建\"><a href=\"#自建\" class=\"headerlink\" title=\"自建\"></a>自建</h3><p><strong>搬瓦工</strong></p>\n<p><a href=\"https://bandwagonhost.com/\">搬瓦工</a>是比较平价的vps，配置较低，买来基本只为翻墙。最低配的价格在49.99美元一年，1G带宽，每月1T流量。</p>\n<p><strong>谷歌云服务器</strong></p>\n<p>如果<a href=\"https://cloud.google.com/compute\">谷歌云服务器</a>还没有申请过免费试用可以试一下，如果已经用过了就无视吧。如果仅作为vps使用，有搬瓦工在，基本没有第二个更好的选择。</p>\n<h3 id=\"机场\"><a href=\"#机场\" class=\"headerlink\" title=\"机场\"></a>机场</h3><p><strong>搬瓦工机场</strong></p>\n<p><a href=\"https://justmysocks.net/\">搬瓦工机场</a>省去了搭建机场的烦恼，被墙后换IP的工作也交给了官方。如果只需要使用代理服务，首选这个。</p>\n<p>如果justmysocks被墙，可以使用<a href=\"https://justmysocks5.net/\">防墙域名</a>。</p>\n<p>网上提供的优惠码是<code>JMS9272283</code>，可以有5.2%优惠。</p>\n<p>最低价格是5.88美元一个月，一年58.8美元，美国结点，每月500G流量。和自建比起来，价格并没有优势，但强在易用性以及网络性能。自建如果想达到相同的网络性能，至少需要169.99美元一年的配置。</p>\n<p><strong>qwqjsq</strong></p>\n<p><a href=\"https://github.com/qwqjsq/qwqjsq\">qwqjsq</a>是个人搭建的机场，已经持续运营多年，不用太担心跑路。</p>\n<p>最低价格是7.9元20G流量一个月，与搬瓦工比起来门槛要低一些，如果不需要高强度使用代理可选择。<br>主推套餐是14.98元60G流量一个月。<br>最大流量包套餐是379.8元一年，全年2900G流量。</p>\n<p>节点以港台新加坡为主，美日韩ping值较高。</p>\n<p>有个<a href=\"http://aff01.fyb-aff01.com/\">FlyingBird</a>跟qwqjsq的界面一样，看来这种机场网站的建站也是一种服务。</p>\n<p><strong>web3vpn</strong></p>\n<p><a href=\"https://web3vpn.net/\">web3vpn</a>是<a href=\"https://www.qiyuanpay.com/mall/?link=u64008d6835b82\">在启源自动发卡平台上卖ChatGPT账号</a>的商家推荐的代理，这个机场没有持续跟踪，不知道已经运营了多久，跑路风险未知。</p>\n<p>最低价格14.9元15G流量一个月。<br>主推套餐240元一年，每月200G流量，有12元50G的叠加流量包。<br>最大流量包套餐是549元一年，每月500G流量。</p>\n<p>节点以港台新加坡为主，美日韩印澳节点ping值较高。</p>\n<p>更多机场可以去<a href=\"https://aijichang.com/\">爱机场</a>查看。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>客户端就百花齐放了，鉴于日常使用对性能要求不高，选择标准应该是易用优先。下面是我自已在用的，<a href=\"https://www.v2ray.com/awesome/tools.html\">这里</a>可以看到更多推荐。</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>桌面上的客户端基本两个选择，clash和v2ray。</p>\n<p>其中clash的易用性要好一些，推荐clash，如果clash不支持订阅服务器的格式，则用v2ray。</p>\n<ul>\n<li><a href=\"https://github.com/Fndroid/clash_for_windows_pkg\">clash</a></li>\n<li><a href=\"https://github.com/2dust/v2rayN\">v2rayN</a>。</li>\n</ul>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><ul>\n<li><a href=\"https://github.com/yichengchen/clashX\">ClashX</a></li>\n<li><a href=\"https://github.com/Cenmrev/V2RayX\">v2rayX</a>。</li>\n</ul>\n<h3 id=\"ios\"><a href=\"#ios\" class=\"headerlink\" title=\"ios\"></a>ios</h3><ul>\n<li><a href=\"https://apps.apple.com/us/app/quantumult/id1252015438\">Quantumult</a></li>\n</ul>\n<h3 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h3><ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-android\">shadowsocks-android</a></li>\n</ul>\n<h3 id=\"openwrt-路由器\"><a href=\"#openwrt-路由器\" class=\"headerlink\" title=\"openwrt(路由器)\"></a>openwrt(路由器)</h3><p>代理运行在windows和mac以及手机平台上都是以app的方式，不如linux下的服务直接和高性能。所以最有效率的方式是直接运行在路由器上。</p>\n<ul>\n<li><a href=\"https://github.com/vernesong/OpenClash\">OpenClash</a></li>\n<li><a href=\"https://github.com/jerrykuku/luci-app-vssr\">Hello World</a></li>\n</ul>\n<p>更多的openwrt应用可参见<a href=\"https://github.com/AUK9527/Are-u-ok/tree/main/apps\">这里</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["proxy"]},{"title":"使用pgsync同步postgres与elasticsearch","url":"/blog/2021/11/11/pgsync/","content":"<h2 id=\"pgsync\"><a href=\"#pgsync\" class=\"headerlink\" title=\"pgsync\"></a><a href=\"https://pgsync.com/\">pgsync</a></h2><p><a href=\"https://pgsync.com/\">pgsync</a>是一个中间件，用来将postgres中的数据同步至elasticsearch。</p>\n<p>只需要定义一下<a href=\"https://pgsync.com/schema/\">schema</a>，剩下的事都只可以交给它了。</p>\n<h2 id=\"使用需求\"><a href=\"#使用需求\" class=\"headerlink\" title=\"使用需求\"></a>使用需求</h2><h3 id=\"需要userepl权限的数据库账户\"><a href=\"#需要userepl权限的数据库账户\" class=\"headerlink\" title=\"需要userepl权限的数据库账户\"></a>需要<a href=\"https://www.postgresql.org/docs/current/view-pg-user.html\">userepl</a>权限的数据库账户</h3><p>为了开启监听，pgsync需要创建<a href=\"https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION-SLOTS\">replication slots</a>，此操作需要userepl权限。</p>\n<p>可使用sql语查询具有权限的用户：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> usename <span class=\"keyword\">FROM</span> pg_user <span class=\"keyword\">WHERE</span> userepl <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"logical-decoding\"><a href=\"#logical-decoding\" class=\"headerlink\" title=\"logical decoding\"></a><a href=\"https://www.postgresql.org/docs/current/logicaldecoding.html\">logical decoding</a></h3><p>为了监听到所有修改，需要将<a href=\"https://www.postgresql.org/docs/current/config-setting.html\">postgres.conf</a>中的<a href=\"https://www.postgresql.org/docs/current/runtime-config-wal.html\">wal_level</a>从默认的replication改为logical。</p>\n<p>可使用sql语句查询当前设置：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> wal_level;</span><br></pre></td></tr></table></figure>\n\n<p>修改wal_level可以直接修改<code>postgres.conf</code>，也可使用<a href=\"https://www.postgresql.org/docs/current/sql-altersystem.html\">ALTER SYSTEM</a>。</p>\n<p><strong>注意</strong>：修改wal_level需要<strong>重启postgres</strong>才会生效。我们可以通过sql语句查看wal_level的定义。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> pg_settings <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span><span class=\"string\">&#x27;wal_level&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>postgres.conf</strong><br>postgres.conf的文件位置可使用sql语句查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> config_file;</span><br><span class=\"line\"><span class=\"comment\">--- /var/lib/postgresql/data/postgresql.conf</span></span><br></pre></td></tr></table></figure>\n<p>打开文件直接修改即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wal_level = logical                    # minimal, replica, or logical</span><br></pre></td></tr></table></figure>\n\n<p><strong><a href=\"https://www.postgresql.org/docs/current/sql-altersystem.html\">ALTER SYSTEM</a></strong><br>使用ALTER SYSTEM语句来修改。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SYSTEM</span> <span class=\"keyword\">SET</span> wal_level <span class=\"operator\">=</span> logical;</span><br></pre></td></tr></table></figure>\n<p>ALTER SYSTEM会将设置值存入<code>postgres.auto.conf</code>，在启动时覆盖<code>postgres.conf</code>中的设置。</p>\n<h3 id=\"max-replication-slots\"><a href=\"#max-replication-slots\" class=\"headerlink\" title=\"max_replication_slots\"></a><a href=\"https://www.postgresql.org/docs/14/logical-replication-config.html\">max_replication_slots</a></h3><p>要监听数据变化至少需要一个replication slot，不能为0。可使用sql语句查询当前最大个数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> max_replication_slots;</span><br></pre></td></tr></table></figure>\n\n<p>本地安装的默认值是10，阿里云上的RDS是64。</p>\n<h3 id=\"阿里云RDS\"><a href=\"#阿里云RDS\" class=\"headerlink\" title=\"阿里云RDS\"></a>阿里云RDS</h3><p>如使用阿里云RDS，可参考最佳实践相关文档：<a href=\"https://www.alibabacloud.com/help/zh/doc-detail/281785.html\">开发运维建议</a>和<a href=\"https://www.alibabacloud.com/help/zh/doc-detail/119393.html?spm=a2c63.p38356.0.0.342ffd5a7jqWGy\">逻辑订阅</a>。</p>\n<h2 id=\"schema\"><a href=\"#schema\" class=\"headerlink\" title=\"schema\"></a><a href=\"https://pgsync.com/schema/\">schema</a></h2><p><a href=\"https://pgsync.com/schema/\">schema</a>是核心，在常规使用时，只需要修改schema文件就可以完成所有操作。</p>\n<p>可参考官方文档中给出的各种<a href=\"https://pgsync.com/tutorial/json-fields/\">例子</a>。</p>\n<h2 id=\"运行pgsync\"><a href=\"#运行pgsync\" class=\"headerlink\" title=\"运行pgsync\"></a>运行pgsync</h2><p>pgsync的使用分为两步，第一步创建triggers和logical replication slot，第二步启动同步守护。</p>\n<h3 id=\"bootstrap\"><a href=\"#bootstrap\" class=\"headerlink\" title=\"bootstrap\"></a>bootstrap</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bootstrap --config /path/to/schema.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pgsync --config /optional/path/to/schema.json --daemon</span><br></pre></td></tr></table></figure>\n\n<p>如果不想使用命令行，或者是在windows下使用，也可使用纯python，参见<a href=\"https://github.com/toluaina/pgsync/blob/master/bin/bootstrap\">bootstrap</a>和<a href=\"https://github.com/toluaina/pgsync/blob/master/bin/pgsync\">pgsync</a>命令的实现。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>在使用python时要注意<a href=\"https://pgsync.com/env-vars/\">环境变量</a>要否成功设置，可考虑使用<a href=\"https://saurabh-kumar.com/python-dotenv/\">python-dotenv</a>在一开始就载入。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>打开逻辑订阅后会极大的增加硬盘使用量，一定要监控硬盘使用量，避免硬盘爆掉。</p>\n<p><a href=\"https://postgresqlco.nf/doc/en/param/max_wal_size/\">max_wal_size</a>只是一个软限制，在高负载的情况下会超出这个值。</p>\n<p>节点掉线会导致wal日志累积，slot会一直保留节点所需的日志直到节点再次上线。</p>\n<p>在生产环境中使用replication slot，有以下建议：</p>\n<ol>\n<li>增加xlog日志个数的监控，当xlog数量超过正常值时报警</li>\n<li>做好对每个复制槽同步状态的监控，出现某个槽同步状态异常要及时处理，同步异常会造成lsn不向前推进</li>\n<li>对于业务很空闲但是数据需要同步的库，可以自定义脚本，定期更新无用表，手工推进lsn</li>\n<li>如果xlog已经堆积很多磁盘马上要爆炸的情况下，在考虑应急删掉复制槽之前要评估剩余空间是否还有足够富余，因为即使删掉复制槽，xlog也不是马上就会清理，删掉后主库vacuum也会产生较多xlog日志，一定要做好评估</li>\n<li>增加pg_replication_slot()视图中restart_lsn的监控，对于落后较大和长期不推进的lsn进行告警</li>\n<li>避免长事务，一般超过1天的事务理论上都可以取消掉的</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["elasticsearch","postgres"]},{"title":"玩玩stable diffusion","url":"/blog/2023/02/20/play-with-stable-diffusion/","content":"<p>上一篇文章介绍了如何使用stable-diffusion-webui自建服务，这一篇我们来简单玩玩。</p>\n<h2 id=\"第三方检查点\"><a href=\"#第三方检查点\" class=\"headerlink\" title=\"第三方检查点\"></a>第三方检查点</h2><p>在<a href=\"/blog/2023/02/17/intro-stable-diffusion/\" title=\"简单介绍一下stable diffusion\">上一篇</a>我们使用了CompVis和Stability AI官方的检查点，但其实还有很多第三方的检查点，比如动漫模型<a href=\"https://huggingface.co/Lykon/DreamShaper\">DreamShaper</a>和真人模型<a href=\"https://huggingface.co/TASUKU2023/Chilloutmix\">Chilloutmix</a>，同样可以在HuggingFace上找到。</p>\n<p>在文件和版本页面，我们可以看到这些检查点文件的扩展名是<code>.safetensors</code>，<a href=\"https://huggingface.co/docs/safetensors/index\">safetensors</a>是HuggingFace发明的一种文件格式，用以安全且快速的存储张量。<br>检查点除了<code>.ckpt</code>还支持<code>.safetensors</code>，以及<a href=\"https://pytorch.org/tutorials/beginner/saving_loading_models.html#saving-loading-model-for-inference\">PyTorch用来保存和加载模型</a>的<code>.pt</code>和<code>.pth</code>。</p>\n<h2 id=\"配置字符串\"><a href=\"#配置字符串\" class=\"headerlink\" title=\"配置字符串\"></a>配置字符串</h2><p>模型提供者同时会提供一些示范提示语以及配置，让你能生成同样的结果。比如在DreamShaper的<a href=\"https://civitai.com/gallery/45544?modelId=4384&modelVersionId=5636&infinite=false&returnUrl=/models/4384/dreamshaper\">官方示例</a>：</p>\n\n\n<p>我们点击右下角的<code>Copy Generation Data</code>，会得到这么一个字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">modelshoot style, (extremely detailed CG unity 8k wallpaper), 1girl, slim girl, open mouth, at a university, best quality, (masterpiece:1.1), watched by the others, long brown hair, sitting, tight crop top, school skirt, sunglasses on head, shy, embarrased</span><br><span class=\"line\">Negative prompt: worst quality, (low quality:1.3), bad hands, bad anatomy,  bad_prompt_version2, canvas frame, cartoon, 3d, ((disfigured)), ((bad art)), ((deformed)),((extra limbs)),((close up)),((b&amp;w)), wierd colors, blurry, (((duplicate))), ((morbid)), ((mutilated)), [out of frame], extra fingers, mutated hands, ((poorly drawn hands)), ((poorly drawn face)), (((mutation))), (((deformed))), ((ugly)), blurry, ((bad anatomy)), (((bad proportions))), ((extra limbs)), cloned face, (((disfigured))), out of frame, ugly, extra limbs, (bad anatomy), gross proportions, (malformed limbs), ((missing arms)), ((missing legs)), (((extra arms))), (((extra legs))), mutated hands, (fused fingers), (too many fingers), (((long neck))), Photoshop, video game, ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, 3d render</span><br><span class=\"line\">Size: 384x512, Seed: 0, Model: dreamshaper_332BakedVaeClipFix, Steps: 30, Sampler: DPM++ SDE Karras, CFG scale: 10, Clip skip: 2, Model hash: 13dfc9921f, Hires upscale: 2, Hires upscaler: Latent, Denoising strength: 0.7</span><br></pre></td></tr></table></figure>\n<p>这个配置字符串包含了所有产生这张图片需要的信息。有Prompt，Negative prompt，和其它所有配置。</p>\n<p>我们只要把这个字符串粘贴到webui的Prompt区域，然后点击右边的小箭头<code>Read generation parameters from prompt or last generation if prompt is empty into user interface.</code>，就会应用所有配置。</p>\n<h2 id=\"LoRA模型\"><a href=\"#LoRA模型\" class=\"headerlink\" title=\"LoRA模型\"></a>LoRA模型</h2><p><a href=\"https://arxiv.org/abs/2106.09685\">LoRA</a>的全写是Low-Rank Adaptation of Large Language Models，是微软为微调(fine-tuning)大型语言模型引入的一项技术，也可以<a href=\"https://huggingface.co/blog/lora\">用来微调Stable Diffusion</a>。</p>\n<p>这里需要引入一个新网站：<a href=\"https://civitai.com/\">civitai</a>。<strong>注意：NSFW</strong>。相比更贴近开发者的Hugging Face，它更贴近普通用户。LoRA模型可以在这里下载。</p>\n<p>比如经常搭配chilloutmix使用的亚州女性LoRA模型：</p>\n<ul>\n<li><a href=\"https://civitai.com/models/7448/korean-doll-likeness\">Korean Doll</a></li>\n<li><a href=\"https://civitai.com/models/7716/taiwan-doll-likeness\">Taiwan Doll</a></li>\n<li><a href=\"https://civitai.com/models/10135/japanese-doll-likeness\">Japanese Doll</a></li>\n</ul>\n<p>Lora模型的使用方法与检查点类似，下载后拷至<code>./models/Lora</code>目录，然后在提示语中使用即可。用法可以参见<a href=\"https://github.com/civitai/civitai/wiki/How-to-use-models#lora\">civitai的wiki</a>。</p>\n<p>比如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">best quality, ultra high res, (photorealistic:1.4), 1girl, long sleeve sweater, (full body), (closeup), wide angle, (low angle), (busty), ((huge breasts)), large breasts, (brown long hair:1.3), (looking at viewer),  &lt;lora:japaneseDollLikeness_v10:0.66&gt;</span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\">Size: 512x768, Seed: 3943162627, Model: chilloutmix_cilloutmixNi, Steps: 28, Sampler: DPM++ SDE Karras, CFG scale: 8, Model hash: 7234b76e42, Hires steps: 20, Hires upscale: 1.75, Hires upscaler: Latent (bicubic antialiased), Denoising strength: 0.5</span><br></pre></td></tr></table></figure>\n<p>中的<code>&lt;lora:japaneseDollLikeness_v10:0.66&gt;</code>即表示使用japanese Doll的Lora，系数0.66。</p>\n<h2 id=\"img2img\"><a href=\"#img2img\" class=\"headerlink\" title=\"img2img\"></a>img2img</h2><p>之前我们一直用的都是文字生成图片，但Stable Diffusion还可以使用图片+文字的形式来生成新的图片。</p>\n<p>img2img有很多种用法，比如：</p>\n<ol>\n<li>当觉得生成的图片方向对了时，可以保持提示语不变，使用img2img将text2img的图片当作新的起点；</li>\n<li>对整体满意，但需要微调时，可使用inpaint局部重绘；</li>\n<li>对风格满意，想尝试其它主体时，可使用新的提示语；</li>\n</ol>\n<p><code>CFG Scale</code>越大，越贴近描述语。</p>\n<p><code>Denoising strength</code>的值越大，越远离原图。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"使用docker上的postgres代替本机安装","url":"/blog/2021/11/05/postgres-on-docker/","content":"<p>本机安装postgresql后，pgadmin4老是提示版本低，但升级起来却麻烦，不如直接塞到docker里去，更新什么的简单不要太方便。</p>\n<h2 id=\"先备份\"><a href=\"#先备份\" class=\"headerlink\" title=\"先备份\"></a>先备份</h2><p>先把老有的数据库备份</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pg_dumpall -U postgres -f ./dump/dumpall.sql</span><br></pre></td></tr></table></figure>\n\n<p>注意<a href=\"https://www.postgresql.org/docs/12/app-pg-dumpall.html\">pg_dumpall</a>只会提取role、tablespaces、schema、data，并不会把数据库的创建语句dump出来。</p>\n<p>如果数据库不多，可以在之后的恢复中手动创建。</p>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><p>下一步是卸载本机的postgres，在卸载前先确认该备份的都已经备份好，包括。</p>\n<h2 id=\"运行docker版本\"><a href=\"#运行docker版本\" class=\"headerlink\" title=\"运行docker版本\"></a>运行docker版本</h2><h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h3><p>废话不多说直接列docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">pg12</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">postgres</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;max_connections=200&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">$POSTGRES_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_DB:</span> <span class=\"string\">test_db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5432</span><span class=\"string\">:5432</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;pgdata:/var/lib/postgresql/data&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;pgswap:/pgswap&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">pgadmin:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">pgadmin4</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">dpage/pgadmin4:latest</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">PGADMIN_DEFAULT_EMAIL:</span> <span class=\"string\">$PGADMIN_DEFAULT_EMAIL</span></span><br><span class=\"line\">      <span class=\"attr\">PGADMIN_DEFAULT_PASSWORD:</span> <span class=\"string\">$PGADMIN_DEFAULT_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">PGADMIN_LISTEN_PORT:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5050</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;pgadmin:/var/lib/pgadmin&quot;</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">postgres12</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">pgdata:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pgdata</span></span><br><span class=\"line\">  <span class=\"attr\">pgswap:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pgswap</span></span><br><span class=\"line\">  <span class=\"attr\">pgadmin:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pgadmin</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>使用yml中的command我们可以指定<a href=\"https://www.postgresql.org/docs/12/config-setting.html#id-1.6.6.4.5\">postgres的运行参数</a>：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">pg12</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:12</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">postgres</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;max_connections=200&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.postgresql.org/docs/12/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS\">max_connections</a>的默认值是<code>100</code>，很难够用。做为对比参考，阿里云的postgresql服务是<code>500</code>。</p>\n<h3 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h3><p>加入volumes可以将数据保持在host端，这样image升级或container重建就不会影响数据。</p>\n<p>我们指定了volumes的名字，也可以使用host的相对目录<code>./data</code>。<br>指定volume的好处在于多个项目可以共享卷，使用相对目录可以更好的管理数据防止误删，可根据实际情况选择。</p>\n<p>另外，自动生成的<code>volume_id</code>可以用<code>docker inspect -f &#39;&#123;&#123;range.Mounts&#125;&#125;&#123;&#123;.Name&#125;&#125;&#123;&#123;end&#125;&#125;&#39; pg12</code>语句来找到。</p>\n<p><strong>postgresql</strong></p>\n<p><code>/var/lib/postgresql/data</code>是postgres存放数据库的目录，我们还定义了一个<code>/pgswap</code>卷用来存放之前备份的dump文件。</p>\n<p><strong>pgadmin</strong></p>\n<p>pgadmin只需要mount一个目录<code>/var/lib/pgadmin</code>，所有配置都存储在这个文件夹中。可参见<a href=\"https://www.pgadmin.org/docs/pgadmin4/development/container_deployment.html#mapped-files-and-directories\">官方文档</a>。</p>\n<p><em>注意</em>：<br>如果pgadmin卷是有从外部拷来的文件，需要确保pgadmin用户有读写权限，如果没有的话需要在host上设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> -R 5050:5050 &lt;host_directory&gt;</span><br></pre></td></tr></table></figure>\n<p>可使用root用户登录（root用户的uid为0）pgadmin容器来运行这个。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -u 0 -it pgadmin4 bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从host中访问volumes\"><a href=\"#从host中访问volumes\" class=\"headerlink\" title=\"从host中访问volumes\"></a>从host中访问volumes</h3><p><a href=\"https://docs.docker.com/storage/volumes/#backup-restore-or-migrate-data-volumes\">docker官方推荐</a>不要直接从host中访问volumes，如果是需要备份，可以用docker命令，可参见<a href=\"https://github.com/microsoft/WSL/discussions/4176\">讨论帖</a>。</p>\n<p>如果使用的是wsl2 (Ubuntu)，</p>\n<p>docker的卷可在host上的<code>\\\\wsl$\\docker-desktop-data\\version-pack-data\\community\\docker\\volumes\\$&#123;volume_id&#125;\\_data</code>找到，</p>\n<p>因为docker中的<code>/var/lib/docker/</code>被映射到了<code>\\\\wsl$\\docker-desktop-data\\version-pack-data\\community\\docker\\</code>。</p>\n<p>但如果使用的不是wsl2而是Hyper-V后端，那么<code>/var/lib/docker</code>会被映射到<code>C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks</code>。</p>\n<p><strong>从wsl中访问</strong></p>\n<p>如果想从wsl中访问<code>\\\\wsl$</code>，可以用虚拟盘符来做一个跳转。</p>\n<p>首先映射一个w盘</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use w: \\\\wsl<span class=\"variable\">$</span>\\docker<span class=\"literal\">-desktop-data</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在wsl中映射w盘</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /mnt/docker</span><br><span class=\"line\">sudo mount -t drvfs w: /mnt/docker</span><br></pre></td></tr></table></figure>\n<p>这样在wsl中就能通过<code>/mnt/docker/version-pack-data/community/docker/volumes/$&#123;volume_id&#125;/_data</code>来访问到volume内容了。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>一些设置我们使用<code>.env</code>来实现。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">COMPOSE_PROJECT_NAME</span>=postgres12</span><br><span class=\"line\"><span class=\"attr\">POSTGRES_PASSWORD</span>=password</span><br><span class=\"line\"><span class=\"attr\">PGADMIN_DEFAULT_EMAIL</span>=admin@email.com</span><br><span class=\"line\"><span class=\"attr\">PGADMIN_DEFAULT_PASSWORD</span>=password</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>在pgadmin的网页中，连接postgres的hostname填<code>pg12</code>即可</p>\n<h2 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it pg12 /bin/sh</span><br><span class=\"line\">psql -U postgres -f ./dump/dumpall.sql</span><br></pre></td></tr></table></figure>\n\n<p>中间会报几个database不存在的错误，可手动创建。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker","postgres"]},{"title":"为stable diffusion训练预处理图片","url":"/blog/2023/02/24/preprocess-images-for-stable-diffusion/","content":"<h2 id=\"图片尺寸\"><a href=\"#图片尺寸\" class=\"headerlink\" title=\"图片尺寸\"></a>图片尺寸</h2><p>目前主流的基模就3个，<a href=\"https://huggingface.co/CompVis/stable-diffusion-v1-4\">sd-v1.4</a>, <a href=\"https://huggingface.co/runwayml/stable-diffusion-v1-5\">sd-v1.5</a>和<a href=\"https://huggingface.co/stabilityai/stable-diffusion-2-1\">sd-v2.1</a>。</p>\n<p>其中，sd-v2.1的大小为768x768，其它都是512x512。</p>\n<p><del>我们训练的数据集大小要和基模保持一致（吗？不确定）。</del></p>\n<h2 id=\"人脸\"><a href=\"#人脸\" class=\"headerlink\" title=\"人脸\"></a>人脸</h2><p>如果需要训练的数据集是人脸照片，那么可以直接使用stable-diffusion-webui中的<code>自动焦点裁剪（Auto focal point crop）</code>功能。</p>\n<img src=\"/blog/2023/02/24/preprocess-images-for-stable-diffusion/auto-focal-point-crop.png\" class=\"\" title=\"自动焦点裁剪\">\n\n<p>一键生成，只需检查一下就好。</p>\n<h2 id=\"提示语\"><a href=\"#提示语\" class=\"headerlink\" title=\"提示语\"></a>提示语</h2><p>stable-diffusion-webui可以在裁剪的同时生成提示语，推荐使用deepbooru算法。</p>\n<h2 id=\"手动剪裁\"><a href=\"#手动剪裁\" class=\"headerlink\" title=\"手动剪裁\"></a>手动剪裁</h2><p>如果图片不敏感，可以使用在线的剪裁网站：<a href=\"https://birme.net/\">brime</a>，它也支持自动焦点检测。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"PostgreSQL中的用户权限","url":"/blog/2020/10/29/privilege-on-psql/","content":"<h1 id=\"PostgreSQL中的用户权限\"><a href=\"#PostgreSQL中的用户权限\" class=\"headerlink\" title=\"PostgreSQL中的用户权限\"></a>PostgreSQL中的用户权限</h1><p>假设这样一个使用场景，我们有一系列服装商品在网上商城出售，消费者在商城注册账号，浏览商品，下订单购买。</p>\n<p>后台使用了一个数据库emart，里面有users，products, orders三个表，分别对应消费者账号，产品信息，订单。</p>\n<p>除了开发人员要使用数据库外，我们还需开放数据给运营人员和供应链人员，来迭代优化购买体验。</p>\n<p>其中运营人员需要只读访问users表，来针对性的投放广告；供应链人员需要只读访问products和orders表，来调整仓储和供应链。</p>\n<p>我们基于以上假设来创建数据库并细分权限。</p>\n<h2 id=\"常规初始化数据库\"><a href=\"#常规初始化数据库\" class=\"headerlink\" title=\"常规初始化数据库\"></a>常规初始化数据库</h2><p>我们先试试常规的初始化流程，看看会发生什么。</p>\n<p>先使用数据库管理员账号登录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql -U postgres</span><br></pre></td></tr></table></figure>\n\n<p>创建数据库emart和三个表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE emart;</span><br><span class=\"line\">\\c emart;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> users (id <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products (id <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (id <span class=\"type\">int</span>);</span><br></pre></td></tr></table></figure>\n\n<p>创建三个角色，开发人员、运营人员和供应链人员。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE dev; <span class=\"comment\">-- 开发组</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> users <span class=\"keyword\">TO</span> dev;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> products <span class=\"keyword\">TO</span> dev;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> orders <span class=\"keyword\">TO</span> dev;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE opr; <span class=\"comment\">-- 运营组</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">ON</span> users <span class=\"keyword\">TO</span> opr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE scm; <span class=\"comment\">-- 供应链组</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">ON</span> products <span class=\"keyword\">TO</span> scm;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">ON</span> orders <span class=\"keyword\">TO</span> scm;</span><br></pre></td></tr></table></figure>\n\n<p>创建三个用户，asher, bill, chris，分别对应开发人员、运营人员和供应链人员。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> albert <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;albert_password&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> bill <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;bill_password&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> chris <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">&#x27;chris_password&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> dev <span class=\"keyword\">TO</span> albert;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> opr <span class=\"keyword\">TO</span> bill;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> scm <span class=\"keyword\">to</span> chris;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"试验结果\"><a href=\"#试验结果\" class=\"headerlink\" title=\"试验结果\"></a>试验结果</h2><p>现在我们使用供应链人员chris的账号登录，他有对products和orders的查询权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql -U chris emart</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br><span class=\"line\">错误:  对表 users 权限不够</span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders(id) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">错误:  对表 orders 权限不够</span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"> id</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\">(<span class=\"number\">0</span> 行记录)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"似乎还有哪里不对\"><a href=\"#似乎还有哪里不对\" class=\"headerlink\" title=\"似乎还有哪里不对\"></a>似乎还有哪里不对</h2><p>一切正常。但如果尝试下面的命令，那与我们的直觉不符。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\conninfo</span><br><span class=\"line\">以用户 &quot;chris&quot; 的身份, 在主机&quot;localhost&quot; (地址 &quot;::1&quot;), 端口&quot;5432&quot;连接到数据库 &quot;emart&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\l</span><br><span class=\"line\">                                                            数据库列表</span><br><span class=\"line\">       名称        <span class=\"operator\">|</span>  拥有者  <span class=\"operator\">|</span> 字元编码 <span class=\"operator\">|</span>            校对规则            <span class=\"operator\">|</span>             Ctype              <span class=\"operator\">|</span>       存取权限</span><br><span class=\"line\"><span class=\"comment\">-------------------+----------+----------+--------------------------------+--------------------------------+-----------------------</span></span><br><span class=\"line\"> emart             <span class=\"operator\">|</span> postgres <span class=\"operator\">|</span> UTF8     <span class=\"operator\">|</span> Chinese (Simplified)_China<span class=\"number\">.936</span> <span class=\"operator\">|</span> Chinese (Simplified)_China<span class=\"number\">.936</span> <span class=\"operator\">|</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\d users</span><br><span class=\"line\">           数据表 &quot;public.users&quot;</span><br><span class=\"line\"> 栏位 <span class=\"operator\">|</span>  类型   <span class=\"operator\">|</span> 校对规则 <span class=\"operator\">|</span> 可空的 <span class=\"operator\">|</span> 预设</span><br><span class=\"line\"><span class=\"comment\">------+---------+----------+--------+------</span></span><br><span class=\"line\"> id   <span class=\"operator\">|</span> <span class=\"type\">integer</span> <span class=\"operator\">|</span>          <span class=\"operator\">|</span>        <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n\n<p>我们并不想让无关人员看到users表以及users表的列定义。</p>\n<p>再比如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> hello (id <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span></span><br></pre></td></tr></table></figure>\n\n<p>竟然可以创建新表，我们期望的难道不是一个只有读取权限账号吗。</p>\n<h2 id=\"迷题揭晓：PSQL中的Schema\"><a href=\"#迷题揭晓：PSQL中的Schema\" class=\"headerlink\" title=\"迷题揭晓：PSQL中的Schema\"></a>迷题揭晓：<a href=\"https://www.postgresql.org/docs/current/ddl-schemas.html\">PSQL中的Schema</a></h2><p>在PostgreSQL创建一个表时，它会默认将表放在名为public的shcema下。比如这两条sql语句是一样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> public.users;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用命令来查询当前数据库下的schema:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> &quot;names&quot;(&quot;name&quot;) <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> n.nspname <span class=\"keyword\">AS</span> &quot;name&quot;</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> pg_catalog.pg_namespace n</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span> n.nspname <span class=\"operator\">!</span><span class=\"operator\">~</span> <span class=\"string\">&#x27;^pg_&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">AND</span> n.nspname <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;information_schema&#x27;</span></span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> &quot;name&quot;,</span><br><span class=\"line\">  pg_catalog.has_schema_privilege(<span class=\"built_in\">current_user</span>, &quot;name&quot;, <span class=\"string\">&#x27;CREATE&#x27;</span>) <span class=\"keyword\">AS</span> &quot;create&quot;,</span><br><span class=\"line\">  pg_catalog.has_schema_privilege(<span class=\"built_in\">current_user</span>, &quot;name&quot;, <span class=\"string\">&#x27;USAGE&#x27;</span>)  <span class=\"keyword\">AS</span> &quot;usage&quot;,</span><br><span class=\"line\">  &quot;name&quot; <span class=\"operator\">=</span> pg_catalog.current_schema() <span class=\"keyword\">AS</span> &quot;current&quot;</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> &quot;names&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  name  <span class=\"operator\">|</span> <span class=\"keyword\">create</span> <span class=\"operator\">|</span> usage <span class=\"operator\">|</span> <span class=\"keyword\">current</span></span><br><span class=\"line\"><span class=\"comment\">--------+--------+-------+---------</span></span><br><span class=\"line\"> public <span class=\"operator\">|</span> t      <span class=\"operator\">|</span> t     <span class=\"operator\">|</span> t</span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br></pre></td></tr></table></figure>\n\n<p>而这个名为public的shcema的定义是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">TO</span> PUBLIC;</span><br></pre></td></tr></table></figure>\n<p><code>ALL</code>在schema中代表USAGE和CREATE这两个权限。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>很容易想到有两种解决方案，第一种是从public中去除USAGE和CREATE这两个权限，第二种是创建一个新的schema。</p>\n<h3 id=\"尝试一：修改public\"><a href=\"#尝试一：修改public\" class=\"headerlink\" title=\"尝试一：修改public\"></a>尝试一：修改public</h3><p>使用管理员登录数据库emart，去除public对所有人的权限，改为对用户组开放。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">FROM</span> PUBLIC;</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> USAGE <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">FROM</span> PUBLIC;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">TO</span> dev;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">TO</span> opr;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> SCHEMA public <span class=\"keyword\">TO</span> scm;</span><br></pre></td></tr></table></figure>\n\n<p>这样修改完public后，opr和scm用户组就无法进行创建表的操作。但chris仍然能看到其它表和表结构，所以我们进行第二项尝试。</p>\n<h3 id=\"解决方法：创建新的schema\"><a href=\"#解决方法：创建新的schema\" class=\"headerlink\" title=\"解决方法：创建新的schema\"></a>解决方法：创建新的schema</h3><p>使用管理员账号登录，创建名为opr, scm的schema，给对应的用户组创建和使用的权限。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA opr;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> SCHEMA opr <span class=\"keyword\">TO</span> opr;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> SCHEMA opr <span class=\"keyword\">TO</span> dev;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA scm;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> USAGE <span class=\"keyword\">ON</span> SCHEMA scm <span class=\"keyword\">TO</span> scm;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> SCHEMA scm <span class=\"keyword\">TO</span> dev;</span><br></pre></td></tr></table></figure>\n\n<p>将表从public中移至对应的schema下。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> users <span class=\"keyword\">SET</span> SCHEMA opr;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> products <span class=\"keyword\">SET</span> SCHEMA scm;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> orders <span class=\"keyword\">SET</span> SCHEMA scm;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>我们使用chris登录，尝试一下是否如我们所愿。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> opr.users;</span><br><span class=\"line\">错误:  对模式 opr 权限不够</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> opr.users;</span><br><span class=\"line\">                   <span class=\"operator\">^</span></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> scm.orders;</span><br><span class=\"line\"> id</span><br><span class=\"line\"><span class=\"comment\">----</span></span><br><span class=\"line\">(<span class=\"number\">0</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> opr.hello (id <span class=\"type\">int</span>);</span><br><span class=\"line\">错误:  对模式 opr 权限不够</span><br><span class=\"line\">第<span class=\"number\">1</span>行<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> opr.hello (id <span class=\"type\">int</span>);</span><br><span class=\"line\">                  <span class=\"operator\">^</span></span><br></pre></td></tr></table></figure>\n\n<p>不错，再试下查看表和表结构。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\d</span><br><span class=\"line\">              关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span> 名称  <span class=\"operator\">|</span>  类型  <span class=\"operator\">|</span> 拥有者</span><br><span class=\"line\"><span class=\"comment\">----------+-------+--------+--------</span></span><br><span class=\"line\"> public   <span class=\"operator\">|</span> hello <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> chris</span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br></pre></td></tr></table></figure>\n<p>不对呀，连scm下的表都看不到了。</p>\n<p>这是因为search_path没有设置的缘故。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SHOW</span> search_path;</span><br><span class=\"line\"> search_path</span><br><span class=\"line\"><span class=\"comment\">-------------</span></span><br><span class=\"line\"> public</span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> search_path <span class=\"keyword\">TO</span> scm,public;</span><br><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">emart<span class=\"operator\">=</span><span class=\"operator\">&gt;</span> \\d</span><br><span class=\"line\">                关联列表</span><br><span class=\"line\"> 架构模式 <span class=\"operator\">|</span>   名称   <span class=\"operator\">|</span>  类型  <span class=\"operator\">|</span>  拥有者</span><br><span class=\"line\"><span class=\"comment\">----------+----------+--------+----------</span></span><br><span class=\"line\"> public   <span class=\"operator\">|</span> hello    <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> chris</span><br><span class=\"line\"> scm      <span class=\"operator\">|</span> orders   <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> postgres</span><br><span class=\"line\"> scm      <span class=\"operator\">|</span> products <span class=\"operator\">|</span> 数据表 <span class=\"operator\">|</span> postgres</span><br><span class=\"line\">(<span class=\"number\">3</span> 行记录)</span><br></pre></td></tr></table></figure>\n\n<p>搞定收工。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["sql"]},{"title":"2022年青甘大环线出行计划","url":"/blog/2022/07/04/qinghai-gansu-trip-plan/","content":"<h1 id=\"2022年青甘大环线出行计划\"><a href=\"#2022年青甘大环线出行计划\" class=\"headerlink\" title=\"2022年青甘大环线出行计划\"></a>2022年青甘大环线出行计划</h1><p>出行计划8月6号走，8月14号回，共9天。</p>\n<h2 id=\"Day-1：杭州-兰州（车上70公里，1个多小时）\"><a href=\"#Day-1：杭州-兰州（车上70公里，1个多小时）\" class=\"headerlink\" title=\"Day 1：杭州 - 兰州（车上70公里，1个多小时）\"></a>Day 1：杭州 - 兰州（车上70公里，1个多小时）</h2><p>8月6号周六下午16：25从<a href=\"https://map.baidu.com/search/%E6%9D%AD%E5%B7%9E%E8%90%A7%E5%B1%B1%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA-t3%E8%88%AA%E7%AB%99%E6%A5%BC/@13407777.225,3513023.01,19z?querytype=s&da_src=shareurl&wd=%E6%9D%AD%E5%B7%9E%E8%90%A7%E5%B1%B1%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA-T3%E8%88%AA%E7%AB%99%E6%A5%BC&c=36&src=0&wd2=%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%90%A7%E5%B1%B1%E5%8C%BA&pn=0&sug=1&l=18&b=(11534813.687646978,4345061.961732369;11536101.284875683,4345711.795958731)&from=webmap&biz_forward=%7B%22scaler%22:1,%22styles%22:%22pl%22%7D&sug_forward=e103971c0080106725e0a05d&device_ratio=1\">杭州萧山机场T3</a>出发，到<a href=\"https://map.baidu.com/search/%E5%85%B0%E5%B7%9E%E4%B8%AD%E5%B7%9D%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BAt1%E8%88%AA%E7%AB%99%E6%A5%BC/@11535523.645,4345829.47,19z?querytype=s&da_src=shareurl&wd=%E5%85%B0%E5%B7%9E%E4%B8%AD%E5%B7%9D%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BAT1%E8%88%AA%E7%AB%99%E6%A5%BC&c=179&src=0&wd2=%E5%85%B0%E5%B7%9E%E5%B8%82%E6%B0%B8%E7%99%BB%E5%8E%BF&pn=0&sug=1&l=19&b=(13407297.225,3512780.76;13408257.225,3513265.26)&from=webmap&biz_forward=%7B%22scaler%22:1,%22styles%22:%22pl%22%7D&sug_forward=18bcfd3ae6d9093296f08cf8&device_ratio=1\">兰州中川机场T1</a>已经晚上7：15了，拿完行李，取完车，估计快要到8点。<br><a href=\"https://map.baidu.com/dir/%E5%85%B0%E5%B7%9E%E4%B8%AD%E5%B7%9D%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA/%E6%AC%A2%E9%98%81%E9%85%92%E5%BA%97(%E5%85%B0%E5%B7%9E%E5%BC%A0%E6%8E%96%E8%B7%AF%E6%AD%A5%E8%A1%8C%E8%A1%97%E5%BA%97)/@11531493.978669202,4314923.295,11.72z?querytype=nav&c=1&sn=2$$$$$$%E5%85%B0%E5%B7%9E%E4%B8%AD%E5%B7%9D%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA$$1$$%E5%85%B0%E5%B7%9E%E5%B8%82%E6%B0%B8%E7%99%BB%E5%8E%BF$$&en=1$$f42b757de7df87aba5da3926$$11558570.01,4284274.29$$%E6%AC%A2%E9%98%81%E9%85%92%E5%BA%97(%E5%85%B0%E5%B7%9E%E5%BC%A0%E6%8E%96%E8%B7%AF%E6%AD%A5%E8%A1%8C%E8%A1%97%E5%BA%97)$$0$$$$&sc=1&ec=1&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">开车到市区</a><a href=\"https://m.huazhu.com/Hotel/NewDetail/8000519\">欢阁酒店</a>安顿下，路上约70公里，1个多小时，预计9点半。</p>\n<p>酒店对面的<a href=\"https://www.dianping.com/shop/k14e1K2tNTrKE3T7\">新世界超市</a>周六22：00关门，赶紧补充干粮（水，自热米饭，零食）。</p>\n<p><a href=\"http://www.mafengwo.cn/poi/16790.html\">白塔山公园</a>晚上8点关门，这次只能放弃，但可以去<a href=\"https://www.mafengwo.cn/poi/87858108.html\">黄河铁桥</a>看看夜景。把车到停在黄河铁桥旁边，路上顺便找家店吃东西，饭后逛逛看看。</p>\n<p>PS：需要提前在兰州租一个大疆Air2S，晚上或第二天上午取货，来大西北不带无人机观景乐趣少一半。</p>\n<h2 id=\"Day-2：甘肃博物馆-塔尔寺-青海湖-黑马河镇（车上400公里，6小时45分钟）\"><a href=\"#Day-2：甘肃博物馆-塔尔寺-青海湖-黑马河镇（车上400公里，6小时45分钟）\" class=\"headerlink\" title=\"Day 2：甘肃博物馆 - [塔尔寺] - 青海湖 - 黑马河镇（车上400公里，6小时45分钟）\"></a>Day 2：甘肃博物馆 - [塔尔寺] - 青海湖 - 黑马河镇（车上400公里，6小时45分钟）</h2><p><a href=\"http://www.mafengwo.cn/poi/16742.html\">甘肃省博物馆</a>是来了兰州不可不去的地方。它每周开放6天，周一闭馆，还好我们是周六到的兰州。<br>需要在“甘肃省博物馆”公众号<a href=\"http://www.gansumuseum.com/about/show-7.html\">提前预约</a>，目前因为防疫，只允许预约3天内的场次。所以我们要在8月4号预约7号周日上午的场次。<br>上午的时间就交给甘博了，提前做点功课，比如甘博馆重点藏品的故事，又比如网红“马踏飞燕”。<br>可以先电话咨询一下能不能预约讲解员，0931-2339131，0931-2339133。</p>\n<p>8点起床，吃完早饭9点准时<a href=\"https://map.baidu.com/dir/%E6%AC%A2%E9%98%81%E9%85%92%E5%BA%97(%E5%85%B0%E5%B7%9E%E5%BC%A0%E6%8E%96%E8%B7%AF%E6%AD%A5%E8%A1%8C%E8%A1%97%E5%BA%97)/%E7%94%98%E8%82%83%E7%9C%81%E5%8D%9A%E7%89%A9%E9%A6%86/@11555335.372697467,4284420.965,15.78z?querytype=nav&c=36&sn=1$$f42b757de7df87aba5da3926$$11558570.01,4284274.29$$%E6%AC%A2%E9%98%81%E9%85%92%E5%BA%97(%E5%85%B0%E5%B7%9E%E5%BC%A0%E6%8E%96%E8%B7%AF%E6%AD%A5%E8%A1%8C%E8%A1%97%E5%BA%97)$$0$$$$&en=2$$$$$$%E7%94%98%E8%82%83%E7%9C%81%E5%8D%9A%E7%89%A9%E9%A6%86$$1$$%E5%85%B0%E5%B7%9E%E5%B8%82%E4%B8%83%E9%87%8C%E6%B2%B3%E5%8C%BA$$&sc=36&ec=36&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">进博物馆</a>。</p>\n<p>一出博物馆<a href=\"https://map.baidu.com/dir/%E7%94%98%E8%82%83%E7%9C%81%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%99%AF%E5%8C%BA-%E4%BA%8C%E9%83%8E%E5%89%91%E6%99%AF%E5%8C%BA/@11316368.43557377,4327667.295,9.91z?querytype=nav&c=68&sn=2$$$$$$%E7%94%98%E8%82%83%E7%9C%81%E5%8D%9A%E7%89%A9%E9%A6%86$$1$$%E5%85%B0%E5%B7%9E%E5%B8%82%E4%B8%83%E9%87%8C%E6%B2%B3%E5%8C%BA$$&en=1$$f1e2ddd3a0fe8cc317948eb7$$11187946.43,4355522.15$$%E9%9D%92%E6%B5%B7%E6%B9%96%E6%99%AF%E5%8C%BA-%E4%BA%8C%E9%83%8E%E5%89%91%E6%99%AF%E5%8C%BA$$0$$$$&sc=68&ec=68&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">立马直奔</a><a href=\"https://www.mafengwo.cn/poi/10136.html\">青海湖</a>。<br>这一程路上有约376公里，约5个半小时。如果11点从博物馆出来，5点前能到。为节省时间，中饭就在路上吃了。<br>当天青海湖的<a href=\"http://richu.ttcha.net/hainanzhou/20220807.html\">日落时间</a>在8点17分，可以玩2-3小时。</p>\n<p>快到青海湖时路边会有一些私人种植的油菜花田，收费让游客进入拍照。看到中意的可以停一下。</p>\n<p>有空可以导航到<a href=\"https://map.baidu.com/poi/%E9%9D%92%E6%B5%B7%E6%B9%96%E5%8D%97%E5%B1%B1%E5%8D%97%E7%89%A7%E5%9C%BA/@11185605.795,4352420.25,19z?uid=32fb67aff03361ccc909f032&ugc_type=3&ugc_ver=1&device_ratio=1&compat=1&pcevaname=pc4.1&querytype=detailConInfo&da_src=shareurl\">南山南牧场</a>方向，开上山，不用开到终点，在半山腰上找到不错的地方就可以停车下来观景。</p>\n<p>尽量在天黑前赶到<a href=\"http://www.mafengwo.cn/poi/73867292.html\">黑马河镇</a>住下，路上沿着青海湖开，正好可以欣赏日落。<br><a href=\"https://map.baidu.com/dir/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%99%AF%E5%8C%BA-%E4%BA%8C%E9%83%8E%E5%89%91%E6%99%AF%E5%8C%BA/%E9%BB%91%E9%A9%AC%E6%B2%B3%E9%95%87/@11136231.063412817,4365956.98,12.1z?querytype=nav&c=11&sn=1$$f1e2ddd3a0fe8cc317948eb7$$11187946.43,4355522.15$$%E9%9D%92%E6%B5%B7%E6%B9%96%E6%99%AF%E5%8C%BA-%E4%BA%8C%E9%83%8E%E5%89%91%E6%99%AF%E5%8C%BA$$0$$$$&en=2$$$$$$%E9%BB%91%E9%A9%AC%E6%B2%B3%E9%95%87$$1$$%E6%B5%B7%E5%8D%97%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E%E5%85%B1%E5%92%8C%E5%8E%BF$$&sc=11&ec=11&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">从青海湖二郎剑景区到黑马河</a>约70公里，开车约1小时15分钟。</p>\n<h2 id=\"Day-3：黑马河镇-德令哈市镇-大柴旦翡翠湖-大柴旦镇（车上500公里，6小时45分钟）\"><a href=\"#Day-3：黑马河镇-德令哈市镇-大柴旦翡翠湖-大柴旦镇（车上500公里，6小时45分钟）\" class=\"headerlink\" title=\"Day 3：黑马河镇 - 德令哈市镇 - 大柴旦翡翠湖 - 大柴旦镇（车上500公里，6小时45分钟）\"></a>Day 3：黑马河镇 - 德令哈市镇 - 大柴旦翡翠湖 - 大柴旦镇（车上500公里，6小时45分钟）</h2><p>早上在黑马河看日出，<a href=\"(http://richu.ttcha.net/gonghe/20220807.html)\">日出时间</a>为6点28分，5点半就要起来了。看完日出开车吃出发前往<a href=\"https://www.mafengwo.cn/poi/33347280.html\">大柴旦翡翠湖</a>。<br>中间可以在德令哈市休息吃个中饭加个油，<a href=\"https://map.baidu.com/dir/%E9%BB%91%E9%A9%AC%E6%B2%B3%E9%95%87/%E5%BE%B7%E4%BB%A4%E5%93%88%E5%B8%82/@10933927.871877795,4415903.324999999,10.35z?querytype=nav&navtp=2&c=65&drag=1&sc=65&ec=65&sy=0&sn=1$$$$11108216.2,4376332.61$$%E9%BB%91%E9%A9%AC%E6%B2%B3%E9%95%87$$$$$$11108216.2,4376332.61$$&en=1$$$$10839016.29,4465333.5$$%E5%BE%B7%E4%BB%A4%E5%93%88%E5%B8%82$$$$$$10839016.29,4465333.5$$&version=4&mrs=1&route_traffic=1&da_src=shareurl\">从黑马河到德令哈</a>约280公里，3i小时45分钟。<br>德令哈的景点是可鲁克湖和外星人基地，不是特别赞，我们可以跳过。</p>\n<p>吃完中饭前往第二个精华景点：大柴旦翡翠湖。<br><a href=\"https://map.baidu.com/dir/%E5%BE%B7%E4%BB%A4%E5%93%88%E5%B8%82/%E7%BF%A1%E7%BF%A0%E6%B9%96/@10687818.231609538,4499632.74,10.56z?querytype=nav&navtp=2&c=11&drag=1&sc=11&ec=65&sy=0&sn=1$$$$10839014.06,4465333.53$$%E5%BE%B7%E4%BB%A4%E5%93%88%E5%B8%82$$$$$$10839014.06,4465333.53$$&en=1$$$$10605790.15,4535314.28$$%E7%BF%A1%E7%BF%A0%E6%B9%96$$$$$$10605790.15,4535314.28$$&version=4&mrs=1&route_traffic=1&da_src=shareurl\">从德令哈到翡翠湖</a>约220公里，3小时。</p>\n<p>差不多4点就能到，在翡翠湖尽情玩到天黑，<a href=\"https://map.baidu.com/dir/%E7%BF%A1%E7%BF%A0%E6%B9%96/%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87/@10609339.403591653,4535838.15,15.09z?querytype=nav&c=11&sn=1$$aac2e504856c7e002d4733f8$$10605800.17,4535251.23$$%E7%BF%A1%E7%BF%A0%E6%B9%96$$0$$$$&en=2$$$$$$%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87$$1$$%E6%B5%B7%E8%A5%BF%E8%92%99%E5%8F%A4%E6%97%8F%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E$$&sc=11&ec=11&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">回大柴旦镇上</a>住宿。</p>\n<h2 id=\"Day-4：大柴旦镇-乌素特水上雅丹-俄博梁-冷湖-x2F-大柴旦（车上620公里，9-5小时）\"><a href=\"#Day-4：大柴旦镇-乌素特水上雅丹-俄博梁-冷湖-x2F-大柴旦（车上620公里，9-5小时）\" class=\"headerlink\" title=\"Day 4：大柴旦镇 - 乌素特水上雅丹 - 俄博梁 - 冷湖&#x2F;大柴旦（车上620公里，9.5小时）\"></a>Day 4：大柴旦镇 - 乌素特水上雅丹 - 俄博梁 - 冷湖&#x2F;大柴旦（车上620公里，9.5小时）</h2><p>起床吃个早餐继续前往<a href=\"https://www.mafengwo.cn/poi/614204.html\">东台吉乃尔湖</a>，我们跳过了网红<a href=\"https://www.mafengwo.cn/poi/10150.html\">茶卡盐湖</a>，大家都说东台吉乃尔湖要更好看。<br><a href=\"https://map.baidu.com/dir/%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87/%E4%B8%9C%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96/@10520256.569378963,4511691.405,10.99z?querytype=nav&c=68&sn=2$$$$$$%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87$$1$$%E6%B5%B7%E8%A5%BF%E8%92%99%E5%8F%A4%E6%97%8F%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E$$&en=2$$$$$$%E4%B8%9C%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96$$0$$$$&sc=68&ec=68&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">从大柴旦镇到东台吉乃尔湖</a>约200公里，开3小时。</p>\n<p>这里已经属于南八仙雅丹地貌群，地广人希，油箱少1&#x2F;3就补油，保证续航。出了大柴旦后，只有鱼卡、乌素特和冷湖可以补给。<br>绝对不要轻易下路基，陷车就完了。<br>在这里妹子穿红衣对比度高，拍照好看。</p>\n<p>玩到尽兴，然后前往<a href=\"http://www.mafengwo.cn/poi/63203728.html\">水上雅丹</a>。<br><a href=\"https://map.baidu.com/dir/%E4%B8%9C%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96/%E4%B9%8C%E7%B4%A0%E7%89%B9(%E6%B0%B4%E4%B8%8A)%E9%9B%85%E4%B8%B9%E5%9C%B0%E8%B4%A8%E5%85%AC%E5%9B%AD/@10448295.289087452,4494320.175000001,13.7z?querytype=nav&c=11&sn=1$$56f2f696775027830aa8d40c$$10464758.73,4486557.9$$%E4%B8%9C%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96$$0$$$$&en=2$$$$$$%E4%B9%8C%E7%B4%A0%E7%89%B9(%E6%B0%B4%E4%B8%8A)%E9%9B%85%E4%B8%B9%E5%9C%B0%E8%B4%A8%E5%85%AC%E5%9B%AD$$1$$%E6%B5%B7%E8%A5%BF%E8%92%99%E5%8F%A4%E6%97%8F%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E%E6%A0%BC%E5%B0%94%E6%9C%A8%E5%B8%82$$&sc=11&ec=11&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">东台吉乃尔湖和水上雅丹很近</a>，不到30公里，半小时内就能到。<br>水上雅丹要门票，有区间车。</p>\n<p>水上雅丹看腻了去<a href=\"http://www.mafengwo.cn/poi/17342608.html\">西台吉乃尔湖</a>，<a href=\"https://map.baidu.com/dir/%E4%B9%8C%E7%B4%A0%E7%89%B9(%E6%B0%B4%E4%B8%8A)%E9%9B%85%E4%B8%B9%E5%9C%B0%E8%B4%A8%E5%85%AC%E5%9B%AD/%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96/@10413752.673919525,4509980.65,13.11z?querytype=nav&c=65&sn=1$$94b40313d2ebf91b08ccdd78$$10439554.48,4502082.45$$%E4%B9%8C%E7%B4%A0%E7%89%B9(%E6%B0%B4%E4%B8%8A)%E9%9B%85%E4%B8%B9%E5%9C%B0%E8%B4%A8%E5%85%AC%E5%9B%AD$$0$$$$&en=2$$$$$$%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96$$1$$%E6%B5%B7%E8%A5%BF%E8%92%99%E5%8F%A4%E6%97%8F%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E$$&sc=65&ec=65&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">不到40公里</a>，1小时内能到。</p>\n<p><a href=\"https://map.baidu.com/dir/%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96/%E5%86%B7%E6%B9%96%E9%95%87/@10335334.159410646,4561726.970000001,10.07z/index%3D1?querytype=nav&navtp=2&c=65&drag=1&sc=65&ec=65&sy=0&sn=1$$$$10399755.25,4517877.42$$%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96$$$$$$10399755.25,4517877.42$$&en=1$$$$10390695.46,4657805.64$$%E5%86%B7%E6%B9%96%E9%95%87$$$$$$10390695.46,4657805.64$$&version=4&mrs=1&route_traffic=1&da_src=shareurl\">从西台吉乃尔湖去往冷湖镇住宿</a>，冷湖镇很小，住宿条件比较差。天府宾馆有热水，只是水压小。<br>路上途经<a href=\"http://www.mafengwo.cn/poi/34151628.html\">俄博梁</a>，我们不绕进去，那边路太难走。<br>这一路约350公里，5小时。<br>尽量不赶夜路，我们3点前从西台吉乃尔湖出发。</p>\n<p>移动的卡信号较好。</p>\n<p>这一天是整个行程中最挑战的一天，车上近10小时。</p>\n<p>如果挑战不下来，则<a href=\"https://map.baidu.com/dir/%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96/%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87/@10493832.146512667,4511691.405,10.36z?querytype=nav&navtp=2&c=11&drag=1&sc=11&ec=11&sy=0&sn=1$$$$10399754.13,4517880.23$$%E8%A5%BF%E5%8F%B0%E5%90%89%E4%B9%83%E5%B0%94%E6%B9%96$$$$$$10399754.13,4517880.23$$&en=1$$$$10615824.98,4533347.16$$%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87$$$$$$10615824.98,4533347.16$$&version=4&mrs=1&route_traffic=1&da_src=shareurl\">返回大柴旦</a>休息，可以少2小时车程。</p>\n<h2 id=\"Day-5：冷湖-x2F-大柴旦-敦煌（车上350公里，5小时）\"><a href=\"#Day-5：冷湖-x2F-大柴旦-敦煌（车上350公里，5小时）\" class=\"headerlink\" title=\"Day 5：冷湖&#x2F;大柴旦 - 敦煌（车上350公里，5小时）\"></a>Day 5：冷湖&#x2F;大柴旦 - 敦煌（车上350公里，5小时）</h2><p>吃完早饭直接去往<a href=\"http://www.mafengwo.cn/travel-scenic-spot/mafengwo/10240.html\">敦煌</a>，这一天很单纯。<br>从冷湖出发<a href=\"https://map.baidu.com/dir/%E5%86%B7%E6%B9%96%E9%95%87/%E6%95%A6%E7%85%8C%E5%B8%82/@10413620.735082382,4758709.915,10z/index%3D1?querytype=nav&c=11&sn=1$$2da5574c5a8c1813bd4842b4$$10390693.25,4657805.6$$%E5%86%B7%E6%B9%96%E9%95%87$$0$$$$&en=2$$$$$$%E6%95%A6%E7%85%8C%E5%B8%82$$1$$%E9%85%92%E6%B3%89%E5%B8%82%E6%95%A6%E7%85%8C%E5%B8%82$$&sc=11&ec=11&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">车程约280公里</a>，3小时45分钟。<br>从大柴旦出发则<a href=\"https://map.baidu.com/dir/%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87/%E6%95%A6%E7%85%8C%E5%B8%82/@10459827.434771864,4696481.415000001,9.31z/index%3D1?querytype=nav&c=11&sn=1$$57416c8090ad7ae3c27da294$$10615824.98,4533347.16$$%E5%A4%A7%E6%9F%B4%E6%97%A6%E9%95%87$$0$$$$&en=2$$$$$$%E6%95%A6%E7%85%8C%E5%B8%82$$1$$%E9%85%92%E6%B3%89%E5%B8%82%E6%95%A6%E7%85%8C%E5%B8%82$$&sc=11&ec=11&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">约370公里</a>，4个半小时。<br><a href=\"http://www.mafengwo.cn/poi/5434987.html\">莫高窟</a>离市区大约30公里，40分钟左右。<br><a href=\"http://www.mafengwo.cn/poi/10305.html\">鸣沙山月牙泉</a>很近，不到6公里，10来分钟。</p>\n<p>莫高窟、露营帐篷、又见敦煌的演出，这三个都需要提前预定。<br>参观莫高窟<strong>必须预约</strong>，在<a href=\"https://www.mgk.org.cn/\">官网</a>订票，因为疫情原因目前只能预订15天内的票，所以我们要在7月26号预约10号下午的场次。一定要买A套票，也就是最贵的238元全价普通观光票，不要买疫情防控票，少了很多窟。<br>晚上睡在鸣沙山的帐篷里，晚上吃烧烤，点篝火，看银河。</p>\n<p>沙漠露营一般是18点在市区集合点集合，有车接送。<br>价格不同渠道都差不多，228元，比如<a href=\"http://www.mafengwo.cn/sales/5763261.html\">这里</a>。</p>\n<p>又见敦煌的演出当天10号来不及，放在第2天11号。或者不看也行。</p>\n<h2 id=\"Day-6：敦煌-嘉峪关（车上380公里，4个半小时）\"><a href=\"#Day-6：敦煌-嘉峪关（车上380公里，4个半小时）\" class=\"headerlink\" title=\"Day 6：敦煌 - 嘉峪关（车上380公里，4个半小时）\"></a>Day 6：敦煌 - 嘉峪关（车上380公里，4个半小时）</h2><p>上午可以选择去看又见敦煌演出。</p>\n<p>从敦煌出发，到嘉峪关。<a href=\"https://map.baidu.com/dir/%E6%95%A6%E7%85%8C%E5%B8%82/%E6%82%AC%E5%A3%81%E9%95%BF%E5%9F%8E/@10677576.96318927,4903607.645,9.79z?querytype=nav&c=179&sn=2$$$$$$%E6%95%A6%E7%85%8C$$0$$$$&en=2$$$$$$%E6%82%AC%E5%A3%81%E9%95%BF%E5%9F%8E$$1$$%E5%98%89%E5%B3%AA%E5%85%B3%E5%B8%82$$&sc=179&ec=179&pn=0&rn=5&mrs=1&version=4&route_traffic=1&sy=0&da_src=shareurl\">约380公里</a>，4个半小时。</p>\n<p>嘉峪关的<a href=\"https://www.mafengwo.cn/poi/5810769.html\">悬壁长城</a>几乎也是必看景点。</p>\n<p>玩完如果有有时间可以去<a href=\"http://www.mafengwo.cn/poi/9010095.html\">嘉峪关方特欢乐世界</a>，据说人很少，可以畅快玩。太晚了就放在第二天。</p>\n<h2 id=\"Day-7-嘉峪关-张掖（车上310公里，4小时10分钟）\"><a href=\"#Day-7-嘉峪关-张掖（车上310公里，4小时10分钟）\" class=\"headerlink\" title=\"Day 7: 嘉峪关 - 张掖（车上310公里，4小时10分钟）\"></a>Day 7: 嘉峪关 - <a href=\"https://www.mafengwo.cn/travel-scenic-spot/mafengwo/11340.html\">张掖</a>（车上310公里，4小时10分钟）</h2><p>玩完游乐场后，从嘉峪关到张掖约230公里，2个半小时。</p>\n<p>游玩七彩丹霞。七彩丹霞景区到市区约40公里，50分钟。</p>\n<h2 id=\"Day-8：张掖-扁都口-门源\"><a href=\"#Day-8：张掖-扁都口-门源\" class=\"headerlink\" title=\"Day 8：张掖 - 扁都口 - 门源\"></a>Day 8：张掖 - <a href=\"https://www.mafengwo.cn/poi/5810799.html\">扁都口</a> - 门源</h2><p>门源的<a href=\"http://www.mafengwo.cn/poi/70044868.html\">达坂山观景台</a>。</p>\n<h2 id=\"Day-9：门源-兰州-杭州（车程250公里，3个小时）\"><a href=\"#Day-9：门源-兰州-杭州（车程250公里，3个小时）\" class=\"headerlink\" title=\"Day 9：门源 - 兰州 - 杭州（车程250公里，3个小时）\"></a>Day 9：门源 - 兰州 - 杭州（车程250公里，3个小时）</h2><p>吃完早饭直接去往兰州中川机场附近，比如秦王川湿地公园，250公里，3个小时。<br>就不进市区了，兰州机场离市区还有点距离。</p>\n<p>12点半就差不多要去机场。3点的飞机，最好提前2个小时到，加油，还车，上飞机，结束行程。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"基础装备\"><a href=\"#基础装备\" class=\"headerlink\" title=\"基础装备\"></a>基础装备</h3><ul>\n<li>背包</li>\n<li>冲锋衣&#x2F;薄外套</li>\n</ul>\n<h3 id=\"防晒\"><a href=\"#防晒\" class=\"headerlink\" title=\"防晒\"></a>防晒</h3><ul>\n<li>防晒霜</li>\n<li>户外头巾</li>\n<li>防晒衣&#x2F;防晒手臂袜套</li>\n<li>墨镜</li>\n</ul>\n<h3 id=\"沙漠专用装备\"><a href=\"#沙漠专用装备\" class=\"headerlink\" title=\"沙漠专用装备\"></a>沙漠专用装备</h3><h4 id=\"拍照\"><a href=\"#拍照\" class=\"headerlink\" title=\"拍照\"></a>拍照</h4><ul>\n<li>长一点的丝巾</li>\n<li>鲜艳颜色的裙子</li>\n</ul>\n<h4 id=\"防沙\"><a href=\"#防沙\" class=\"headerlink\" title=\"防沙\"></a>防沙</h4><ul>\n<li>手机防尘套</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["travel"]},{"title":"路由器漫谈之测试工具","url":"/blog/2020/09/29/rambling-network-router/","content":"<h2 id=\"网络测试工具\"><a href=\"#网络测试工具\" class=\"headerlink\" title=\"网络测试工具\"></a>网络测试工具</h2><p>基本可分为三类：WiFi分析，稳定性测试，性能测试。</p>\n<p><strong>WiFi分析</strong></p>\n<p><a href=\"https://www.acrylicwifi.com/en/\">acrylicwifi</a>当仁不让的成为WIN上的最佳选择。同样有免费和付费版，我们可以使用免费的<a href=\"https://www.acrylicwifi.com/en/downloads-free-license-wifi-wireless-network-software-tools/download-wifi-scanner-windows/\">家庭版</a>，也可以试用<code>sniffer版本</code>。</p>\n<p><strong>稳定性测试</strong></p>\n<p>长时间的ping，最终看延迟和丢包报告。</p>\n<p><a href=\"https://emcosoftware.com/ping-monitor/download\">Ping Monitor</a>有免费和付费版，免费版就够用啦。</p>\n<p><strong>性能测试</strong></p>\n<p>性能测试有很多工具，windows上可以用<a href=\"https://mikrotik.com/download\">mikrotik的Bandwidth Test工具</a>。mikrotik自家出产高端路由器，工具不说好用怎么也是专业的。</p>\n<p>注意性能测试需要两台电脑和一台路由器。两台电脑通过路由器组成局域网，然后分别运行客户端和服务端进行带宽测试。</p>\n<p><strong>综合工具</strong></p>\n<p>最后还有一款综合工具推荐：<a href=\"https://www.keysight.com/hk/en/products/network-test/performance-monitoring/ixchariot.html\">大名鼎鼎的IxChariot</a>，可惜是收费软件，仅可以试用。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"在postgresql中生成测试数据","url":"/blog/2023/03/17/random-test-data-in-postgresql/","content":"<h2 id=\"内建函数\"><a href=\"#内建函数\" class=\"headerlink\" title=\"内建函数\"></a>内建函数</h2><p>首先我们需要一些内建函数来产生不会重复的数据。</p>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random\"></a>random</h3><p>第一个进入我们视野的应该就是<a href=\"https://www.postgresql.org/docs/current/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE\">random()</a>函数了。</p>\n<p>random()函数会返回一个<code>[0, 1)</code>的高精度随机数，我们可以用这个随机数来生成各种类型的数据。</p>\n<p>整数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 大于等于0，小于100的整数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> (random() <span class=\"operator\">*</span> <span class=\"number\">100</span>)::<span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 16</span></span><br></pre></td></tr></table></figure>\n\n<p>小数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> (random() <span class=\"operator\">*</span> <span class=\"number\">100.</span>)::<span class=\"type\">numeric</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 56.31</span></span><br></pre></td></tr></table></figure>\n\n<p>字符</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> chr(int4(random() <span class=\"operator\">*</span> <span class=\"number\">26</span>) <span class=\"operator\">+</span> <span class=\"number\">65</span>);</span><br><span class=\"line\"><span class=\"comment\">-- E</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 直接转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">&#x27;id-&#x27;</span> <span class=\"operator\">||</span> random()::text;</span><br><span class=\"line\"><span class=\"comment\">-- id-0.529535423895549</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4位字母字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> repeat(chr(int4(random() <span class=\"operator\">*</span> <span class=\"number\">26</span>) <span class=\"operator\">+</span> <span class=\"number\">65</span>), <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">-- SSSS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用md5转成32位字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> md5(random()::text);</span><br><span class=\"line\"><span class=\"comment\">-- 508f0bdea8e3260b72f43db9e2477b0d</span></span><br></pre></td></tr></table></figure>\n\n<p>日期</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> to_timestamp(<span class=\"built_in\">EXTRACT</span>(EPOCH <span class=\"keyword\">FROM</span> now()) <span class=\"operator\">+</span> random() <span class=\"operator\">*</span> <span class=\"number\">24</span> <span class=\"operator\">*</span> <span class=\"number\">60</span> <span class=\"operator\">*</span> <span class=\"number\">60</span>) <span class=\"keyword\">at</span> <span class=\"type\">time</span> zone <span class=\"string\">&#x27;CCT&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 2023-03-17 22:07:12.593732</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CURRENT_DATE</span> <span class=\"operator\">-</span> (random() <span class=\"operator\">*</span> <span class=\"number\">365</span>)::<span class=\"type\">int</span> <span class=\"operator\">*</span> <span class=\"type\">INTERVAL</span> <span class=\"string\">&#x27;1 DAY&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 2022-05-30 00:00:00</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h3><p>可以使用<a href=\"https://www.postgresql.org/docs/current/pgcrypto.html\">pgcrypto</a>模块中的<a href=\"https://www.postgresql.org/docs/current/pgcrypto.html#id-1.11.7.37.11\">gen_random_uuid()</a>函数来生成一个version4的uuid。</p>\n<p>而在Postgresql 13之后，不需要引入pgcrypto，可以直接使用<a href=\"https://www.postgresql.org/docs/current/functions-uuid.html\">gen_random_uuid()</a>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 启用pgcrypto</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> EXTENSION IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> pgcrypto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> gen_random_uuid();</span><br><span class=\"line\"><span class=\"comment\">-- d4618c5d-9b00-4856-bbab-35e266dcb80b</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成序列\"><a href=\"#生成序列\" class=\"headerlink\" title=\"生成序列\"></a>生成序列</h3><p><a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">generate_series</a>函数可以用来生成序列。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> generate_series(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 1</span></span><br><span class=\"line\"><span class=\"comment\">-- 3</span></span><br><span class=\"line\"><span class=\"comment\">-- 5</span></span><br><span class=\"line\"><span class=\"comment\">-- 7</span></span><br><span class=\"line\"><span class=\"comment\">-- 9</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><p>有了上面这些内建函数，我们就可以很方便的插入测试数据了。</p>\n<p>先创建一个测试表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> user_for_test(</span><br><span class=\"line\">  username text <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  passmd5 text, </span><br><span class=\"line\">  display_name text <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_for_test;</span><br></pre></td></tr></table></figure>\n\n<p>使用generate_series播入数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_for_test(</span><br><span class=\"line\">  username,</span><br><span class=\"line\">  passmd5,</span><br><span class=\"line\">  display_name</span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  <span class=\"string\">&#x27;username-&#x27;</span> <span class=\"operator\">||</span> <span class=\"built_in\">substring</span>(md5(random()::text), <span class=\"number\">0</span>, <span class=\"number\">4</span>) <span class=\"operator\">||</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"operator\">||</span> i,</span><br><span class=\"line\">  md5(random()::text),</span><br><span class=\"line\">  <span class=\"string\">&#x27;user_&#x27;</span> <span class=\"operator\">||</span> <span class=\"built_in\">substring</span>(md5(random()::text), <span class=\"number\">0</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> generate_series(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"keyword\">AS</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_for_test;</span><br></pre></td></tr></table></figure>\n\n<p>如果是简单的表，也可以直接用VALUES。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_for_test(</span><br><span class=\"line\">  username,</span><br><span class=\"line\">  passmd5,</span><br><span class=\"line\">  display_name</span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;username-&#x27;</span> <span class=\"operator\">||</span> generate_series(<span class=\"number\">1</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">  md5(random()::text),</span><br><span class=\"line\">  <span class=\"string\">&#x27;user_&#x27;</span> <span class=\"operator\">||</span> generate_series(<span class=\"number\">8</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_for_test;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["sql"]},{"title":"宽客书单","url":"/blog/2023/01/13/reading-list-for-quants/","content":"<h2 id=\"通用读物\"><a href=\"#通用读物\" class=\"headerlink\" title=\"通用读物\"></a>通用读物</h2><ul>\n<li><p><a href=\"https://book.douban.com/author/122550/\">迈克尔·刘易斯</a>大名鼎鼎的<a href=\"https://book.douban.com/works/1017120\">《大空头》</a></p>\n</li>\n<li><p>同样是<a href=\"https://book.douban.com/author/122550/\">迈克尔·刘易斯</a>的<a href=\"https://book.douban.com/works/1016090\">《说谎者的扑克牌》</a></p>\n</li>\n<li><p><a href=\"https://book.douban.com/author/4568549/\">罗杰·洛温斯坦</a>的<a href=\"https://book.douban.com/works/1010671\">《When Genius Failed》</a><br>这本书有很多个译本：孟立慧译的<a href=\"https://book.douban.com/subject/1289999/\">《营救华尔街》</a>、毕崇毅译的<a href=\"https://book.douban.com/subject/26951812/\">《赌金者》</a>、張文毅的<a href=\"https://book.douban.com/subject/6519208/\">《天才殞落》</a>，其中孟立慧的译本最流行。</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Sebastian_Mallaby\">塞巴斯蒂安·马拉比</a>的<a href=\"https://book.douban.com/works/1019265\">《富可敌国》</a></p>\n</li>\n<li><p><a href=\"https://book.douban.com/author/1042718/\">德曼</a>的<a href=\"https://book.douban.com/works/1007170\">宽客人生</a><br>通常认为这本好过《How I Became a Quant: Insights from 25 of Wall Street’s Elite》了。顺带一提，<a href=\"\">《如何成为金融奇才》</a>的翻译远远差于台湾寰宇的<a href=\"https://www.books.com.tw/products/0010416426\">《我如何成為華爾街計量金融家》</a>。如果英文阅读有困难，有时可以选择繁体译本。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/author/508649/\">斯科特·帕特森</a>的<a href=\"https://book.douban.com/works/1023826\">《宽客》</a></p>\n</li>\n</ul>\n<h2 id=\"金融基础知识\"><a href=\"#金融基础知识\" class=\"headerlink\" title=\"金融基础知识\"></a>金融基础知识</h2><ul>\n<li><p><a href=\"https://book.douban.com/author/4505121/\">约翰·赫尔</a>的<a href=\"https://book.douban.com/works/1024890\">《期权、期货及其它衍生品》</a><br>此书是金融专业全球范围内最主流的教材，讲的是一些基础但核心的衍生品知识和模型。</p>\n</li>\n<li><p><a href=\"https://book.douban.com/author/649851/\">罗斯</a>的<a href=\"https://book.douban.com/works/1022991\">《公司理财》</a><br>本书通常是金融类专业学生的第一本入门教材，比《金融学》&#x2F;《投资学》还要更通用。<br>作者<a href=\"https://en.wikipedia.org/wiki/Stephen_Ross_(economist)\">罗斯教授</a>，是<a href=\"https://en.wikipedia.org/wiki/Arbitrage_pricing_theory\">套利定价理论</a>和<a href=\"https://en.wikipedia.org/wiki/Binomial_options_pricing_model\">Cox-Ross-Rubinstein二项式期权定价模型</a>的提出者之一。</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Zvi_Bodie\">博迪</a>和<a href=\"https://en.wikipedia.org/wiki/Robert_C._Merton\">莫顿</a>的<a href=\"https://book.douban.com/works/1023488\">《金融学》</a><br>此书的架构比较像国内的金融学教材了，从基本的资产的时间价值&#x2F;货币利率开始讲起，讲到估值、资产定价、公司金融等等，涉及的都是金融专业比较中心且基础的知识。</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Zvi_Bodie\">博迪</a>的<a href=\"https://book.douban.com/works/1039045\">《投资学》</a><br>从买方（公司）的角度，去介绍金融产品（证券&#x2F;衍生品）&#x2F;资本市场&#x2F;风险管理等基础的金融知识。<br>和《公司理财》有部分重叠——公司理财讲企业的投、融资，此书偏重投资。</p>\n</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["quant"]},{"title":"真人化lofi girl练手","url":"/blog/2023/03/01/realistify-lofi-girl/","content":"<p><a href=\"https://lofigirl.com/\">lofi girl</a>是一个法国的<a href=\"https://www.youtube.com/channel/UCSJ4gkVC6NrvII8umztf0Ow\">油管频道</a>，我们拿它的<a href=\"https://www.uhdpaper.com/2020/08/lofi-girl-studying-hip-hop-radio.html\">封面图片</a>练手。参考了<a href=\"https://www.reddit.com/r/StableDiffusion/comments/11ef0zx/realistic_lofi_girl_v3/\">reddit上的一个帖子</a>。</p>\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-ori.jpg\" class=\"\" title=\"原图\">\n\n<h2 id=\"1-img2img\"><a href=\"#1-img2img\" class=\"headerlink\" title=\"1. img2img\"></a>1. img2img</h2><p>第一步先直接img2img</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Studying girl, best quality, ultra high res, (photorealistic:1.4), stack of books and brown flower pot on table, brown cat on white window ledge</span><br><span class=\"line\"></span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\"></span><br><span class=\"line\">Steps: 28, Sampler: DPM++ SDE Karras, CFG scale: 8, Seed: 3242059520, Size: 1024x564, Model hash: fc2511737a, Model: chilloutmix_NiPrunedFp32Fix, Denoising strength: 0.38, Mask blur: 4</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step1.png\" class=\"\" title=\"第一步\">\n\n<h2 id=\"2-重绘小猫\"><a href=\"#2-重绘小猫\" class=\"headerlink\" title=\"2. 重绘小猫\"></a>2. 重绘小猫</h2><p>Send to inpaint, 涂图小猫</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">best quality, ultra high res, (photorealistic:1.4), back of a sleeping brown cat</span><br><span class=\"line\"></span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\"></span><br><span class=\"line\">Steps: 28, Sampler: DPM++ SDE Karras, CFG scale: 8, Seed: 2007546370, Size: 1024x560, Model hash: fc2511737a, Model: chilloutmix_NiPrunedFp32Fix, Denoising strength: 0.38, Mask blur: 4</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step2.png\" class=\"\" title=\"重绘小猫\">\n\n<h2 id=\"3-重绘手指\"><a href=\"#3-重绘手指\" class=\"headerlink\" title=\"3. 重绘手指\"></a>3. 重绘手指</h2><p>Send to inpaint，使用control net(candy)重绘手指部分，使用原图作为control net输入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Studying girl, best quality, ultra high res, (photorealistic:1.4), stack of books and brown flower pot on table, brown cat on white window ledge</span><br><span class=\"line\"></span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\"></span><br><span class=\"line\">Steps: 28, Sampler: DPM++ SDE Karras, CFG scale: 8, Seed: 2851621146, Size: 1024x560, Model hash: fc2511737a, Model: chilloutmix_NiPrunedFp32Fix, Denoising strength: 0.38, Mask blur: 4, ControlNet Enabled: True, ControlNet Module: canny, ControlNet Model: control_sd15_canny [fef5e48e], ControlNet Weight: 1, ControlNet Guidance Strength: 1</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step3.png\" class=\"\" title=\"重绘手指\">\n\n<h2 id=\"4-优化细节\"><a href=\"#4-优化细节\" class=\"headerlink\" title=\"4. 优化细节\"></a>4. 优化细节</h2><p>Send to img2img，使用原图作为control net的输入，使用depth_leres算法优化细节。</p>\n<p>这次需要使用较高的步数40，以及较低的去噪强度0.2。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Studying girl, best quality, ultra high res, (photorealistic:1.4), stack of books and brown flower pot on table, brown cat on white window ledge</span><br><span class=\"line\"></span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\"></span><br><span class=\"line\">Steps: 40, Sampler: Euler a, CFG scale: 7, Seed: 3439776951, Size: 1024x560, Model hash: fc2511737a, Model: chilloutmix_NiPrunedFp32Fix, Denoising strength: 0.2, Mask blur: 4, ControlNet Enabled: True, ControlNet Module: depth_leres, ControlNet Model: control_depth-fp16 [400750f6], ControlNet Weight: 1, ControlNet Guidance Strength: 1</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step4.png\" class=\"\" title=\"优化细节\">\n\n<h2 id=\"5-灯光\"><a href=\"#5-灯光\" class=\"headerlink\" title=\"5. 灯光\"></a>5. 灯光</h2><p>我们使用<a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#color-sketch\">inpaint sketch</a>在袖子上画一些黄色来模拟灯光，只需要画高亮部分，保留一部分袖子原本的颜色。</p>\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/inpaint-sketch.png\" class=\"\" title=\"inpaint sketch\">\n\n<p>继续使用原图作为control net输入，使用depth_leres算法来控制阴影。把步数设得高一些(60)，去躁强度不要太高（0.6），让颜色慢慢Difussion（扩散）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Studying girl, best quality, ultra high res, (photorealistic:1.4), stack of books and brown flower pot on table, brown cat on white window ledge</span><br><span class=\"line\"></span><br><span class=\"line\">Negative prompt: paintings, sketches, (worst quality:2), (low quality:2), (normal quality:2), lowres, normal quality, ((monochrome)), ((grayscale)), skin spots, acnes, skin blemishes, age spot, glans</span><br><span class=\"line\"></span><br><span class=\"line\">Steps: 60, Sampler: Euler a, CFG scale: 8, Seed: 3524037322, Size: 1024x560, Model hash: fc2511737a, Model: chilloutmix_NiPrunedFp32Fix, Denoising strength: 0.6, Mask blur: 4, ControlNet Enabled: True, ControlNet Module: depth_leres, ControlNet Model: control_depth-fp16 [400750f6], ControlNet Weight: 1, ControlNet Guidance Strength: 1</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step5.png\" class=\"\" title=\"打光\">\n\n<h3 id=\"使用灯光蒙板\"><a href=\"#使用灯光蒙板\" class=\"headerlink\" title=\"使用灯光蒙板\"></a>使用灯光蒙板</h3><p>在上面的打光我们是不希望改动画面，只希望增加灯光。</p>\n<p>但如果是在直接生成时，可以<a href=\"https://www.youtube.com/watch?v=_xHC3bT5GBU\">使用灯光蒙板来控制灯光</a>。</p>\n<p>使用img2img，主体为一张灯光蒙板，control net使用lofi girl原图的depth。</p>\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/light-mask.png\" class=\"\" title=\"灯光蒙板\">\n\n<p>效果会是这样：</p>\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-with-light.png\" class=\"\" title=\"带灯光的lofi girl\">\n\n<h2 id=\"6-再次优化细节\"><a href=\"#6-再次优化细节\" class=\"headerlink\" title=\"6. 再次优化细节\"></a>6. 再次优化细节</h2><p>模拟完灯光后，高亮边缘会有一些毛糙，需要再次优化。我们完全按照优化的参数，再来一次。</p>\n<img src=\"/blog/2023/03/01/realistify-lofi-girl/lofi-girl-step6.png\" class=\"\" title=\"再次优化\">\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"在windows上安装redis","url":"/blog/2021/05/31/redis-on-windows/","content":"<p>redis是个<a href=\"https://github.com/redis/redis\">开源项目</a>，它在<a href=\"https://redis.io/download\">主页</a>上提供了从源码编译的安装方法。</p>\n<h1 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h1><p>如果是在windows上使用redis，有以下几种安装方法：</p>\n<h2 id=\"微软官方移植版\"><a href=\"#微软官方移植版\" class=\"headerlink\" title=\"微软官方移植版\"></a><a href=\"https://github.com/microsoftarchive/redis\">微软官方移植版</a></h2><p>这个项目很老了，最新支持的redis版本才到3.0.504，并且项目也在2年前就停止维护了，不建议使用这个。</p>\n<h2 id=\"社区移植版\"><a href=\"#社区移植版\" class=\"headerlink\" title=\"社区移植版\"></a><a href=\"https://github.com/tporadowski/redis\">社区移植版</a></h2><p>在微软官方放弃后，社区接过了移植的重担，目前支持到了redis 5.0.10。</p>\n<p>如果想1分钟内搞定，可以直接使用这个版本。</p>\n<h2 id=\"Memurai\"><a href=\"#Memurai\" class=\"headerlink\" title=\"Memurai\"></a><a href=\"https://www.memurai.com/\">Memurai</a></h2><p>Memurai是一个兼容redis的内存数据库，安装很友好简单。</p>\n<p>但如果你把它用到发布环境，那你一定会遇上某天它的服务突然中止的问题。</p>\n<p>原因出在<a href=\"https://www.memurai.com/faq#what-are-the-limitations-of-the-developer-edition?\">这里</a>。</p>\n<p>它终归是个商业软件，要卖钱的。开发版会每10天自动停止服务。</p>\n<h2 id=\"WSL\"><a href=\"#WSL\" class=\"headerlink\" title=\"WSL\"></a><a href=\"https://redislabs.com/blog/redis-on-windows-10/\">WSL</a></h2><p><a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\">安装Windows Subsystem Linux</a>很简单，照着微软文档撸下来就行了。</p>\n<p>注意<a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-on-server\">在Windows Server下的安装方法</a>与win10不一样。</p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a><a href=\"https://hub.docker.com/_/redis\">docker</a></h2><p>docker在部署方面是真神器，对docker的<a href=\"https://docs.docker.com/docker-for-windows/install/\">安装</a>就不在这里介绍下，只介绍如何在docker下安装redis。</p>\n<p>首先是拉取镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<p>然后使用redis的镜像运行起一个容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name redis -d -p 127.0.0.1:6379:6379/tcp redis </span><br></pre></td></tr></table></figure>\n\n<p><strong>安装完成</strong></p>\n<p>还差最后一步，把redis加入自启动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker update --restart unless-stopped redis</span><br></pre></td></tr></table></figure>\n\n<p><strong>阿里云ECS Windows Server版请注意</strong></p>\n<p>阿里云ECS的Windows Server是无法开启Hyper-V的，也就无法使用Linux containers，只能使用Windows containers。</p>\n<p>但redis镜像只支持Linux containers，所以…… 等阿里云更新解决方案吧。</p>\n<h3 id=\"redis-cli\"><a href=\"#redis-cli\" class=\"headerlink\" title=\"redis-cli\"></a>redis-cli</h3><p>如果想使用redis-cli，可以直接用容器里的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure>\n\n<p>写一个批处理<code>redis-cli.bat</code>放在<code>%PATH%</code>下面，可以避免每次都输入这一大堆。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis redis-cli %*</span><br></pre></td></tr></table></figure>\n\n<p>如果不想从容器里运行想用本地的，那可以使用npm上的<a href=\"https://github.com/lujiajing1126/redis-cli\">redis-cli</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g redis-cli</span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br><span class=\"line\">$ rdcli</span><br><span class=\"line\">// <span class=\"built_in\">which</span> is default connect to 127.0.0.1:6379</span><br><span class=\"line\">$ rdcli -h 10.4.23.235</span><br><span class=\"line\">// <span class=\"built_in\">which</span> will connect to 10.4.23.235</span><br><span class=\"line\">$ rdcli -c</span><br><span class=\"line\">// works <span class=\"keyword\">in</span> cluster mode, <span class=\"built_in\">which</span> will follow cluster redirection</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker","redis"]},{"title":"Redis Stream","url":"/blog/2023/04/13/redis-stream/","content":"<p>Redis支持<a href=\"https://redis.io/docs/manual/pubsub/\">Pub&#x2F;Sub</a>，但如果发布消息时订阅者没上线，那信息就会丢失。Redis在5.0中引入了<a href=\"https://redis.io/docs/data-types/streams/\">Stream</a>，提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</p>\n<p>Stream在Redis中是一种数据结构，可以简单的理解为一个消息链表。</p>\n<h2 id=\"消息-Entry\"><a href=\"#消息-Entry\" class=\"headerlink\" title=\"消息(Entry)\"></a>消息(Entry)</h2><p>每条消息除了内容外，都有一个唯一的ID。格式为<code>&#123;Unix毫秒时间戳&#125;-&#123;序号&#125;</code>，比如<code>1681365707499-0</code>。</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>使用<a href=\"https://redis.io/commands/xadd/\">XADD</a>命令向Stream追加一条消息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XADD persons * name Jim surname Green</span><br><span class=\"line\">&quot;1681365707499-0&quot;</span><br></pre></td></tr></table></figure>\n<p><code>*</code>代表用户不指定，由redis来生成ID。</p>\n<p>如果目标Stream不存在，会创建一个新的Stream。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; KEYS *</span><br><span class=\"line\"> 1) &quot;persons&quot;</span><br><span class=\"line\">redis&gt; TYPE persons</span><br><span class=\"line\">stream</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h3><p>使用<a href=\"https://redis.io/commands/xread/\">XREAD</a>来读取消息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XREAD STREAMS persons 0</span><br><span class=\"line\">1) 1) &quot;persons&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681365707499-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Jim&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;Green&quot;</span><br></pre></td></tr></table></figure>\n<p>XREAD可以指定返回的消息条数，以及消息起始ID。<br>再添加三条数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XADD persons * name Geoffrey surname Hinton</span><br><span class=\"line\">&quot;1681365756516-0&quot;</span><br><span class=\"line\">redis&gt; XADD persons * name Yann surname LeCun</span><br><span class=\"line\">&quot;1681365759975-0&quot;</span><br><span class=\"line\">redis&gt; XADD persons * name Andrew surname Ng</span><br><span class=\"line\">&quot;1681365768735-0&quot;</span><br></pre></td></tr></table></figure>\n<p>然后可以这样读取：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XREAD COUNT 2 STREAMS persons 1681365707499-0</span><br><span class=\"line\">1) 1) &quot;persons&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681365756516-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Geoffrey&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;Hinton&quot;</span><br><span class=\"line\">      2) 1) &quot;1681365759975-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Yann&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;LeCun&quot;</span><br></pre></td></tr></table></figure>\n<p><code>COUNT 2</code>代表最多返回2条消息，最后的<code>1681365707499-0</code>代表从这条消息后（不含这条消息）开始读取。</p>\n<p>除了<code>XREAD</code>外，还有<a href=\"https://redis.io/commands/xrange/\">XRANGE</a>和<a href=\"https://redis.io/commands/xrevrange/\">XREVRANGE</a>可以读取消息。</p>\n<h3 id=\"查看Stream信息\"><a href=\"#查看Stream信息\" class=\"headerlink\" title=\"查看Stream信息\"></a>查看Stream信息</h3><p>创建后可使用<a href=\"https://redis.io/commands/xinfo-stream/\">XINFO STREAM</a>查看Stream的信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XINFO STREAM persons</span><br><span class=\"line\"> 1) &quot;length&quot;</span><br><span class=\"line\"> 2) (integer) 4</span><br><span class=\"line\"> 3) &quot;radix-tree-keys&quot;</span><br><span class=\"line\"> 4) (integer) 1</span><br><span class=\"line\"> 5) &quot;radix-tree-nodes&quot;</span><br><span class=\"line\"> 6) (integer) 2</span><br><span class=\"line\"> 7) &quot;last-generated-id&quot;</span><br><span class=\"line\"> 8) &quot;1681365768735-0&quot;</span><br><span class=\"line\"> 9) &quot;groups&quot;</span><br><span class=\"line\">10) (integer) 0</span><br><span class=\"line\">11) &quot;first-entry&quot;</span><br><span class=\"line\">12) 1) &quot;1681365707499-0&quot;</span><br><span class=\"line\">    2) 1) &quot;name&quot;</span><br><span class=\"line\">       2) &quot;Jim&quot;</span><br><span class=\"line\">       3) &quot;surname&quot;</span><br><span class=\"line\">       4) &quot;Green&quot;</span><br><span class=\"line\">13) &quot;last-entry&quot;</span><br><span class=\"line\">14) 1) &quot;1681365768735-0&quot;</span><br><span class=\"line\">    2) 1) &quot;name&quot;</span><br><span class=\"line\">       2) &quot;Andrew&quot;</span><br><span class=\"line\">       3) &quot;surname&quot;</span><br><span class=\"line\">       4) &quot;Ng&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消息修剪\"><a href=\"#消息修剪\" class=\"headerlink\" title=\"消息修剪\"></a>消息修剪</h3><p>如果堆积的消息过多，会造成内存浪费，我们有两种方式来修剪。</p>\n<ol>\n<li>在添加时指定最大消息条数</li>\n</ol>\n<p>先添加一些测试数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XADD tempstream * message &quot;hello, 1&quot;</span><br><span class=\"line\">&quot;1681369081881-0&quot;</span><br><span class=\"line\">redis&gt; XADD tempstream * message &quot;hello, 2&quot;</span><br><span class=\"line\">&quot;1681369084603-0&quot;</span><br><span class=\"line\">redis&gt; XADD tempstream * message &quot;hello, 3&quot;</span><br><span class=\"line\">&quot;1681369086480-0&quot;</span><br><span class=\"line\">redis&gt; XLEN tempstream</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure>\n\n<p>在添加时指定最大消息条数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XADD tempstream MAXLEN 3 * message &quot;hello, 4&quot;</span><br><span class=\"line\">&quot;1681369112438-0&quot;</span><br><span class=\"line\">redis&gt; XREAD STREAMS tempstream 0</span><br><span class=\"line\">1) 1) &quot;tempstream&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681369084603-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 2&quot;</span><br><span class=\"line\">      2) 1) &quot;1681369086480-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 3&quot;</span><br><span class=\"line\">      3) 1) &quot;1681369112438-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 4&quot;</span><br></pre></td></tr></table></figure>\n<p>因为指定了最多保留3条消息，所以最老的第1条消息被修剪。</p>\n<ol start=\"2\">\n<li>使用<a href=\"https://redis.io/commands/xtrim/\">XTRIM</a>修剪</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XADD tempstream * message &quot;hello, 5&quot;</span><br><span class=\"line\">&quot;1681369225281-0&quot;</span><br><span class=\"line\">redis&gt; XLEN tempstream</span><br><span class=\"line\">(integer) 4</span><br><span class=\"line\">redis&gt; XTRIM tempstream MINID 1681369086480</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis&gt; XREAD STREAMS tempstream 0</span><br><span class=\"line\">1) 1) &quot;tempstream&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681369086480-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 3&quot;</span><br><span class=\"line\">      2) 1) &quot;1681369112438-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 4&quot;</span><br><span class=\"line\">      3) 1) &quot;1681369225281-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 5&quot;</span><br></pre></td></tr></table></figure>\n<p>指定了<code>MINID</code>后，在这条消息之前的消息全部会被修剪。</p>\n<p>同时，<code>XTRIM</code>也可以使用<code>MAXLEN</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XTRIM tempstream MAXLEN ~ 2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis&gt; XREAD STREAMS tempstream 0</span><br><span class=\"line\">1) 1) &quot;tempstream&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681369086480-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 3&quot;</span><br><span class=\"line\">      2) 1) &quot;1681369112438-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 4&quot;</span><br><span class=\"line\">      3) 1) &quot;1681369225281-0&quot;</span><br><span class=\"line\">         2) 1) &quot;message&quot;</span><br><span class=\"line\">            2) &quot;hello, 5&quot;</span><br></pre></td></tr></table></figure>\n<p>注意那个<code>~</code>号，它会采用更高效的算法来决定修剪多少条，在这里它觉得当前条数已经足够少决定不执行修剪。</p>\n<h2 id=\"消费者-Consumer-与消费者组-Consumer-Group\"><a href=\"#消费者-Consumer-与消费者组-Consumer-Group\" class=\"headerlink\" title=\"消费者(Consumer)与消费者组(Consumer Group)\"></a>消费者(Consumer)与消费者组(Consumer Group)</h2><p>消费者组主要包含一个<code>last_delivered_id</code>，记录了最后一次成功消费的消息ID，用于跟踪消费者组在流中的进度。</p>\n<h3 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>消费者组可使用<a href=\"https://redis.io/commands/xgroup-create/\">XGROUP CREATE</a>命令创建。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XGROUP CREATE persons mygroup 0</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>可以使用<a href=\"https://redis.io/commands/xinfo-groups/\">XINFO GROUPS</a>查看Stream下的消费者组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XINFO GROUPS persons</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;mygroup&quot;</span><br><span class=\"line\">   3) &quot;consumers&quot;</span><br><span class=\"line\">   4) (integer) 0</span><br><span class=\"line\">   5) &quot;pending&quot;</span><br><span class=\"line\">   6) (integer) 0</span><br><span class=\"line\">   7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">   8) &quot;0-0&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在创建消费者组时可以指定<code>last-delivered-id</code>，当然也可以创建完再使用<a href=\"https://redis.io/commands/xgroup-setid/\">XGROUP SETID</a>修改，效果一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XGROUP CREATE persons tempgroup 1681365756516-0</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis&gt; XINFO GROUPS persons</span><br><span class=\"line\">1) ...</span><br><span class=\"line\">2) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;tempgroup&quot;</span><br><span class=\"line\">   3) &quot;consumers&quot;</span><br><span class=\"line\">   4) (integer) 0</span><br><span class=\"line\">   5) &quot;pending&quot;</span><br><span class=\"line\">   6) (integer) 0</span><br><span class=\"line\">   7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">   8) &quot;1681365756516-0&quot;</span><br><span class=\"line\">redis&gt; XGROUP SETID persons tempgroup 1681365759975-0</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis&gt; XINFO GROUPS persons</span><br><span class=\"line\">1) ...</span><br><span class=\"line\">2) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;tempgroup&quot;</span><br><span class=\"line\">   3) &quot;consumers&quot;</span><br><span class=\"line\">   4) (integer) 0</span><br><span class=\"line\">   5) &quot;pending&quot;</span><br><span class=\"line\">   6) (integer) 0</span><br><span class=\"line\">   7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">   8) &quot;1681365759975-0&quot;</span><br><span class=\"line\">redis&gt; XGROUP DESTROY persons tempgroup</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过消费者读取消息\"><a href=\"#通过消费者读取消息\" class=\"headerlink\" title=\"通过消费者读取消息\"></a>通过消费者读取消息</h3><p>通过消费者组来读取消息需要改用<a href=\"https://redis.io/commands/xreadgroup/\">XREADGROUP</a>命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XREADGROUP GROUP mygroup myconsumer COUNT 2 STREAMS persons &gt;</span><br><span class=\"line\">1) 1) &quot;persons&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681365707499-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Jim&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;Green&quot;</span><br><span class=\"line\">      2) 1) &quot;1681365756516-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Geoffrey&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;Hinton&quot;</span><br></pre></td></tr></table></figure>\n<p>在这里我们使用了消费者<code>myconsumer</code>，<code>XREADGROUP</code>必须指定消费者组以及消费者。如果消费者不存在则会创建。<br>在读取完2条消息后，<code>mygroup</code>的<code>last-delivered-id</code>发生了变化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XINFO GROUPS persons</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;mygroup&quot;</span><br><span class=\"line\">   3) &quot;consumers&quot;</span><br><span class=\"line\">   4) (integer) 1</span><br><span class=\"line\">   5) &quot;pending&quot;</span><br><span class=\"line\">   6) (integer) 2</span><br><span class=\"line\">   7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">   8) &quot;1681365756516-0&quot;</span><br></pre></td></tr></table></figure>\n<p>同时，<code>consumers</code>从0变成了1。一个新的消费者<code>myconsumer</code>被创建。我们可以用<a href=\"https://redis.io/commands/xinfo-consumers/\">XINFO CONSUMERS</a>来查看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XINFO CONSUMERS persons mygroup</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;myconsumer&quot;</span><br><span class=\"line\">   3) &quot;pending&quot;</span><br><span class=\"line\">   4) (integer) 2</span><br><span class=\"line\">   5) &quot;idle&quot;</span><br><span class=\"line\">   6) (integer) 248693</span><br></pre></td></tr></table></figure>\n<p>我们可以注意到，<code>mygroup</code>的<code>pending</code>从0变成了2，<code>myconsumer</code>的<code>pending</code>也等于2。</p>\n<h3 id=\"挂起-pending\"><a href=\"#挂起-pending\" class=\"headerlink\" title=\"挂起(pending)\"></a>挂起(pending)</h3><p><code>pending</code>代表未被处理的消息。<br>在上面的操作中，我们分配给了消费者<code>myconsumer</code>2条消息，<code>myconsumer</code>在处理完后，需要标记这2条消息为确认完成或拒绝完成，这样才能保证消息不丢失。</p>\n<p>可以使用<a href=\"https://redis.io/commands/xpending/\">XPENDING</a>命令来查看消费者组里挂起的消息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XPENDING persons mygroup</span><br><span class=\"line\">1) (integer) 2</span><br><span class=\"line\">2) &quot;1681365707499-0&quot;</span><br><span class=\"line\">3) &quot;1681365756516-0&quot;</span><br><span class=\"line\">4) 1) 1) &quot;myconsumer&quot;</span><br><span class=\"line\">      2) &quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用<a href=\"https://redis.io/commands/xack/\">XACK</a>命令来确认消息处理完毕。被确认的消息会从待确认条目列表（Pending Entries List (PEL)）中移去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XACK persons mygroup 1681365707499-0</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis&gt; XPENDING persons mygroup</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\">2) &quot;1681365756516-0&quot;</span><br><span class=\"line\">3) &quot;1681365756516-0&quot;</span><br><span class=\"line\">4) 1) 1) &quot;myconsumer&quot;</span><br><span class=\"line\">      2) &quot;1&quot;</span><br><span class=\"line\">redis&gt; XINFO CONSUMERS persons mygroup</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;myconsumer&quot;</span><br><span class=\"line\">   3) &quot;pending&quot;</span><br><span class=\"line\">   4) (integer) 1</span><br><span class=\"line\">   5) &quot;idle&quot;</span><br><span class=\"line\">   6) (integer) 1251414</span><br></pre></td></tr></table></figure>\n\n<p>我们再创建一个消费者，给它也分配2条消息看看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XGROUP CREATECONSUMER persons mygroup betterconsumer</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis&gt; XREADGROUP GROUP mygroup betterconsumer COUNT 2 STREAMS persons &gt;</span><br><span class=\"line\">1) 1) &quot;persons&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1681365759975-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Yann&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;LeCun&quot;</span><br><span class=\"line\">      2) 1) &quot;1681365768735-0&quot;</span><br><span class=\"line\">         2) 1) &quot;name&quot;</span><br><span class=\"line\">            2) &quot;Andrew&quot;</span><br><span class=\"line\">            3) &quot;surname&quot;</span><br><span class=\"line\">            4) &quot;Ng&quot;</span><br><span class=\"line\">redis&gt; XPENDING persons mygroup</span><br><span class=\"line\">1) (integer) 3</span><br><span class=\"line\">2) &quot;1681365756516-0&quot;</span><br><span class=\"line\">3) &quot;1681365768735-0&quot;</span><br><span class=\"line\">4) 1) 1) &quot;betterconsumer&quot;</span><br><span class=\"line\">      2) &quot;2&quot;</span><br><span class=\"line\">   2) 1) &quot;myconsumer&quot;</span><br><span class=\"line\">      2) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>标记<code>1681365759975-0</code>完成。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XACK persons mygroup 1681365759975-0</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis&gt; XPENDING persons mygroup - + 10</span><br><span class=\"line\">1) 1) &quot;1681365756516-0&quot;</span><br><span class=\"line\">   2) &quot;myconsumer&quot;</span><br><span class=\"line\">   3) (integer) 2954839</span><br><span class=\"line\">   4) (integer) 1</span><br><span class=\"line\">2) 1) &quot;1681365768735-0&quot;</span><br><span class=\"line\">   2) &quot;betterconsumer&quot;</span><br><span class=\"line\">   3) (integer) 572468</span><br><span class=\"line\">   4) (integer) 1</span><br></pre></td></tr></table></figure>\n<p><code>2954839</code>和<code>572468</code>代表消费者已经消耗的时间。</p>\n<h3 id=\"超时处理\"><a href=\"#超时处理\" class=\"headerlink\" title=\"超时处理\"></a>超时处理</h3><p>使用<a href=\"https://redis.io/commands/xclaim/\">XCLAIM</a>命令将超时的消息换人处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis&gt; XCLAIM persons mygroup betterconsumer 60000 1681365756516-0</span><br><span class=\"line\">1) 1) &quot;1681365756516-0&quot;</span><br><span class=\"line\">   2) 1) &quot;name&quot;</span><br><span class=\"line\">      2) &quot;Geoffrey&quot;</span><br><span class=\"line\">      3) &quot;surname&quot;</span><br><span class=\"line\">      4) &quot;Hinton&quot;</span><br><span class=\"line\">redis&gt; XPENDING persons mygroup</span><br><span class=\"line\">1) (integer) 2</span><br><span class=\"line\">2) &quot;1681365756516-0&quot;</span><br><span class=\"line\">3) &quot;1681365768735-0&quot;</span><br><span class=\"line\">4) 1) 1) &quot;betterconsumer&quot;</span><br><span class=\"line\">      2) &quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可使用<a href=\"https://redis.io/commands/xautoclaim/\">XAUTOCLAIM</a>来指定一个托底的消费者。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["redis"]},{"title":"减少docker卷在windows的占用空间","url":"/blog/2022/10/27/reduce-size-of-docker-volume/","content":"<p>使用wsl2后端的docker会把volume存放在<code>$Env:LOCALAPPDATA\\Docker\\wsl\\data\\ext4.vhdx</code>，而vhdx文件占用的文件大小和实际使用的文件大小有差异，我们可以优化它。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Optimize-VHD</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$Env:LOCALAPPDATA</span>\\Docker\\wsl\\data\\ext4.vhdx <span class=\"literal\">-Mode</span> Full</span><br></pre></td></tr></table></figure>\n\n<p>在修改之前，我们需要先停止使用。使用<strong>管理员</strong>权限运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">net stop com.docker.service</span><br><span class=\"line\">taskkill /IM <span class=\"string\">&quot;docker.exe&quot;</span> /F</span><br><span class=\"line\">taskkill /IM <span class=\"string\">&quot;Docker Desktop.exe&quot;</span> /F</span><br><span class=\"line\">wsl <span class=\"literal\">--shutdown</span></span><br></pre></td></tr></table></figure>\n\n<p>优化完后，<code>ext4.vhdx</code>占用空间降到了138G，优化出了7G，终于又可以苟一段时间。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["docker","windows"]},{"title":"删除远程桌面连接记录","url":"/blog/2022/10/08/remove-deprecated-mstsc-servers/","content":"<h2 id=\"默认的远程连接\"><a href=\"#默认的远程连接\" class=\"headerlink\" title=\"默认的远程连接\"></a>默认的远程连接</h2><img src=\"/blog/2022/10/08/remove-deprecated-mstsc-servers/Default.rdp.png\" class=\"\" title=\"默认的远程连接\">\n\n<p><code>%USERPROFILE%\\Documents\\Default.rdp</code>这里保存着最近一次登录的远程连接，可以不用管。</p>\n<h2 id=\"服务器列表\"><a href=\"#服务器列表\" class=\"headerlink\" title=\"服务器列表\"></a>服务器列表</h2><p>服务器列表保存在注册表的<code>计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default</code>下。</p>\n<img src=\"/blog/2022/10/08/remove-deprecated-mstsc-servers/server-list.png\" class=\"\" title=\"服务器列表\">\n\n<p>不需要哪个直接删除哪个就好。</p>\n<p>后面的<code>MRU0</code>，<code>MRU1</code>的0和1这些序号可以不用管，在成功登录一次后会被重新排序。</p>\n<h2 id=\"最近使用\"><a href=\"#最近使用\" class=\"headerlink\" title=\"最近使用\"></a>最近使用</h2><img src=\"/blog/2022/10/08/remove-deprecated-mstsc-servers/recent.png\" class=\"\" title=\"最近使用\">\n\n<p>远程桌面连接应用的最近使用记录则需要手动删除。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"记一次简单的数据去重","url":"/blog/2019/03/31/remove-duplicates/","content":"<h2 id=\"探索数据\"><a href=\"#探索数据\" class=\"headerlink\" title=\"探索数据\"></a>探索数据</h2><p>拿到数据的第一件事很自然的就是探索，看看数据的组成方式，所包含的信息。</p>\n<p>这次拿到的是一份txt和一份csv，存储形式都是类似excel的表格形式。</p>\n<h2 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h2><p><strong>换行符</strong></p>\n<p>先使用最熟悉的node.js，使用linebylin模块尝试分行读取txt中的数据，结果很出乎意料。读出的数据与txt中显示的不符，似乎一下子就跳到了中间的数据，忽略了最开始的数据。</p>\n<p>其实原因很简单，只不过因为缺乏经验而没有第一时间注意到这个问题。</p>\n<p>原因是txt的换行符既不是linux下的<code>\\n</code>，也不是windows下的<code>\\r\\n</code>，而是使用了老mac os的<code>\\r</code>。这个在notepad中就有显示的信息，居然花了近半个小时才注意到。不得不说灯下黑。</p>\n<p>最常使用的<a href=\"https://en.wikipedia.org/wiki/Newline#Representation\">换行符</a>其实就只有两种，LF(Line Feed, ASCII 10, \\n)或者CR-LF（Carriage Return，ASCII 13, \\r）。</p>\n<p>在node的linebyline模块中，它是这样判断的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data[i] == <span class=\"number\">10</span> || data[i] == <span class=\"number\">13</span>) &#123; <span class=\"comment\">// Newline char was found.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data[i] == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        lineCount++;</span><br><span class=\"line\">        <span class=\"title function_\">emit</span>(lineCount, byteCount);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      lineBuffer[lineLength] = data[i]; <span class=\"comment\">// Buffer new line data.</span></span><br><span class=\"line\">      lineLength++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    byteCount++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>emit的条件是碰到\\n，不管是linux还是windows，这段代码都能正常工作。但如果文件中只有\\r，那么很显然会失效。</p>\n<p>解决办法是修改linebyline模块，或者使用兼容性更好的readline。</p>\n<p><strong>\\x00</strong></p>\n<p>csv格式的文件读取，更习惯用python。</p>\n<p>一开始很顺利的读出数据，但却在某一行抛出<code>_csv.Error: line contains NULL byte</code>异常。</p>\n<p>好在问题很常见，搜索一下就能发现有相当多人遇到同样的问题。</p>\n<p>解决方法也很简单，在将数据交给csv reader之前，先过滤掉<code>NULL byte</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"title function_\">open</span>(<span class=\"variable constant_\">CSV_FILENAME</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"attr\">f</span>:</span><br><span class=\"line\">    reader = csv.<span class=\"title function_\">reader</span>(l.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> f)</span><br></pre></td></tr></table></figure>\n\n<p>在检查过程中，还发现存在”\\x01”这样的数据，都属于不正常数据，需要修正或剔除。</p>\n<p><strong>数据一致性和完整性</strong></p>\n<p>txt和csv都能正常读取，但数据清洗并没完。还需要检查数据完整性和一致性。</p>\n<p>对比发现，csv读取到的条数与文件行数不符。</p>\n<p>检查发现原因是存在<strong>不正常换行</strong>，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;101&quot;,&quot;a&quot;,&quot;0&quot;,&quot;2019-03-31&quot;</span><br><span class=\"line\">&quot;102&quot;,&quot;a&quot;,&quot;0</span><br><span class=\"line\">&quot;,&quot;2019-03-31&quot;</span><br><span class=\"line\">&quot;103&quot;,&quot;a&quot;,&quot;0&quot;,&quot;2019-03-31&quot;</span><br><span class=\"line\">&quot;104&quot;,&quot;a&quot;,&quot;0&quot;,&quot;2019-03-31&quot;</span><br></pre></td></tr></table></figure>\n\n<p>对于这样的数据，可以另外写段脚本进行修正。</p>\n<h2 id=\"数据去重\"><a href=\"#数据去重\" class=\"headerlink\" title=\"数据去重\"></a>数据去重</h2><p>数据读取完成后，开始进行数据去重。</p>\n<p>去重的简单思路是先写入数据库，然后通过数据库命令进行去重。</p>\n<p>数据去重在逻辑上无非两部分，一是判断是否重复，二是去除。</p>\n<p><strong>mongodb</strong><br>如使用mongodb，有两种方法：</p>\n<ol>\n<li><p>使用aggregate聚合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var duplicates = [];</span><br><span class=\"line\"></span><br><span class=\"line\">db.collectionName.aggregate([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    $match: &#123;</span><br><span class=\"line\">      name: &#123; &quot;$ne&quot;: &#x27;&#x27; &#125;  // discard selection criteria</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    $group: &#123;</span><br><span class=\"line\">      _id: &#123; name: &quot;$name&quot; &#125;, // can be grouped on multiple properties </span><br><span class=\"line\">      dups: &#123; &quot;$addToSet&quot;: &quot;$_id&quot; &#125;,</span><br><span class=\"line\">      count: &#123; &quot;$sum&quot;: 1 &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    $match: &#123;</span><br><span class=\"line\">      count: &#123; &quot;$gt&quot;: 1 &#125;    // Duplicates considered as count greater than one</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">  &#123; allowDiskUse: true &#125;       // For faster processing if set is larger</span><br><span class=\"line\">)               // You can display result until this and check duplicates </span><br><span class=\"line\">  .forEach(function (doc) &#123;</span><br><span class=\"line\">    doc.dups.shift();      // First element skipped for deleting</span><br><span class=\"line\">    doc.dups.forEach(function (dupId) &#123;</span><br><span class=\"line\">      duplicates.push(dupId);   // Getting all duplicate ids</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// If you want to Check all &quot;_id&quot; which you are deleting else print statement not needed</span><br><span class=\"line\">printjson(duplicates);</span><br><span class=\"line\"></span><br><span class=\"line\">// Remove all duplicates in one go</span><br><span class=\"line\">db.collectionName.remove(&#123; _id: &#123; $in: duplicates &#125; &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用mapreduce</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;&#125;</span><br><span class=\"line\">o.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">emit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">phone</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.<span class=\"property\">reduce</span> = <span class=\"keyword\">function</span>(<span class=\"params\">k, vals</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">sum</span>(vals)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.<span class=\"property\">out</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">replace</span>: <span class=\"string\">&#x27;mapreduce_demo&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">Item</span>.<span class=\"title function_\">mapReduce</span>(o)</span><br></pre></td></tr></table></figure>\n<p>mapreduce完成后，在生成的新的collection是搜索出现次数超过1次的，再保留第一个，删除其它。</p>\n</li>\n</ol>\n<p><strong>mysql</strong><br>如使用mysql，也有两种方式，具体请参考<a href=\"http://www.mysqltutorial.org/mysql-delete-duplicate-rows/\">这篇文章</a></p>\n<ol>\n<li><p>使用<code>DELETE JOIN</code></p>\n</li>\n<li><p>使用中间数据库</p>\n</li>\n</ol>\n<h2 id=\"超大数据\"><a href=\"#超大数据\" class=\"headerlink\" title=\"超大数据\"></a>超大数据</h2><p>使用数据来进行去重操作似乎是个常规选项，但当遇上超大数据时，就显得有点为了吃匹萨自己做个烤箱了。</p>\n<ol>\n<li>首先是内存问题</li>\n</ol>\n<p>如果是node，可以使用这样的命令来启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=8192 app.js</span><br></pre></td></tr></table></figure>\n\n<p>如果是mongodb，可以加上使用硬盘缓冲的选项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> model.<span class=\"title function_\">aggregate</span>([&#123;</span><br><span class=\"line\">  <span class=\"attr\">$group</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;$_id&#x27;</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">count</span>: &#123; <span class=\"string\">&#x27;$sum&#x27;</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;]).<span class=\"title function_\">allowDiskUse</span>(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>其次是速度</li>\n</ol>\n<p>如果数据量过千万，即使是一个简单的分组查询动作，也要几十分钟才能完成。</p>\n<h2 id=\"结局\"><a href=\"#结局\" class=\"headerlink\" title=\"结局\"></a>结局</h2><p>最终，写了个简单的脚本，一边从源文件读取并加工数据，另一边输出到目标文件，放弃使用数据库。</p>\n<p>简单的一个去重数据操作，最终花耗了超过4个小时的时间。</p>\n<p>虽然曾经上过Udacity的数据分析纳米课程，但一旦真正上手，还是问题不断，感叹学海无涯。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>数据去重这步操作最好还是在入库前做，是将一个耗时巨长的操作分散在每一时刻，还是忙时尽量快，闲时再做长时间操作。</p>\n<p>或者再多思考下到底是出于什么目的进行数据去重。有索引的帮助，查询其实很快。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science"]},{"title":"重置idm的30天试用期","url":"/blog/2022/07/06/reset-idm-trial-period/","content":"<p><a href=\"https://www.internetdownloadmanager.com/\">idm</a>是windows下最好的下载工具之一，但它是付费软件，我们很穷但又坚持不肯使用盗版，所以我们决定延长它的试用期限。</p>\n<p>和<a href=\"https://www.scootersoftware.com/\">Beyond Compare</a>类似，它的试用开始时间是保存在注册表里的，所以我们只需要在注册表里清除这一项即可。</p>\n<p>它在注册表中保存在<code>计算机\\HKEY_USERS\\S-1-5-21-3017953563-992067650-4147715027-1001_Classes\\WOW6432Node\\CLSID\\&#123;07999AC3-058B-40BF-984F-69EB1E554CA7&#125;</code>，<br>注意<code>S-1-5-21-3017953563-992067650-4147715027-1001_Classes</code>在不同的电脑上中间的数字会不同。</p>\n<p>我们只需要</p>\n<ol>\n<li>彻底关闭idm</li>\n<li>删除注册表中的这一项</li>\n<li>重新打开idm</li>\n</ol>\n<p>即可重置试用期。</p>\n<p><a href=\"https://nsaneforums.com/\">nsane forums</a>上的<a href=\"windowsaddict@protonmail.com\">windowsaddict</a>在<a href=\"https://nsaneforums.com/topic/371047--/?do=findComment&comment=1578647\">论坛帖子(访问需登录)</a>里提供了一个<a href=\"https://www.box.com/index.php?rm=box_download_shared_file&shared_name=5wlww2p267sbp3nysh5c6cxrp0ofrzre&file_id=f_901589409735?s=5wlww2p267sbp3nysh5c6cxrp0ofrzre\">激活脚本</a>。出于安全考虑，类似这种脚本只建议在虚拟机中使用。</p>\n<p>其实IDM也不贵，<a href=\"https://secure.internetdownloadmanager.com/buy_idm.html\">终身授权只需165元</a>，如果手上不紧还是建议入一份正版。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"重置beyond compare的试用期","url":"/blog/2017/04/21/reset-the-trial-period-of-beyond-compare/","content":"<p>首先声明一点，拒绝使用盗版或破解版，并且也不要过于依赖重置试用期的trick。像这种好用经典又不贵的软件还是入个正版吧。<del>又不是Adobe，BC的标准版才30刀</del></p>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><p>删除Library&#x2F;Application Support&#x2F;Beyond Compare&#x2F;registry.dat</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> ~/Library/Application\\ Support/Beyond\\ Compare/registry.dat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>在注册表中删除<code>计算机\\HKEY_USERS\\&#123;USER_SID&#125;\\SOFTWARE\\Scooter Software\\Beyond Compare 4\\CacheID</code>。</p>\n<p>其中<code>USER_SID</code>是用户的<a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">Security Identifier</a>，可以在<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList</code>中找到。</p>\n<h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.beyondcompare</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science"],"tags":["computer science","善用佳软","beyond compare"]},{"title":"记录一下如何在命令行使用代理","url":"/blog/2022/07/19/running-installation-behind-a-proxy-server/","content":"<p>在windows<code>系统设置</code>下的<code>代理服务器设置</code>可以设置操作系统级别的代理，但并不会在命令行中生效。</p>\n<p>记录一下命令行下的常用命令要怎样使用代理：</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>关于是否使用代理，民间有一个<a href=\"https://wiki.archlinux.org/index.php?title=Proxy_server&oldid=596484#Environment_variables\">约定</a>：环境变量<code>HTTP_RPOXY</code>，<code>HTTPS_PROXY</code>和<code>NO_PROXY</code>。</p>\n<p>但它还不是<a href=\"https://about.gitlab.com/blog/2021/01/27/we-need-to-talk-no-proxy/\">标准</a>，所以并不是所有的命令行工具都支持。</p>\n<p>powershell</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:http_proxy</span>=<span class=\"string\">&quot;http://127.0.0.1:10809&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$env:https_proxy</span>=<span class=\"string\">&quot;http://127.0.0.1:10809&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>linux bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://127.0.0.1:10809&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=<span class=\"string\">&quot;http://127.0.0.1:10809&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm和yarn\"><a href=\"#npm和yarn\" class=\"headerlink\" title=\"npm和yarn\"></a><a href=\"https://docs.npmjs.com/cli/v8/using-npm/config#proxy\">npm</a>和<a href=\"https://classic.yarnpkg.com/en/docs/cli/config\">yarn</a></h2><p>使用代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:10809</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> https_proxy http://127.0.0.1:10809</span><br></pre></td></tr></table></figure>\n\n<p>关闭代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn config delete proxy</span><br><span class=\"line\">npm config delete https_proxy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a><a href=\"https://pip.pypa.io/en/stable/user_guide/#using-a-proxy-server\">pip</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --proxy http://127.0.0.1:10809 -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"curl和Invoke-WebRequest\"><a href=\"#curl和Invoke-WebRequest\" class=\"headerlink\" title=\"curl和Invoke-WebRequest\"></a><a href=\"https://linux.die.net/man/1/curl\">curl</a>和<a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.2\">Invoke-WebRequest</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -x http://127.0.0.1:10809 https://google.com</span><br><span class=\"line\"></span><br><span class=\"line\">Invoke-WebRequest -Uri https://google.com -Proxy http://127.0.0.1:10809</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a><a href=\"https://git-scm.com/docs/git-config\">git</a></h2><p>使用代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:10809</span><br></pre></td></tr></table></figure>\n\n<p>关闭代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["proxy"]},{"title":"在Ubuntu上安装samba","url":"/blog/2023/02/03/samba-on-ubuntu/","content":"<p>Ubuntu官方有<a href=\"https://ubuntu.com/tutorials/install-and-configure-samba\">samba的安装与配置文档</a>。</p>\n<h2 id=\"安装samba\"><a href=\"#安装samba\" class=\"headerlink\" title=\"安装samba\"></a>安装samba</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install -y samba</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置共享目录\"><a href=\"#配置共享目录\" class=\"headerlink\" title=\"配置共享目录\"></a>配置共享目录</h2><p>创建sambashare目录以便共享</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /home/&lt;username&gt;/sambashare/</span><br></pre></td></tr></table></figure>\n<p>注意把<code>&lt;username&gt;</code>换成你的用户名。</p>\n<p>修改配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>\n<p>在配置文件最下面添加</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[sambashare]</span></span><br><span class=\"line\">    <span class=\"attr\">comment</span> = Samba <span class=\"literal\">on</span> Ubuntu</span><br><span class=\"line\">    <span class=\"attr\">path</span> = /home/&lt;username&gt;/sambashare</span><br><span class=\"line\">    read <span class=\"attr\">only</span> = <span class=\"literal\">no</span></span><br><span class=\"line\">    <span class=\"attr\">browsable</span> = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<p>重启服务以生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service smbd restart</span><br></pre></td></tr></table></figure>\n\n<p>配置防火墙放行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ufw allow samba</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h2><p>samba默认并不会把当前账号添加进去，需要手动添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo smbpasswd -a username</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"windows客户端\"><a href=\"#windows客户端\" class=\"headerlink\" title=\"windows客户端\"></a>windows客户端</h2><p>如果使用的windows是家庭版，那么还需要加多一步：在<code>启用或关闭 Windows 功能</code>中，启用<code>SMB 1.0/CIFS 文件共享支持</code>下的<code>SMB 1.0/CIFS 客户端</code>。否则会无法访问samba。</p>\n<p>有条件还是使用专业版吧，家庭版真是各种坑。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"推荐几款在线的文字图片视频软件","url":"/blog/2023/01/06/several-online-softwares/","content":"<h2 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h2><p>不管是图片还是视频、音频、文档，<a href=\"https://convertio.co/\">convertio</a>一网打尽。</p>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>如果想在不怎么损失图片质量的前提下进行图片压缩，Windows自带的工具基本就没法用。此时推荐<a href=\"https://tinypng.com/\">TinyPNG</a>，它的压缩效果是我用过最好的。只是有个弊端是免费版只支持5M以下的图片，偶尔用用还行。</p>\n<h2 id=\"图片编辑\"><a href=\"#图片编辑\" class=\"headerlink\" title=\"图片编辑\"></a>图片编辑</h2><p>非专业人员没人会去买一套正版Adboe或PS。试用又需要注册账号，麻烦的很。使用破解软件又担心安全性以及无法享受最新功能。</p>\n<p>其实现在在线的图片编辑软件完成度已经非常不错，比如<a href=\"https://www.photopea.com/\">Photopea</a>和<a href=\"https://pixlr.com/\">pixlr</a>。</p>\n<p>它们的使用与Photoshop很接近，基本可以无缝切换，非常适合偶尔才P次图的普通人。</p>\n<p>而<a href=\"https://photokit.com/\">photokit</a>更是使用了AI算法，像一键抠图、智能笔刷、画质增强统统都支持，强大无匹。</p>\n<h2 id=\"人像画质增强\"><a href=\"#人像画质增强\" class=\"headerlink\" title=\"人像画质增强\"></a>人像画质增强</h2><p>人像画质增强在AI的图像应用中是个非常热门的领域了，特别是用在老照片的画质修复上，可以试试腾讯ARC的<a href=\"https://arc.tencent.com/zh/ai-demos/faceRestoration\">人像修复</a>。</p>\n<h2 id=\"文字创作助手\"><a href=\"#文字创作助手\" class=\"headerlink\" title=\"文字创作助手\"></a>文字创作助手</h2><p>除了文字工作者，现代人很少有机会写一些长篇文章了。一年到头可能也就年终总结要正经的写点文字，此时<a href=\"https://effidit.qq.com/demo\">Effidit</a>（Efficient and Intelligent Editing）可能可以帮到忙。</p>\n<p>它有智能纠错、文本补全、文本润色和超级网典四大功能。</p>\n<p>智能纠错可以帮助查找错别字和错误的文法。</p>\n<p>文本补全可以在卡壳的时候提供一些思路。</p>\n<p>文本润色可以帮助用词和语句组织的优化。</p>\n<p>超级网典可以查到一些字词的同反义词以及例句。</p>\n<h2 id=\"视频剪辑\"><a href=\"#视频剪辑\" class=\"headerlink\" title=\"视频剪辑\"></a>视频剪辑</h2><p>如果只是简单的剪辑一些<strong>短时长</strong>、<strong>非私密</strong>的视频发给朋友或上传视频网站，没必要安装十几G的Davinci，完全可以尝试一下这款线上视频剪辑工具：<a href=\"https://zenvideo.qq.com/\">腾讯智影</a>。</p>\n<p>需要登录才能使用。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"AI变声器","url":"/blog/2023/03/21/singing-voice-conversion/","content":"<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"TTS\"><a href=\"#TTS\" class=\"headerlink\" title=\"TTS\"></a>TTS</h3><p>首先是TTS，即Text To Speech，从文本直接合成语音。</p>\n<p>语音朗读在智能手机时代之前就已经很普及了，早期并没有AI，现在在AI加持下<a href=\"\">已经非常自然</a>。</p>\n<img src=\"/blog/2023/03/21/singing-voice-conversion/tts-performance.png\" class=\"\" title=\"TTS性能对比\">\n\n<p>应用最广的肯定是<a href=\"https://azure.microsoft.com/zh-cn/services/cognitive-services/text-to-speech/\">微软家的</a>，云希几乎成为一众营销号的御用配音。</p>\n<p>开源的有<a href=\"https://github.com/mozilla/TTS\">mozilla的</a>，<a href=\"https://github.com/coqui-ai/TTS\">coqui-ai的</a>。</p>\n<h3 id=\"SVS\"><a href=\"#SVS\" class=\"headerlink\" title=\"SVS\"></a>SVS</h3><p>SVS，即Singing Voice Synthesis，是用于基于包括例如歌词、节奏、音高等信息的乐谱来生成虚拟歌声的技术。</p>\n<p>比如之前介绍过的<a href=\"/blog/2023/01/30/ai-singer/\" title=\"AI歌手\">AI歌手</a>中使用的<a href=\"https://github.com/openvpi/DiffSinger\">DiffSinger</a>就属于SVS。补一句，<a href=\"https://github.com/MoonInTheRiver/DiffSinger\">官方DiffSinger</a>其实也有TTS版本：<a href=\"https://github.com/MoonInTheRiver/DiffSinger/blob/master/docs/README-TTS.md\">DiffSpeech</a>。</p>\n<p>大名鼎鼎的<a href=\"https://www.vocaloid.com/en/\">vocaloid</a>也属于这类。</p>\n<h3 id=\"SVC\"><a href=\"#SVC\" class=\"headerlink\" title=\"SVC\"></a>SVC</h3><p>SVC，即Singing Voice Conversion，在保证歌唱内容的同时，将音色从输入源转换到目标音色，可理解为变声器。</p>\n<p>比如使用so-vits的<a href=\"https://github.com/svc-develop-team/so-vits-svc\">so-vits-svc</a>，和使用<a href=\"(https://arxiv.org/abs/2105.02446)\">diffusion</a>的<a href=\"https://github.com/prophesier/diff-svc\">diff-svc</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["生活"]},{"title":"stable diffusion中的提示语","url":"/blog/2023/02/21/stable-diffusion-prompt/","content":"<p>NovelAI.Dev有提供一份指南：<a href=\"https://guide.novelai.dev/guide/prompt-engineering/\">提示词工程学</a>，可以参考。</p>\n<p>针对不同的底模，会有不同的标签。比如<a href=\"https://tags.novelai.dev/\">Danbooru的标签超市</a>。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>用圆括号表示强调，比如<code>(best quality)</code>。</p>\n<h3 id=\"弱化\"><a href=\"#弱化\" class=\"headerlink\" title=\"弱化\"></a>弱化</h3><p>用方括号表示弱化，比如<code>[gray]</code>。</p>\n<h3 id=\"系数\"><a href=\"#系数\" class=\"headerlink\" title=\"系数\"></a>系数</h3><p>可以用一个冒号后面接数字的形式来指定系数，这个值是一个百分比，总和最好为1。比如<code>Cute:0.1, Grey Cat:0.6, Unreal Engine rendering:0.3</code>。</p>\n<h3 id=\"LoRA\"><a href=\"#LoRA\" class=\"headerlink\" title=\"LoRA\"></a>LoRA</h3><p>使用LoRA的语法是尖括号，比如<code>&lt;lora:koreanDollLikeness_v10:0.6&gt;</code>。</p>\n<h2 id=\"词缀\"><a href=\"#词缀\" class=\"headerlink\" title=\"词缀\"></a>词缀</h2><p>可以在<a href=\"https://proximacentaurib.notion.site/2b07d3195d5948c6a7e5836f9d535592?v=b5b75a67cc52483c9965cfc141f6f582\">这里</a>查看到一些网友推荐的词缀。</p>\n<h3 id=\"清晰度\"><a href=\"#清晰度\" class=\"headerlink\" title=\"清晰度\"></a>清晰度</h3><p>4k, 8k,<br>best quality, high quality,<br>masterpiece, official art,<br>extremely detailed, </p>\n<p>负面提示语：<br>paintings, sketches, 3d render,<br>worst quality, low quality, normal quality, lowres,<br>bad art, extra digit, fewer digits,</p>\n<h3 id=\"静物\"><a href=\"#静物\" class=\"headerlink\" title=\"静物\"></a>静物</h3><p>35mm, sharp,<br>low poly 3d render, vibrant pastel colors, tilt shift, film grain,</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>cinematic, dramatic, composition, sunny sky, brutalist, hyper realistic,<br>epic scale, sense of awe, hypermaximalist, insane level of details, artstation HQ,</p>\n<h3 id=\"镜头\"><a href=\"#镜头\" class=\"headerlink\" title=\"镜头\"></a>镜头</h3><p>closeup, wide angle, looking the viewer, pov,</p>\n<p>负面提示语：<br>cropped, out of frame, </p>\n<h3 id=\"人物\"><a href=\"#人物\" class=\"headerlink\" title=\"人物\"></a>人物</h3><h4 id=\"出镜\"><a href=\"#出镜\" class=\"headerlink\" title=\"出镜\"></a>出镜</h4><p>full body, half body,</p>\n<p>负面提示语：<br>long body, </p>\n<h4 id=\"脸\"><a href=\"#脸\" class=\"headerlink\" title=\"脸\"></a>脸</h4><p>负面提示语：<br>mutation, mutated, </p>\n<h4 id=\"肢体\"><a href=\"#肢体\" class=\"headerlink\" title=\"肢体\"></a>肢体</h4><p>extra limbs, extra legs, extra arms, extra fingers, missing fingers, mutated hands,<br>bad anatomy, </p>\n<h4 id=\"表情\"><a href=\"#表情\" class=\"headerlink\" title=\"表情\"></a>表情</h4><p>open mouth, slightly smile</p>\n<h4 id=\"皮肤\"><a href=\"#皮肤\" class=\"headerlink\" title=\"皮肤\"></a>皮肤</h4><p>负面提示语：<br>skin spots, acnes, skin blemishes, age spot,</p>\n<h4 id=\"服装\"><a href=\"#服装\" class=\"headerlink\" title=\"服装\"></a>服装</h4><p>school shirt, jeans, tight crop top, wrap skirt, </p>\n<h3 id=\"色彩\"><a href=\"#色彩\" class=\"headerlink\" title=\"色彩\"></a>色彩</h3><p>负面：<br>monochrome</p>\n<h3 id=\"艺术家风格\"><a href=\"#艺术家风格\" class=\"headerlink\" title=\"艺术家风格\"></a>艺术家风格</h3><p>可以指定使用某个艺术字的风格，比如<code>a portrait of a character in a scenic environment by [artist]</code></p>\n<p>艺术家<code>[artist]</code>可以在<a href=\"https://proximacentaurib.notion.site/e28a4f8d97724f14a784a538b8589e7d?v=ab624266c6a44413b42a6c57a41d828c\">这里</a>查看。</p>\n<h3 id=\"NSFW\"><a href=\"#NSFW\" class=\"headerlink\" title=\"NSFW\"></a>NSFW</h3><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        NSFW\n    </div>\n    <div class='spoiler-content'>\n        <p>nude, naked,<br>spead leg,<br>pussy,<br>huge breasts, medium breasts,</p>\n\n    </div>\n</div>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["stable diffusion"]},{"title":"react 18中的严格模式","url":"/blog/2022/12/13/strict-mode-in-react-18/","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近的项目中使用了react 18，下面的代码在code发生变化时会请求两次：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; code &#125; = <span class=\"title function_\">useParams</span>()</span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">authByCode</span>(code)</span><br><span class=\"line\">&#125;, [code])</span><br></pre></td></tr></table></figure>\n<p>这里的<code>authByCode</code>每个<code>code</code>只能使用一次，第二次使用的时候会报错，所以才发现了会运行两次的问题。</p>\n<h2 id=\"前因后果\"><a href=\"#前因后果\" class=\"headerlink\" title=\"前因后果\"></a>前因后果</h2><p>网上搜了下，发现react官方早有文档说明了这种情况，甚至还分为了<a href=\"https://beta.reactjs.org/apis/react/useMemo#my-calculation-runs-twice-on-every-re-render\">useMemo</a>和<a href=\"https://beta.reactjs.org/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development\">useEffect</a>分别介绍。</p>\n<p>出现运行两次的原因是React 18有一个<a href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md#react-1\">Breaking Change</a>：使组件在卸载后保留状态，这样当组件重新挂载回时可以更快速的响应。</p>\n<p>为了测试保留状态是否能正常工作，又可以更好的<a href=\"https://beta.reactjs.org/learn/keeping-components-pure\">保持组件纯净</a>，React 18在开发时打开<a href=\"https://reactjs.org/docs/strict-mode.html\">严格模式</a>后，组件在加载时，会改为<a href=\"https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state\">加载-卸载-重新加载</a>。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>回到最开始的问题，官方建议的<a href=\"https://beta.reactjs.org/learn/synchronizing-with-effects#fetching-data\">给网络请求加上cleanup</a>的方法其实是没用的。我们的问题是发生在服务端而不是客户端。</p>\n<p>这里可以听取<a href=\"https://github.com/facebook/react/issues/24502#issuecomment-1118867879\">react维护者的建议</a>，使用客户端缓存，比如<a href=\"https://github.com/facebook/react/issues/24502#issuecomment-1120856043\">react-query</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"Windows Server云服务器装机必备","url":"/blog/2022/09/30/suit-up-windows-server/","content":"<h1 id=\"以往可以通过Microsoft-Store安装的App\"><a href=\"#以往可以通过Microsoft-Store安装的App\" class=\"headerlink\" title=\"以往可以通过Microsoft Store安装的App\"></a>以往可以通过Microsoft Store安装的App</h1><p>首先一个很大的区别是<a href=\"https://learn.microsoft.com/en-us/windows/msix/msix-server-2019#considerations\">Server没有Microsoft Store</a>，所以很多App只能通过命令行的形式来安装。</p>\n<p>比如巨好用的<a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a>，以及很顺手的包管理器<a href=\"https://github.com/microsoft/winget-cli\">winget</a>，甚至是<a href=\"https://www.microsoft.com/store/apps/9PN20MSR04DW\">Ubuntu 22.04.1 LTS</a>。</p>\n<h1 id=\"无脑攻略\"><a href=\"#无脑攻略\" class=\"headerlink\" title=\"无脑攻略\"></a>无脑攻略</h1><h2 id=\"VC-v14-Desktop-Framework-Package\"><a href=\"#VC-v14-Desktop-Framework-Package\" class=\"headerlink\" title=\"VC++ v14 Desktop Framework Package\"></a>VC++ v14 Desktop Framework Package</h2><p>很多App都依赖<a href=\"https://docs.microsoft.com/troubleshoot/cpp/c-runtime-packages-desktop-bridge#how-to-install-and-update-desktop-framework-packages\">VC++ v14 Desktop Framework Package</a>，比如<code>Windows Terminal</code>和<code>winget</code>，所以第一步先安装它。</p>\n<p>下载<a href=\"https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx\">Microsoft.VCLibs.x64.14.00.Desktop.appx</a>，然后使用命令行安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Add-AppxPackage</span> Microsoft.VCLibs.x64.<span class=\"number\">14.00</span>.Desktop.appx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dotnet\"><a href=\"#Dotnet\" class=\"headerlink\" title=\"Dotnet\"></a>Dotnet</h2><p><a href=\"https://dotnet.microsoft.com/en-us/download/dotnet/6.0/runtime\">Dotnet运行时</a>也算是装机必备了，一次到位我们直接安装<a href=\"https://dotnet.microsoft.com/en-us/download\">SDK</a>。目前的LTS版本是6.0，截止写这篇博客时的最新版是<a href=\"https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.401-windows-x64-installer\">6.0.401</a>。</p>\n<h2 id=\"Visual-Studio和Visual-Studio-Code\"><a href=\"#Visual-Studio和Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio和Visual Studio Code\"></a>Visual Studio和Visual Studio Code</h2><p><a href=\"https://visualstudio.microsoft.com/vs/\">VS</a>和<a href=\"https://code.visualstudio.com/\">VS Code</a>就不用多说了。</p>\n<h2 id=\"Microsoft-UI-Xaml\"><a href=\"#Microsoft-UI-Xaml\" class=\"headerlink\" title=\"Microsoft.UI.Xaml\"></a>Microsoft.UI.Xaml</h2><p><a href=\"https://github.com/microsoft/microsoft-ui-xaml\">Microsoft.UI.Xaml</a>是一个UI库，被很多App使用（比如winget）。</p>\n<p>Microsoft.UI.Xaml是一个面向开发者的库，它并没有直接提供可安装的msixbundle，所以安装方式有一点不一样。</p>\n<p>首先去<a href=\"https://www.nuget.org/packages/Microsoft.UI.Xaml\">nuget</a>下载最新的稳定版<a href=\"https://www.nuget.org/api/v2/package/Microsoft.UI.Xaml/2.7.3\">nupkg文件</a>，然后解压，再安装包里的bundle。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Rename-Item</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;microsoft.ui.xaml.2.7.3.nupkg&quot;</span> <span class=\"literal\">-NewName</span> <span class=\"string\">&quot;microsoft.ui.xaml.2.7.3.zip&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">Expand-Archive</span> <span class=\"string\">&quot;microsoft.ui.xaml.2.7.3.zip&quot;</span> <span class=\"literal\">-DestinationPath</span> <span class=\"string\">&quot;./microsoft.ui.xaml&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">Add-AppxPackage</span> <span class=\"string\">&quot;microsoft.ui.xaml\\tools\\AppX\\x64\\Release\\Microsoft.UI.Xaml.2.7.appx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"winget，不支持Windows-Server\"><a href=\"#winget，不支持Windows-Server\" class=\"headerlink\" title=\"*winget，不支持Windows Server\"></a>*winget，不支持Windows Server</h2><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        winget\n    </div>\n    <div class='spoiler-content'>\n        <p>去<a href=\"https://github.com/microsoft/winget-cli/releases\">发布页</a>下载<code>Microsoft.DesktopAppInstaller_&lt;versionNumber&gt;.msixbundle</code>，然后使用命令行安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Add-AppxPackage</span> Microsoft.DesktopAppInstaller_&lt;versionNumber&gt;.msixbundle</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>原来winget不支持Windows Server，请参见<a href=\"https://github.com/microsoft/winget-cli/issues/702#issuecomment-764997870\">issue中的讨论</a>。</p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ul>\n<li><p><a href=\"#VC-v14-Desktop-Framework-Package\">VC++ v14 Desktop Framework Package</a>。</p>\n</li>\n<li><p><a href=\"#Microsoft-UI-Xaml\">Microsoft.UI.Xaml</a></p>\n</li>\n</ul>\n\n    </div>\n</div>\n\n<h2 id=\"Windows-Terminal\"><a href=\"#Windows-Terminal\" class=\"headerlink\" title=\"Windows Terminal\"></a>Windows Terminal</h2><p>截止本文更新时间，最新版本是<a href=\"https://github.com/microsoft/terminal/releases/tag/v1.15.2524.0\">Windows Terminal v1.15.252</a>。</p>\n<p>Windows Terminal从第一个版本开始，最低支持Windows内部版本18362.0。在阿里云的Windows Server上只支持2022，其它版本都嫌弃版本低（阿里云的2019内部版本是17763.3287）。</p>\n<p>以往我们可以<a href=\"https://aka.ms/terminal\">在微软商店里</a>安装<a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a>，现在只能去github项目的<a href=\"https://github.com/microsoft/terminal/releases\">release页面</a>下载msixbundle文件。</p>\n<p>然后手动运行命令安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NOTE: If you are using PowerShell 7+, please run</span></span><br><span class=\"line\"><span class=\"comment\"># Import-Module Appx -UseWindowsPowerShell</span></span><br><span class=\"line\"><span class=\"comment\"># before using Add-AppxPackage.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Add-AppxPackage</span> Microsoft.WindowsTerminal_&lt;versionNumber&gt;.msixbundle</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ul>\n<li><a href=\"#VC-v14-Desktop-Framework-Package\">VC++ v14 Desktop Framework Package</a>。</li>\n</ul>\n<h2 id=\"z-jump\"><a href=\"#z-jump\" class=\"headerlink\" title=\"z-jump\"></a>z-jump</h2><p>z-dump的安装方法参照<a href=\"/blog/2021/11/19/z-jump-around/\" title=\"在命令行快速切换目录\">另一篇博文</a>，Windows Server没有区别。</p>\n<h2 id=\"wsl，云服务器不支持二次虚拟化\"><a href=\"#wsl，云服务器不支持二次虚拟化\" class=\"headerlink\" title=\"*wsl，云服务器不支持二次虚拟化\"></a>*wsl，云服务器不支持二次虚拟化</h2><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        wsl\n    </div>\n    <div class='spoiler-content'>\n        <p>在Windows Server上，只需要很简单的<code>wsl --install</code>就可以<a href=\"https://learn.microsoft.com/en-us/windows/wsl/install-on-server\">全部配置好</a>，也可以<a href=\"https://learn.microsoft.com/en-us/windows/wsl/install-manual\">一步步的手动操作</a>。</p>\n<p>在服务器上下载Ubuntu LTS实在是太慢了，所以推荐<a href=\"https://learn.microsoft.com/en-us/windows/wsl/install-manual#downloading-distributions\">在本地下载好</a>，再拷贝到服务器上去离线安装。其它服务器在海外的安装包也都可以这么操作。</p>\n<ol>\n<li><p>开启Linux子系统</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Enable-WindowsOptionalFeature</span> <span class=\"literal\">-Online</span> <span class=\"literal\">-FeatureName</span> Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从本地拷贝Linux发行版到服务器上，再运行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Rename-Item</span> .\\Ubuntu2204<span class=\"literal\">-220620</span>.AppxBundle .\\Ubuntu2204<span class=\"literal\">-220620</span>.zip</span><br><span class=\"line\"><span class=\"built_in\">Expand-Archive</span> .\\Ubuntu2204<span class=\"literal\">-220620</span>.zip .\\Ubuntu2204<span class=\"literal\">-220620</span></span><br><span class=\"line\"><span class=\"built_in\">Add-AppxPackage</span> .\\Ubuntu2204<span class=\"literal\">-220620</span>\\Ubuntu_2204.<span class=\"number\">0.10</span>.<span class=\"number\">0</span>_x64.appx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>然后发现安装失败…… 云服务器本来建议在虚拟化之上，所以<a href=\"https://help.aliyun.com/document_detail/25412.html#section-nxc-2zs-2gb\">没办法再虚拟一个Linux</a>了。真难受。</p>\n\n    </div>\n</div>\n\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>为了实现资源最大化利用，云服务器都是使用虚拟化技术来资源池化的。普通的云服务器<a href=\"https://help.aliyun.com/document_detail/25412.html#section-nxc-2zs-2gb\">不支持二次虚拟化</a>。</p>\n<p>所以docker在windows server云服务器上只能使用windows container，使用场景大幅受限，几近鸡肋。</p>\n<h3 id=\"不支持Docker-Desktop\"><a href=\"#不支持Docker-Desktop\" class=\"headerlink\" title=\"不支持Docker Desktop\"></a>不支持Docker Desktop</h3><p>如果想<a href=\"https://docs.docker.com/desktop/vm-vdi/\">在虚拟机中安装Docker Desktop</a>，需要嵌套虚拟化（nested virtualization）。很可惜，云服务通常都不支持嵌套虚拟化。</p>\n<p>不过我们可以抛开<a href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a>，直接使用<a href=\"https://docs.docker.com/engine/\">Docker Engine</a>。</p>\n<h3 id=\"打开container功能\"><a href=\"#打开container功能\" class=\"headerlink\" title=\"打开container功能\"></a>打开container功能</h3><p>首先要打开container功能，开启后需要重启才会生效。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-WindowsFeature</span> <span class=\"literal\">-Name</span> Containers</span><br><span class=\"line\"><span class=\"built_in\">Restart-Computer</span> <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\n\n<p>不同版本的Windows Server对Windows Container的适配性可以在<a href=\"https://learn.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility?tabs=windows-server-2022,windows-11#windows-server-host-os-compatibility\">这里</a>查看，简单来说，在阿里云上最佳系统是Windows Server2019。因为阿里云没有Hyper-V，在没有Hyper-V的情况下，宿主只适配本版本的容器。而当前docker hub上镜像文件比较充足的是2019。</p>\n<p>但如果没有第三方镜像文件要求就还是建议2022，可以在服务器上直接用Edge和安装Windows Terminal，体验要好很多。</p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>添加DockerMsftProvider</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Module</span> <span class=\"literal\">-Name</span> DockerMsftProvider <span class=\"literal\">-Repository</span> PSGallery <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是新环境，会提示安装Nuget，输入<code>Y</code>同意：</p>\n<img src=\"/blog/2022/09/30/suit-up-windows-server/install-nuget-prompt.png\" class=\"\" title=\"Install Nuget Prompt\">\n\n<p>最后安装docker</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Package</span> <span class=\"literal\">-Name</span> docker <span class=\"literal\">-ProviderName</span> DockerMsftProvider <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步会比较慢，主要是因为服务器在海外，需要多给点耐心，也许要重试几次。</p>\n<p>安装完成后，<code>C:\\Program Files\\Docker</code>会被添加进系统Path变量，需要重启后才生效。<br>如果不想重启，我们可以把它<a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables#saving-environment-variables-with-setenvironmentvariable\">添加到用户Path变量</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$dockerPath</span> = <span class=\"built_in\">Split-Path</span> (<span class=\"built_in\">Get-Command</span> docker).Source</span><br><span class=\"line\"><span class=\"variable\">$userPath</span> = [<span class=\"type\">Environment</span>]::GetEnvironmentVariable(<span class=\"string\">&quot;PATH&quot;</span>, <span class=\"string\">&quot;User&quot;</span>) + [<span class=\"type\">IO.Path</span>]::PathSeparator + <span class=\"variable\">$dockerPath</span></span><br><span class=\"line\">[<span class=\"type\">Environment</span>]::SetEnvironmentVariable(<span class=\"string\">&quot;Path&quot;</span>, <span class=\"variable\">$userPath</span>, <span class=\"string\">&quot;User&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动docker服务\"><a href=\"#启动docker服务\" class=\"headerlink\" title=\"启动docker服务\"></a>启动docker服务</h3><p>如果<code>Docker Engine</code>服务没有自动启动，手动启动它。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Start-Service</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证docker\"><a href=\"#验证docker\" class=\"headerlink\" title=\"验证docker\"></a>验证docker</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\Users\\Administrator&gt; docker run <span class=\"literal\">--rm</span> hello<span class=\"literal\">-world</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class=\"line\">latest: Pulling from library/hello<span class=\"literal\">-world</span></span><br><span class=\"line\"><span class=\"number\">09629875</span>cd6e: Pull complete</span><br><span class=\"line\"><span class=\"number\">7838</span>a6eb98a6: Pull complete</span><br><span class=\"line\"><span class=\"number\">1</span>c2e00cf48a3: Pull complete</span><br><span class=\"line\">Digest: sha256:<span class=\"number\">62</span>af9efd515a25f84961b70f973a798d2eca956b1b2b026d0a4a63a3b0b6a3f2</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> hello<span class=\"literal\">-world</span>:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> <span class=\"number\">1</span>. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> <span class=\"number\">2</span>. The Docker daemon pulled the <span class=\"string\">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class=\"line\">    (windows<span class=\"literal\">-amd64</span>, nanoserver<span class=\"literal\">-ltsc2022</span>)</span><br><span class=\"line\"> <span class=\"number\">3</span>. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> <span class=\"number\">4</span>. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To <span class=\"keyword\">try</span> something more ambitious, you can run a Windows Server container with:</span><br><span class=\"line\"> <span class=\"built_in\">PS</span> C:\\&gt; docker run <span class=\"literal\">-it</span> mcr.microsoft.com/windows/servercore:ltsc2022 powershell</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/<span class=\"built_in\">get-started</span>/</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"腾讯云认证培训的学习资料","url":"/blog/2019/03/18/tencentcloudxuexi/","content":"<p>腾讯云认证培训的学习有下面几个途径。</p>\n<h3 id=\"腾讯云产品文档\"><a href=\"#腾讯云产品文档\" class=\"headerlink\" title=\"腾讯云产品文档\"></a>腾讯云产品文档</h3><p>视频的更新周期较长，网上外站查到的资料或过期或有误，还有什么比<a href=\"https://cloud.tencent.com/document/product\"><strong>官方文档</strong></a>更权威的呢？</p>\n<h3 id=\"腾讯云学院\"><a href=\"#腾讯云学院\" class=\"headerlink\" title=\"腾讯云学院\"></a>腾讯云学院</h3><p>培训云学院上有所有人都可以看的<a href=\"https://cloud.tencent.com/developer/edu/courses?cid=10014\"><strong>公开视频</strong></a>，如果觉得文档属于工具类，需要时才查看，或者觉得啃的无聊了，可以看看这个。</p>\n<h3 id=\"腾讯云合作伙伴学院\"><a href=\"#腾讯云合作伙伴学院\" class=\"headerlink\" title=\"腾讯云合作伙伴学院\"></a>腾讯云合作伙伴学院</h3><p>如果有腾讯云合作伙伴主账号或员工账号，可以看这个有针对性的<a href=\"https://cloud.tencent.com/developer/partner/courses?cid=102&p=1\"><strong>合作伙伴视频</strong></a>。需要使用合作伙伴账号登录后才可观看。</p>\n<p>最好搭配视频PPT材料食用。注意：PPT材料同样需要登录合作伙伴账号后才可查看。</p>\n<ol>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1167\">云计算基础介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1170\">云服务器产品介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1173\">网络产品介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1176\">CDN产品介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1179\">云存储产品介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1182\">云数据库产品介绍</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/partner/page/material/1017/1185\">安全产品介绍</a></li>\n</ol>\n<h3 id=\"腾讯云合作伙伴大学\"><a href=\"#腾讯云合作伙伴大学\" class=\"headerlink\" title=\"腾讯云合作伙伴大学\"></a>腾讯云合作伙伴大学</h3><p>已经有了腾讯云合作伙伴学院，为什么还要上腾讯云合作伙伴大学呢？</p>\n<p>原因很简单，因为这里有帮助最大的<a href=\"http://tencentcloudxuexi.com/exam.php?a=myExam\"><strong>模拟考试</strong></a>。</p>\n<p>注册合作伙伴大学账号需要填入合作伙伴账号的APPID（不是账号ID哦），可在<a href=\"https://console.cloud.tencent.com/developer\"><strong>账号信息</strong></a>中查看。</p>\n<h3 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p>最后，在学习中，最好创建自己的思维导图来帮助记忆。不要去看别人的，别人写的是别人的思路，对你没有帮助。要自己写，写的过程是一种提炼，看的过程是一种记忆，强烈推荐。</p>\n<h3 id=\"云-社区\"><a href=\"#云-社区\" class=\"headerlink\" title=\"云+社区\"></a>云+社区</h3><p>当遇上问题时，可以先去云+社区的<a href=\"https://cloud.tencent.com/developer/ask\"><strong>问答版块</strong></a>寻找有没有人曾经提过相同的问题。上面的回复者很多是官方人员。</p>\n<p>要养成使用官方资源的习惯，在遇到专业问题时不要百度，百度在专业问题面前就是个坑货，不要再出现魏则西了。</p>\n<h3 id=\"使用学习工具\"><a href=\"#使用学习工具\" class=\"headerlink\" title=\"使用学习工具\"></a>使用学习工具</h3><p>我正在开发一个学习工具，<em>敬请期待咯</em>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"腾讯云对象存储概览","url":"/blog/2022/05/29/tencent-cloud-cos/","content":"<p>对象存储的主要使用场景是不适合放到数据库里的数据，比如底层日志、图片、音频、视频等。</p>\n<p>使用对象存储既简便安全，又可以节省业务带宽，又可以配合cdn加速，价格也不算贵，推荐使用。</p>\n<p>本文以Web端直传实践为例，基于<a href=\"https://cloud.tencent.com/act/event/cos-novice\">腾讯云COS</a>做一个快速概览。</p>\n<h2 id=\"Web端直传实践\"><a href=\"#Web端直传实践\" class=\"headerlink\" title=\"Web端直传实践\"></a>Web端直传实践</h2><h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>假设我们有用户上传图片或视频的需求，通常的做法是在后台服务器起一个服务，用来处理用户上传文件的需求，设置跨域访问限制，上传成功后返回一个指向上传资源的网址。</p>\n<h3 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h3><p>这种做法有一个天生不足，如果用户上传的时间点很集中，并且上传的文件比较大，会挤爆业务宽带。</p>\n<p>而且上传的文件，如果想要使用cdn还需要额外的操作。</p>\n<h3 id=\"使用cos\"><a href=\"#使用cos\" class=\"headerlink\" title=\"使用cos\"></a>使用cos</h3><p>腾讯有<a href=\"https://cloud.tencent.com/document/product/436/9067\">Web端直传实践</a>的文档。</p>\n<p>前端的简易示例文档在<a href=\"https://cloud.tencent.com/document/product/436/9067\">这里</a>，使用<code>cos-js-sdk</code>的文档在<a href=\"https://cloud.tencent.com/document/product/436/11459\">这里</a>。</p>\n<p>Node.js后端的文档在<a href=\"https://cloud.tencent.com/document/product/436/8629\">这里</a>，临时密钥服务的文档在<a href=\"https://github.com/tencentyun/qcloud-cos-sts-sdk\">这里</a>。</p>\n<p>cos控制台需要留意的地方有：</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/document/product/436/13318\">设置跨域访问</a></li>\n</ul>\n<p>尽量不要使用<code>*</code>，使用业务域名。</p>\n<p>前端需要留意的地方有：</p>\n<ul>\n<li>不要使用国外cdn</li>\n</ul>\n<p>在腾讯的文档示例中，<code>cos-auth.min.js</code>是使用的cdn网址<code>https://unpkg.com/cos-js-sdk-v5/demo/common/cos-auth.min.js</code>，在正式环境中<strong>不要</strong>使用<code>unpkg.com</code>，在国内环境经常会无法顺畅访问。</p>\n<p>后端需要留意的地方有：</p>\n<ul>\n<li>权限校验</li>\n</ul>\n<p>在前端向后端请求<a href=\"https://cloud.tencent.com/document/product/436/14048\">临时密钥</a>时，应校验前端权限（比如验证上传的用户身份），否则可能被攻击。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"vscode的登录状态问题","url":"/blog/2023/04/17/troubleshooting-keychain-issues-in-vscode/","content":"<p>其实这是一个已知问题。在vscode的官方文档用户指南中，有一篇<a href=\"https://code.visualstudio.com/docs/editor/settings-sync#_troubleshooting-keychain-issues\">Troubleshooting keychain issues</a>，专门介绍了这个问题。</p>\n<p>问题出现原因是windows的凭据已满，导致无法保存钥匙串。在<a href=\"https://github.com/microsoft/vscode/issues/130893\">issue #130893</a>中第一次被报告。</p>\n<img src=\"/blog/2023/04/17/troubleshooting-keychain-issues-in-vscode/too-many-credentials.png\" class=\"\" title=\"Windows凭据过多\">\n\n<p>解决方法是清理过期的无效凭据，可使用PowerShell命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdkey /list | <span class=\"built_in\">Select-String</span> <span class=\"literal\">-Pattern</span> <span class=\"string\">&quot;LegacyGeneric:target=(vscode.+)&quot;</span> | <span class=\"built_in\">ForEach-Object</span> &#123; cmdkey.exe /delete <span class=\"variable\">$_</span>.Matches.Groups[<span class=\"number\">1</span>].Value &#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["vscode"]},{"title":"windows回收站的工作原理","url":"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/","content":"<p>windows上的回收站功能我们应该都用过，只要不是使用<code>Shift+Delete</code>直接删除，删除的文件或文件夹都会先进入回收站，给我们一次反悔的机会。</p>\n<h2 id=\"显示或隐藏回收站\"><a href=\"#显示或隐藏回收站\" class=\"headerlink\" title=\"显示或隐藏回收站\"></a>显示或隐藏回收站</h2><p>如果你发现桌面上没有回收站图标，可以在这里打开：</p>\n<img src=\"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/show-or-hide.png\" class=\"\" title=\"显示或隐藏回收站\">\n\n<p>如果你使用了Wallpaper Engine之类的桌面，那么可以直接在文件管理器的地址中输入<code>回收站</code>来直接跳转。</p>\n<h2 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h2><p>回收站本质上就是特殊的文件夹。当我们删除一个文件或文件夹时，系统会将其移动到回收站，而不是直接删除。直到用户彻底删除或清空回收站时，系统才会真正删除。而在那之前，随时可以还原被删除的文件。</p>\n<p>在每个磁盘的根目录都有一个名为<code>$Recycle.bin</code>的文件夹，在<code>回收站 属性</code>中可以设置是否开启，以及它的最大占用空间（默认值为磁盘总大小的5%左右）。</p>\n<img src=\"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/property.png\" class=\"\" title=\"回收站 属性\">\n\n<p>每个磁盘下的<code>$Recycle.bin</code>各自维护自己的回收站，而在打开回收站应用时，会将所有磁盘的回收站内容合并显示。</p>\n<img src=\"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/recycle-bin.png\" class=\"\" title=\"合并显示\">\n\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><h3 id=\"分用户存放\"><a href=\"#分用户存放\" class=\"headerlink\" title=\"分用户存放\"></a>分用户存放</h3><p>在<code>$Recycle.bin</code>文件夹下，会分用户来存放被删除的文件。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:/</span><br><span class=\"line\">└── <span class=\"variable\">$Recycle</span>.bin/</span><br><span class=\"line\">    ├── S-1-5-18</span><br><span class=\"line\">    ├── S-1-5-21-3224713530-1295428985-2222104684-1000</span><br><span class=\"line\">    └── S-1-5-21-3224713530-1295428985-2222104684-1001</span><br></pre></td></tr></table></figure>\n<p>目录名称是用户的<a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">SID</a>，在windows中大量使用，可以在注册表<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList</code>中找到每个用户名对应的SID。</p>\n<h3 id=\"个性化文件夹\"><a href=\"#个性化文件夹\" class=\"headerlink\" title=\"个性化文件夹\"></a>个性化文件夹</h3><p>在每个用户目录下，都会有一个<code>desktop.ini</code>，来描述这个文件夹<a href=\"https://learn.microsoft.com/en-us/windows/win32/shell/how-to-customize-folders-with-desktop-ini\">如何显示</a>。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[.ShellClassInfo]</span></span><br><span class=\"line\"><span class=\"attr\">CLSID</span>=&#123;<span class=\"number\">645</span>FF040-<span class=\"number\">5081</span>-<span class=\"number\">101</span>B-<span class=\"number\">9</span>F08-<span class=\"number\">00</span>AA002F954E&#125;</span><br><span class=\"line\"><span class=\"attr\">LocalizedResourceName</span>=@%SystemRoot%\\system32\\shell32.dll,-<span class=\"number\">8964</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"被删除的文件\"><a href=\"#被删除的文件\" class=\"headerlink\" title=\"被删除的文件\"></a>被删除的文件</h3><p>被删除的文件在移动进回收站时，为了避免重名，会被重新命名。生成一个唯一ID后命名为<code>$R&#123;id&#125;.&#123;ext&#125;</code>，扩展名维持原样。然后将元数据存放至<code>$I&#123;id&#125;.&#123;ext&#125;</code>。<br>元数据包括：文件名称，文件原路位置，删除时间，文件大小。基本上就是我们在回收站应用中看到的信息。</p>\n<p>$I文件的结构为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">偏移</th>\n<th align=\"right\">字节</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">0</td>\n<td align=\"right\">4</td>\n<td>$I文件的版本号，win10为2，vista到10之前都为1</td>\n</tr>\n<tr>\n<td align=\"right\">8</td>\n<td align=\"right\">8</td>\n<td>文件的大小</td>\n</tr>\n<tr>\n<td align=\"right\">16</td>\n<td align=\"right\">8</td>\n<td>删除时间</td>\n</tr>\n<tr>\n<td align=\"right\">24</td>\n<td align=\"right\">4</td>\n<td>文件名的长度，版本v2才有这项</td>\n</tr>\n<tr>\n<td align=\"right\">28</td>\n<td align=\"right\">不定长</td>\n<td>文件名</td>\n</tr>\n</tbody></table>\n<p>我们拿<code>BaiduNetdisk_6.8.4.1.exe</code>这个文件来看看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:/</span><br><span class=\"line\">└── $Recycle.bin/</span><br><span class=\"line\">    └── S-1-5-21-3224713530-1295428985-2222104684-1001/</span><br><span class=\"line\">        ├── $IAA5WRG.exe</span><br><span class=\"line\">        ├── $RAA5WRG.exe</span><br><span class=\"line\">        └── desktop.ini</span><br></pre></td></tr></table></figure>\n<p>使用十六进制文本编辑器来查看文件，直接可以使用vscode的<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor\">Hex Editor</a>插件，也可以使用<a href=\"https://mh-nexus.de/en/hxd/\">HxD</a>等工具。推荐使用vscode：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">code <span class=\"string\">&#x27;C:\\$Recycle.Bin\\S-1-5-21-3224713530-1295428985-2222104684-1001&gt;\\$IAA5WRG.exe&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$IAA5WRG.exe</code>的内容为：</p>\n<img src=\"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/$I-struct.png\" class=\"\" title=\"$I文件结构\">\n\n<p>按照上面的结构解析：</p>\n<ul>\n<li>版本号为2</li>\n<li>文件大小为<code>0x026688F0</code>，十进制为40274160，与回收站中显示的<code>39,331 KB</code>一致</li>\n<li>删除时间为<code>0x01D9AA55734E8C90</code>，十进制为133324947967610000，使用<code>w32tm.exe /ntte 133324947967610000</code>转换为<code>2023/6/29 14:46:36</code>，与回收站中显示一致</li>\n<li>文件名长度为<code>0x00000036</code>，十进制为54，表示文件名占了54个unicode，即108个字节</li>\n<li>文件名为<code>C:\\BaiduNetdiskDownload\\记录数据\\BaiduNetdisk_6.8.4.1.exe</code>，包含末尾的<code>0x0000</code>，刚好108个字节</li>\n</ul>\n<h3 id=\"被删除的文件夹\"><a href=\"#被删除的文件夹\" class=\"headerlink\" title=\"被删除的文件夹\"></a>被删除的文件夹</h3><p>再来看看文件夹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">F:/</span><br><span class=\"line\">└── $Recycle.bin/</span><br><span class=\"line\">    └── S-1-5-21-3224713530-1295428985-2222104684-1001/</span><br><span class=\"line\">        ├── $rzg1h6u/</span><br><span class=\"line\">        │   ├── b/</span><br><span class=\"line\">        │   │   └── 1.txt</span><br><span class=\"line\">        │   └── a.txt</span><br><span class=\"line\">        ├── $izg1h6u</span><br><span class=\"line\">        └── desktop.ini</span><br></pre></td></tr></table></figure>\n<p>可以发现，文件夹中的内容原封不动的被移动了过来。</p>\n<p>再看看$I文件。</p>\n<img src=\"/blog/2023/06/29/under-the-hood-of-recycle-bin-on-windows/$I-struct-of-folder.png\" class=\"\" title=\"文件夹的$I文件\">\n\n<p>按照上面的结构解析：</p>\n<ul>\n<li>版本号为2</li>\n<li>文件大小为<code>0x00000001</code>，十进制为1，与回收站中显示的<code>1 KB</code>一致</li>\n<li>删除时间为<code>0X01D9AA5405E4B630</code>，十进制为133324941836990000，使用<code>w32tm.exe /ntte 133324941836990000</code>转换为<code>2023/6/29 14:36:23</code>，与回收站中显示一致</li>\n<li>文件名长度为<code>0x00000009</code>，十进制为9，表示文件名占了9个unicode，即18个字节</li>\n<li>文件名为<code>F:\\tmp\\a</code>，包含末尾的<code>0x0000</code>，刚好18个字节</li>\n</ul>\n<h2 id=\"深入\"><a href=\"#深入\" class=\"headerlink\" title=\"深入\"></a>深入</h2><h3 id=\"为什么回收站需要每个分区都有一个？\"><a href=\"#为什么回收站需要每个分区都有一个？\" class=\"headerlink\" title=\"为什么回收站需要每个分区都有一个？\"></a>为什么回收站需要每个分区都有一个？</h3><p>回收站本质上是一个文件夹，将文件删除进回收站的本质将文件是移动到回收站。</p>\n<p>同一分区内的文件移动本质上不会改变文件的物理位置，只是改变分区表中文件的位置指向信息，这样可以极大的加速文件删除和恢复的操作。</p>\n<h3 id=\"为什么windows回收站不允许展开文件夹呢？\"><a href=\"#为什么windows回收站不允许展开文件夹呢？\" class=\"headerlink\" title=\"为什么windows回收站不允许展开文件夹呢？\"></a>为什么windows回收站不允许展开文件夹呢？</h3><p>我理解不允许展开的原因是删除一整个文件夹是一个可回退的原子操作，所以要还原就还原整个文件夹，不允许还原部分文件。</p>\n<p>而如果允许展开，就很容易给用户一个错觉：允许还原文件夹中的某单个文件。但右键后又发现不能这样操作，容易给用户造成困惑。</p>\n<h3 id=\"macOS的垃圾篓有什么不同吗？\"><a href=\"#macOS的垃圾篓有什么不同吗？\" class=\"headerlink\" title=\"macOS的垃圾篓有什么不同吗？\"></a>macOS的垃圾篓有什么不同吗？</h3><p>macOS的垃圾篓和windows回收站一样，本质上也是多个文件夹的组合。但位置在<code>/Users/username/.Trash/</code>和<code>/Volumes/LOCALDRIVE/.Trashes/</code>。</p>\n<p>另外一个很大的不同是它没有像windows那样将删除的文件更名为<code>$I&#123;id&#125;</code>，而是保持了原名称。所以如果连续删除两个重名文件，后删除的那个会被自动重命名。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"在Hyper-V上使用Ubuntu","url":"/blog/2023/04/20/use-ubuntu-on-hyper-v/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>微软在Hyper-V的<a href=\"https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine\">快捷创建（quick create）</a>中<a href=\"https://learn.microsoft.com/zh-cn/windows-server/virtualization/hyper-v/supported-ubuntu-virtual-machines-on-hyper-v\">内置了一些Ubuntu的发行版</a>:</p>\n<img src=\"/blog/2023/04/20/use-ubuntu-on-hyper-v/quick-create.png\" class=\"\" title=\"快速创建\">\n\n<p>微软优化过的Ubuntu镜像与在Ubuntu官网下载的标准镜像有所区别，Ubuntu的<a href=\"https://ubuntu.com/blog/optimised-ubuntu-desktop-images-available-in-microsoft-hyper-v-gallery\">这篇文章</a>和微软的<a href=\"https://blogs.windows.com/windowsdeveloper/2018/09/17/run-ubuntu-virtual-machines-made-even-easier-with-hyper-v-quick-create/\">这篇文章</a>简单的介绍了下。</p>\n<p>如果使用标准镜像，要打开<a href=\"https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/learn-more/use-local-resources-on-hyper-v-virtual-machine-with-vmconnect\">增强模式</a>的话需要做很多额外操作，可参见<a href=\"https://gist.github.com/milnak/54e662f88fa47a5d3a317edb712f957e\">这篇gist</a>。</p>\n<p>微软之前使用了一个脚本来自动化这些操作，项目在<a href=\"https://github.com/microsoft/linux-vm-tools\">linux-vm-tool</a>，目前已经归档。只支持了Ubuntu 16.04和18.04。</p>\n<p>热心网友<a href=\"https://github.com/Hinara\">Hinara</a>分叉了这个项目，<a href=\"https://github.com/Hinara/linux-vm-tools/tree/ubuntu20-04/ubuntu\">支持了</a>Ubuntu 20.04和22.04。上面那篇gist里就是使用这个项目的脚本来安装增强模式的。</p>\n<p>如无特别需求，建议使用微软优化过的镜像。除了更方便外，体感上微软优化的镜像运行起来要更快一些。</p>\n<h2 id=\"显示分辨率\"><a href=\"#显示分辨率\" class=\"headerlink\" title=\"显示分辨率\"></a>显示分辨率</h2><p>默认Ubuntu的显示分辨率是1364 x 768，这个分辨率在现在的显示器上看起来很小。</p>\n\n\n<h3 id=\"标准镜像\"><a href=\"#标准镜像\" class=\"headerlink\" title=\"标准镜像\"></a>标准镜像</h3><p>如果是使用的标准镜像，可以修改grub来设置分辨率。</p>\n<p>使用<code>sudo nano /etc/default/grub</code>将<code>grub</code>中的<code>GRUB_CMDLINE_LINUX_DEFAULT</code>改为</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class=\"string\">&quot;quiet splash video=hyperv_fb:1920x1080&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微软镜像\"><a href=\"#微软镜像\" class=\"headerlink\" title=\"微软镜像\"></a>微软镜像</h3><p>如果使用的是微软优化过的镜像，在连接时选择全屏就行。</p>\n<img src=\"/blog/2023/04/20/use-ubuntu-on-hyper-v/resolution-on-connecting.png\" class=\"\" title=\"选择分辨率\">\n\n<h2 id=\"硬盘扩容\"><a href=\"#硬盘扩容\" class=\"headerlink\" title=\"硬盘扩容\"></a>硬盘扩容</h2><p>虚拟硬盘文件默认会放在<code>C:\\ProgramData\\Microsoft\\Windows\\Virtual Hard Disks\\</code>，如果C盘空间不够可以挪到其它盘。在<code>Hyper-V 设置</code>中可以修改虚拟硬盘的默认文件夹。</p>\n<p>有需求一定记得先扩容，否则创建完检查点就不允许编辑了。</p>\n<ol>\n<li><p>先将虚拟机关机。</p>\n</li>\n<li><p>编辑硬盘驱动器的虚拟硬盘，官方内建Ubuntu镜像默认硬盘大小是12G，完全不够用。扩展至你想要的大小，这里是动态大小，大点没关系，比如200G。</p>\n</li>\n<li><p>只扩展虚拟硬盘文件并不会直接应用到Ubuntu系统，启动并连接虚拟机可以看到：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">user@ubuntu:~$ sudo fdisk -l</span><br><span class=\"line\">GPT PMBR size mismatch (25165823 != 419430399) will be corrected by write.</span><br><span class=\"line\">The backup GPT table is not on the end of the device.</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sda: 200 GiB, 214748364800 bytes, 419430400 sectors</span><br><span class=\"line\">Disk model: Virtual Disk    </span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel <span class=\"built_in\">type</span>: gpt</span><br><span class=\"line\">Disk identifier: F86D133B-CDB4-4EAF-A9AA-0F4B0A8ADC00</span><br><span class=\"line\"></span><br><span class=\"line\">Device      Start      End  Sectors  Size Type</span><br><span class=\"line\">/dev/sda1  227328 25165790 24938463 11.9G Linux filesystem</span><br><span class=\"line\">/dev/sda14   2048    10239     8192    4M BIOS boot</span><br><span class=\"line\">/dev/sda15  10240   227327   217088  106M EFI System</span><br><span class=\"line\"></span><br><span class=\"line\">Partition table entries are not <span class=\"keyword\">in</span> disk order.</span><br></pre></td></tr></table></figure>\n\n<p>还需要扩展分区。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install cloud-guest-utils</span><br><span class=\"line\">sudo growpart /dev/sda 1</span><br><span class=\"line\">sudo resize2fs /dev/sda1</span><br></pre></td></tr></table></figure>\n\n<p>注意<code>/dev/sda 1</code>中的1前面有个空格，这是分区号，不是分区名。</p>\n<ol start=\"4\">\n<li>扩容完成<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">user@ubuntu:~$ <span class=\"built_in\">df</span> -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">tmpfs           192M  1.6M  190M   1% /run</span><br><span class=\"line\">/dev/sda1       194G  6.5G  188G   4% /</span><br><span class=\"line\">tmpfs           956M     0  956M   0% /dev/shm</span><br><span class=\"line\">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class=\"line\">/dev/sda15      105M  5.3M  100M   5% /boot/efi</span><br><span class=\"line\">tmpfs           192M   84K  192M   1% /run/user/127</span><br><span class=\"line\">tmpfs           192M  172K  191M   1% /run/user/1000</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h2><p>Ubuntu桌面版默认是不支持远程登录的，为了可以从宿主机使用<code>ssh</code>命令登录虚拟机，需要安装<code>openssh-server</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install openssh-server</span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ip addr</code>查看虚拟机的IP地址，然后在宿主机使用<code>ssh</code>命令登录。<br>也可直接使用<code>ssh user@ubuntu</code>这种形式，<code>user</code>为用户名，<code>ubuntu</code>为虚拟机中ubuntu的电脑名。</p>\n<h2 id=\"嵌套虚拟化\"><a href=\"#嵌套虚拟化\" class=\"headerlink\" title=\"嵌套虚拟化\"></a>嵌套虚拟化</h2><p>我们可以<a href=\"https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/nested-virtualization\">在Hyper-V虚拟机上再运行一个Hyper-V虚拟机</a>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-VMProcessor</span> <span class=\"literal\">-VMName</span> &lt;VMName&gt; <span class=\"literal\">-ExposeVirtualizationExtensions</span> <span class=\"variable\">$true</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"在开发中使用代理","url":"/blog/2020/12/04/use-vpn-for-development/","content":"<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><p>Windows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://proxy.myproxy.com</span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=https://proxy.myproxy.com</span><br><span class=\"line\">python main.py</span><br></pre></td></tr></table></figure>\n\n<p>Linux&#x2F;OS X:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://proxy.myproxy.com</span><br><span class=\"line\">export https_proxy=https://proxy.myproxy.com</span><br><span class=\"line\">python main.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080</span><br></pre></td></tr></table></figure>\n\n<p>如果要取消代理，消除http.proxy配置项就好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://LanguidSquid:Password1@my.company.com:8080</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://LanguidSquid:Password1@my.company.com:8080</span><br></pre></td></tr></table></figure>\n\n<p>取消代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config delete http-proxy</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"视频转码","url":"/blog/2022/06/18/video-transcoder/","content":"<p>你还在使用难用的<a href=\"https://ffmpeg.org/\">ffmpeg</a>命令行吗，本期推荐的佳软是<a href=\"https://handbrake.fr/\">HandBrake</a>。它提供了方便的UI界面，不再需要去查ffmpeg的文档了。</p>\n<p>它当然也支持<a href=\"https://handbrake.fr/docs/en/1.5.0/cli/cli-options.html\">命令行</a>，</p>\n<p>使用时一般不需要像ffmpeg一样<a href=\"https://ffmpeg.org/ffmpeg.html#Main-options\">指定各种参数</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i &#123;input&#125;.mov -c:v libx264 -c:a aac -vf format=yuv420p -movflags +faststart &#123;output&#125;.mp4</span><br></pre></td></tr></table></figure>\n\n<p>直接使用<a href=\"https://handbrake.fr/docs/en/1.5.0/cli/cli-options.html\">默认设置</a>通常就会得到想到的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">handbrakecli -i &#123;input&#125;.mov -o &#123;output&#125;.mp4</span><br></pre></td></tr></table></figure>\n\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"VirtualBox在win上特别卡","url":"/blog/2023/02/01/virtualbox-running-slow/","content":"<p>想在Windows用Ubuntu有很多种方式：</p>\n<ul>\n<li>wsl 2</li>\n<li>docker</li>\n<li>VirtualBox</li>\n<li>Hyper-V</li>\n</ul>\n<p>最简单的当然是wsl 2，但wsl 2不够隔离，很容易影响原系统，不适用玩耍。</p>\n<p>docker虽然方便，但不够完整，更适合用来运行应用。</p>\n<p>剩下的选择就是分别以<a href=\"https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/\">Hyper-V</a>和VirtualBox为代表的第1类和第2类的<a href=\"https://zh.wikipedia.org/wiki/Hypervisor\">hypervisor</a>。</p>\n<p>为了通用性，当然优先选择第2类的vbox。</p>\n<p>但使用中发现vbox中运行的ubuntu贼卡，怎么给CPU和内存都没用。</p>\n<h2 id=\"无解的性能大幅下降\"><a href=\"#无解的性能大幅下降\" class=\"headerlink\" title=\"无解的性能大幅下降\"></a>无解的性能大幅下降</h2><p>在网上以<code>windows virtualbox slow</code>为关键词搜了下，<a href=\"https://www.wintips.org/fix-virtualbox-running-very-slow-in-windows-10-11/\">第一个链接</a>就说明了答案：<a href=\"https://docs.oracle.com/en/virtualization/virtualbox/6.1/admin/AdvancedTopics.html#hyperv-support\">开启Hyper-V会导致VirtualBox性能大幅降低</a>。</p>\n<p>因为要运行以wsl 2为后端的docker，所以打开了hyper-v。虽然VirtualBox能兼容Hyper-V，当半虚拟化接口使用的是Hyper-V时，右下角会出现绿色海龟：</p>\n<img src=\"/blog/2023/02/01/virtualbox-running-slow/green-turtle.png\" class=\"\" title=\"绿色海龟\">\n\n<p>但此时性能会受到极大影响，并且<a href=\"https://forums.virtualbox.org/viewtopic.php?f=1&t=106620#p521271\">无法使用嵌套VT-x&#x2F;AMD-V</a>。</p>\n<p>所以当开启Hyper-V时，还是推荐使用<a href=\"https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine\">hyper-v的虚拟机</a>。</p>\n<h2 id=\"使用Hyper-V\"><a href=\"#使用Hyper-V\" class=\"headerlink\" title=\"使用Hyper-V\"></a>使用Hyper-V</h2><p>参见这篇文章：<a href=\"/blog/2023/04/20/use-ubuntu-on-hyper-v/\" title=\"在Hyper-V上使用Ubuntu\">在Hyper-V上使用Ubuntu</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"修复Visual Studio Installer下载慢的问题","url":"/blog/2021/02/22/vs-download/","content":"<p>微软在更新Visual Studio时，使用的是<code>download.visualstudio.microsoft.com</code>这个域名。</p>\n<p>微软作为全球第一大操作系统的开发商，理应在网络方面毫无神奇的是，国内经常会对这个域名解析错误。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们可以先ping一下，看看使用运营商的默认DNS服务器会解析成什么ip。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; ping download.visualstudio.microsoft.com</span><br><span class=\"line\"></span><br><span class=\"line\">正在 Ping download.visualstudio.microsoft.com [192.229.232.200] 具有 32 字节的数据:</span><br><span class=\"line\">来自 192.229.232.200 的回复: 字节=32 时间=198ms TTL=51</span><br><span class=\"line\">来自 192.229.232.200 的回复: 字节=32 时间=204ms TTL=51</span><br><span class=\"line\">来自 192.229.232.200 的回复: 字节=32 时间=202ms TTL=51</span><br><span class=\"line\">请求超时。</span><br></pre></td></tr></table></figure>\n\n<p>在<a href=\"https://ip138.com/\">ip138</a>或<a href=\"https://www.ipip.net/ip.html\">ipip</a>查询可知<code>192.229.232.200</code>这个ip属于亚太地区，并不在国内，所以连接速度才会那么慢。</p>\n<h2 id=\"查询dns\"><a href=\"#查询dns\" class=\"headerlink\" title=\"查询dns\"></a>查询dns</h2><p>我们需要查询到<code>download.visualstudio.microsoft.com</code>在大陆的ip，祭出神器：<a href=\"https://tool.chinaz.com/dns/\">站长工具dns查询</a>。</p>\n<img src=\"/blog/2021/02/22/vs-download/chinaz_dns.png\" class=\"\" title=\"站长工具dns查询\">\n\n<p>可以看到微软在大陆是有节点的：<br><code>湖南[联通]  112.91.133.72   [广东省汕头市 联通]</code></p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>修改c:\\Windows\\System32\\drivers\\etc\\hosts，完工。</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>这套操作可以适用于任何在大陆有节点但DNS解析到海外的所有问题。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"vsto插件被自动禁用","url":"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/","content":"<p>首先看一下这个文档<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/debugging-office-projects\">Debug Office projects</a>。</p>\n<h2 id=\"自动禁用\"><a href=\"#自动禁用\" class=\"headerlink\" title=\"自动禁用\"></a>自动禁用</h2><p>在<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/debugging-office-projects#debug-disabled-add-ins\">Debug disabled add-ins</a>一节有提到，如果插件没有按照期望的行为，会被禁用。<br>禁用分两种，硬禁用和软禁用。</p>\n<p>如果是插件的问题导致excel异常退出，那会被视作大麻烦而硬禁用。此时插件会出现在被禁用（Disabled）插件里。<br>如果插件只是抛出异常但并没有导致excel退出，比如在Startup事件处理抛出异常，则会被软禁用。只是改变<code>LoadBehavior</code>，让插件并不会启动时加载，归为非活跃（Inactive）插件。</p>\n<h3 id=\"硬禁用\"><a href=\"#硬禁用\" class=\"headerlink\" title=\"硬禁用\"></a>硬禁用</h3><p>如果在插件正在前台（比如弹出一个对话框，并且阻塞式的在干活），用户此时右键任务栏关闭excel，</p>\n<img src=\"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/not-resposing.png\" class=\"\" title=\"未响应\">\n<img src=\"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/collecting-info.png\" class=\"\" title=\"收集信息\">\n<p>因为插件在前台，会被记录下来。</p>\n<p>当再次启动excel时，插件就会被视作大麻烦而提示用户要不要禁用。</p>\n<img src=\"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/hard-disabling.png\" class=\"\" title=\"硬禁用\">\n\n<p>被禁用后，需要到<code>禁用项目</code>里去打开</p>\n<img src=\"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/re-enable-hard-disabling.png\" class=\"\" title=\"取消硬禁用\">\n\n<h3 id=\"软禁用\"><a href=\"#软禁用\" class=\"headerlink\" title=\"软禁用\"></a>软禁用</h3><p>软禁用则是插件抛出了未影响到excel的异常，比如在<code>Startup</code>事件处理中直接抛异常：</p>\n<img src=\"/blog/2023/07/24/vsto-add-ins-getting-disabled-automatically/throw-in-startup.png\" class=\"\" title=\"在startup抛异常\">\n\n<p>当出现这个对话框时，插件就已经被软禁用，无须提示用户操作。</p>\n<p>如果只是被设为了非活动，去<code>COM加载项</code>里打开就好。或者直接把注册表中的<code>LoadBehavior</code>从2改回3。这里可以查看<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/registry-entries-for-vsto-add-ins?view=vs-2022#LoadBehavior\">LoadBehavior values</a>。</p>\n<h2 id=\"注册表\"><a href=\"#注册表\" class=\"headerlink\" title=\"注册表\"></a>注册表</h2><p>关于<code>LoadBehavior</code>是在插件的注册表中设定的，可以参见<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/registry-entries-for-vsto-add-ins?view=vs-2022\">Registry entries for VSTO Add-ins</a>。<br>比如：<code>计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\Excel\\Addins\\RzCloudExcelAddin</code>。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>在<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/debugging-office-projects?view=vs-2022&redirectedfrom=MSDN#troubleshoot-startup-errors-by-using-a-log-file-and-error-messages\">Troubleshoot startup errors by using a log file and error messages</a> 一节中，有提到如何打开调试。</p>\n<p>如果要将错误信息显示在消息框里，可以添加环境变量<code>VSTO_SUPPRESSDISPLAYALERTS</code>，设置为0。在使用Visual Studio时，也会起到设置<code>VSTO_SUPPRESSDISPLAYALERTS</code>为0的效果。</p>\n<p>如果要存文件，则添加环境变量<code>VSTO_LOGALERTS</code>设置为1。<br>log文件的名字是<code>$&#123;addin-name&#125;.vsto.log</code>，放在manifest同目录下。<br>如果没有manifest，则放在<code>$env:temp</code>目录下。<br>注意日志文件的编码格式是<code>UTF-16 LE</code>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"vsto开发随笔","url":"/blog/2022/12/01/vsto-dev/","content":"<h2 id=\"VSTOInstaller-exe工具\"><a href=\"#VSTOInstaller-exe工具\" class=\"headerlink\" title=\"VSTOInstaller.exe工具\"></a>VSTOInstaller.exe工具</h2><p><a href=\"https://learn.microsoft.com/zh-cn/visualstudio/vsto/deploying-an-office-solution-by-using-clickonce?view=vs-2022&tabs=csharp#Custom\">VSTOInstaller.exe</a>是Office解决方案的安装程序工具，可以用它来安装和卸载Office解决方案。</p>\n<p>安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\VSTOInstaller.exe /I http://yourdomain.com/addin.vsto</span><br></pre></td></tr></table></figure>\n\n<p>使用&#x2F;s可静默执行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\VSTOInstaller.exe /U http://yourdomain.com/addin.vsto /S</span><br></pre></td></tr></table></figure>\n\n<p>它的位置默认在<code>%commonprogramfiles%\\microsoft shared\\VSTO\\10.0\\VSTOInstaller.exe</code>。</p>\n<p><strong>注意</strong>，是<code>%commonprogramfiles%</code>，不是<code>%commonprogramfiles(x86)%</code>。</p>\n<p>如果错误的使用了<code>%commonprogramfiles(x86)%</code>，会提示错误：</p>\n<img src=\"/blog/2022/12/01/vsto-dev/VSTOInstall-error.png\" class=\"\" title=\"VSTOInstaller运行错误\">\n\n<p>其实换回<code>%commonprogramfiles%</code>就可以了，但已经花了时间去查找解决方案就还是记录一下。</p>\n<p>安装<a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48217\">vstor_redist.exe</a>就可正常运行<code>%commonprogramfiles(x86)%</code>下的VSTOInstaller。使用命令<code>.\\vstor_redist.exe /q /norestart</code>可静默安装。</p>\n<h2 id=\"安装时的安全认证\"><a href=\"#安装时的安全认证\" class=\"headerlink\" title=\"安装时的安全认证\"></a>安装时的安全认证</h2><p>使用<code>VSTOInstaller.exe</code>安装office解决方案时，需要解决方案通过安全认证才能安装。</p>\n<p>最官方的安全认证方式当然是注册一个微软认证的<a href=\"https://learn.microsoft.com/zh-cn/windows/apps/publish/partner-center/account-types-locations-and-fees\">开发者账户</a>，使用开发者账户来发布应用。但咱们做的vsto插件是内部使用，所以跳过这个最麻烦的方案。</p>\n<p>除开官方答案，还有两种方式来通过：</p>\n<ul>\n<li>打开信任提示</li>\n<li>添加签名到受信任</li>\n</ul>\n<h3 id=\"打开信任提示\"><a href=\"#打开信任提示\" class=\"headerlink\" title=\"打开信任提示\"></a>打开信任提示</h3><p>我们可以让用户<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior\">开启信任提示</a>，这样就可以安装非认证应用。</p>\n<p>可以使用脚本来实现，不过请注意，修改注册表<strong>需要管理员权限</strong>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Register-Registry</span></span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$path</span> = <span class=\"string\">&quot;HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\.NETFramework\\Security\\TrustManager&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">$id</span> = <span class=\"string\">&quot;PromptingLevel&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">New-Item</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$path</span> <span class=\"literal\">-Name</span> <span class=\"variable\">$id</span> <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$registryPath</span> = <span class=\"string\">&quot;&#123;0&#125;\\&#123;1&#125;&quot;</span> <span class=\"operator\">-f</span> <span class=\"variable\">$path</span>, <span class=\"variable\">$id</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;MyComputer&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;LocalIntranet&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;TrustedSites&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;Internet&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;UntrustedSites&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$path</span> = <span class=\"string\">&quot;HKLM:\\SOFTWARE\\Microsoft\\.NETFramework\\Security\\TrustManager&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">$id</span> = <span class=\"string\">&quot;PromptingLevel&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">New-Item</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$path</span> <span class=\"literal\">-Name</span> <span class=\"variable\">$id</span> <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$registryPath</span> = <span class=\"string\">&quot;&#123;0&#125;\\&#123;1&#125;&quot;</span> <span class=\"operator\">-f</span> <span class=\"variable\">$path</span>, <span class=\"variable\">$id</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;MyComputer&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;LocalIntranet&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;TrustedSites&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;Internet&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">  <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$registryPath</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;UntrustedSites&quot;</span> <span class=\"literal\">-Value</span> <span class=\"string\">&quot;Enabled&quot;</span> <span class=\"literal\">-PropertyType</span> String <span class=\"literal\">-Force</span> | <span class=\"built_in\">Out-Null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加签名到受信任\"><a href=\"#添加签名到受信任\" class=\"headerlink\" title=\"添加签名到受信任\"></a>添加签名到受信任</h3><p>将应用签名证书的公钥给用户，让用户添加至受信任区域。</p>\n<p>这个方案比上面的打开信任提示要好，打开提示后用户还是需要每次都点一下确认，而信任签名后所有操作都可以是静默无感的。</p>\n<p>操作方式可参考<a href=\"/blog/2022/11/25/windows-certificate/#certmgr-exe（证书管理器工具）\">certmgr.exe（证书管理器工具）</a>。</p>\n<h2 id=\"自更新\"><a href=\"#自更新\" class=\"headerlink\" title=\"自更新\"></a>自更新</h2><p>自更新也有两种方式，</p>\n<ul>\n<li>ClickOnce自带的更新</li>\n<li>在程序中更新</li>\n</ul>\n<h3 id=\"ClickOnce自带的更新\"><a href=\"#ClickOnce自带的更新\" class=\"headerlink\" title=\"ClickOnce自带的更新\"></a>ClickOnce自带的更新</h3><p>我们在发布时，新更新频率设为<code>每次运行自定义项时进行检查</code>就搞定。</p>\n<p>不管是打开信任提示还是添加签名到受信任，都可以使用这种方式更新。</p>\n<h3 id=\"在程序中更新\"><a href=\"#在程序中更新\" class=\"headerlink\" title=\"在程序中更新\"></a>在程序中更新</h3><p>想要在程序中更新，用<code>打开信任提示</code>的方案就行不通了，<a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.deployment.application.applicationdeployment.checkforupdateasync\">ApplicationDeployment.CheckForUpdateAsync</a>会抛出异常<code>User has refused to grant required permissions to the application.</code>。只能使用添加签名到信任的方案。</p>\n<p>但是，在使用<a href=\"(https://learn.microsoft.com/en-us/dotnet/api/system.deployment.application.applicationdeployment.updateasync)\">ApplicationDeployment.UpdateAsync</a>更新后，<code>ApplicationDeployment.IsNetworkDeployed</code>变成了false。</p>\n<p>网上有回复说要需要将vsto的网址加入<strong>信任网站名单</strong>。</p>\n<p>可使用<strong>管理员权限</strong>运行ps脚本：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Add-TrustSite</span></span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$UserRegPath</span> = <span class=\"string\">&quot;HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">$DomainName</span> = <span class=\"string\">&quot;yourdomain.com&quot;</span> <span class=\"comment\"># 注意这里只能是一级域名</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"operator\">-not</span> (<span class=\"built_in\">Test-Path</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$UserRegPath</span>\\<span class=\"variable\">$DomainName</span>&quot;</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"variable\">$null</span> = <span class=\"built_in\">New-Item</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$UserRegPath</span>\\<span class=\"variable\">$DomainName</span>&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Set-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$UserRegPath</span>\\<span class=\"variable\">$DomainName</span>&quot;</span> <span class=\"literal\">-Name</span> http <span class=\"literal\">-Value</span> <span class=\"number\">2</span> <span class=\"literal\">-Type</span> DWord</span><br><span class=\"line\">  <span class=\"built_in\">Set-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$UserRegPath</span>\\<span class=\"variable\">$DomainName</span>&quot;</span> <span class=\"literal\">-Name</span> https <span class=\"literal\">-Value</span> <span class=\"number\">2</span> <span class=\"literal\">-Type</span> DWord  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而试下并没有什么卵用，该false还是false。</p>\n<p>终于找到一个<a href=\"https://stackoverflow.com/questions/39619047/updating-clickonce-vsto-addin-from-within-the-office-itself-does-not-update-the\">相同问题的提问</a>，里面的最佳回复指向了微软的<a href=\"https://social.msdn.microsoft.com/Forums/vstudio/en-US/5370eb94-1ed0-457c-8a39-40ff6d871c12/vsto-clickonce-and-auto-update\">一个问答</a>与<a href=\"https://learn.microsoft.com/zh-cn/archive/blogs/krimakey/click-once-forced-updates-in-vsto-some-things-we-dont-recommend-using-that-you-might-consider-anyway\">博客</a>。</p>\n<p>长求总就是，不要在程序中使用ClickOnce Api比如<code>ApplicationDeployment.UpdateAsync</code>来进行程序中更新，但可以使用<code>VSTOInstaller.exe</code>。参见<a href=\"https://learn.microsoft.com/zh-cn/archive/blogs/krimakey/click-once-forced-updates-in-vsto-ii-a-fuller-solution\">这篇博客</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"在vsto中使用webview2","url":"/blog/2022/12/06/webview2-in-vsto/","content":"<h2 id=\"用户数据文件夹-UDF\"><a href=\"#用户数据文件夹-UDF\" class=\"headerlink\" title=\"用户数据文件夹(UDF)\"></a>用户数据文件夹(UDF)</h2><p>Webview2需要使用<a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/concepts/user-data-folder\">user data folder(UDF)</a>，通常默认的UDF是在.exe同目录。</p>\n<p>但vsto比较特殊，UDF的默认目录是<code>C:\\Program Files (x86)\\Microsoft Office\\Root\\Office16\\EXCEL.EXE.WebView2</code>。vsto没有权限访问这个目录。</p>\n<p>所以在vsto中使用webview2，必须要设定UDF，比如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> homeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);</span><br><span class=\"line\"><span class=\"built_in\">string</span> userDataFolder = Path.Combine(homeDir, <span class=\"string\">&quot;ExcelAddin/UDF&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> env = <span class=\"keyword\">await</span> CoreWebView2Environment.CreateAsync(<span class=\"literal\">null</span>, userDataFolder);</span><br><span class=\"line\"><span class=\"keyword\">await</span> webView.EnsureCoreWebView2Async(env);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Administrator账户\"><a href=\"#Administrator账户\" class=\"headerlink\" title=\"Administrator账户\"></a>Administrator账户</h3><p>但要注意这里有个特例：Administrator账户。</p>\n<p>如果用户是Administrator，Webview2界面会一直白屏。调试发现是<code>await webView.EnsureCoreWebView2Async(env);</code>抛出异常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.ArgumentException:</span><br><span class=\"line\">&#x27;WebView2 was already initialized with a different CoreWebView2Environment.</span><br><span class=\"line\">Check to see if the Source property was already set or EnsureCoreWebView2Async was previously called with different values.&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>原因在<a href=\"https://github.com/MicrosoftEdge/WebView2Feedback/issues/2435#issuecomment-1140186931\">WebView2Feedback的这个issue</a>中被提及：<br>在Designer.cs中的InitializeComponent函数里，<code>this.webView.Source = new System.Uri(&quot;about:blank&quot;, System.UriKind.Absolute);</code>会使用默认UDF初始化CoreWebView2Environment。</p>\n<p>而由于上面提到的原因，非Administrator账户运行的vsto没有权限访问默认目录，会初始化错误。此时反倒没有任何问题。<br>但如果用户是Administrator，此时初始化成功。而在后续的InitWhenLoaded时又再次使用userDataFolder来EnsureCoreWebView2Async，导致两次使用的CoreWebView2Environment不一致而报错。</p>\n<p>解决方案：</p>\n<ul>\n<li>【需官方解决】可在webview2控件的属性编辑器中设置Source属性为空<br>当在编辑器中设置Source属性为空时，不设置webView.Source，也就不会使用默认UDF初始化CoreWebView2Environment</li>\n<li>在InitializeComponent中不设置webview.Source<br>注释掉<code>this.webView.Source = new System.Uri(&quot;about:blank&quot;, System.UriKind.Absolute);</code>。<br>但因为Designer.cs是编辑器生成的，所以每次修改界面后都要记得手动注释，这个方案不行。</li>\n<li>try&#x2F;catch EnsureCoreWebView2Async，针对此情况特殊处理<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> env = <span class=\"keyword\">await</span> CoreWebView2Environment.CreateAsync(<span class=\"literal\">null</span>, userDataFolder);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> webView.EnsureCoreWebView2Async(env);</span><br><span class=\"line\">    initWebview();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ex.Message.StartsWith(<span class=\"string\">&quot;WebView2 was already initialized with a different CoreWebView2Environment.&quot;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> webView.EnsureCoreWebView2Async();</span><br><span class=\"line\">        initWebview();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">&quot;EnsureCoreWebView2 error: &quot;</span> + ex.ToString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这样更通用些，虽然判断Exception.Message也不是很优雅，但在官方给出解决方案之前可以先用着。</li>\n</ul>\n<p><strong>多用户</strong></p>\n<p>Excel插件的安装是针对当前用户而不是本机所有用户的。即使Administrator账户安装过，切换至其他用户登录后，如果想使用仍然需要单独安装。</p>\n<p>Webview2 Runtime是安装在本机的，只要随便哪个用户安装过一次，其它用户都能够使用。</p>\n<h2 id=\"webview2使用本地html\"><a href=\"#webview2使用本地html\" class=\"headerlink\" title=\"webview2使用本地html\"></a>webview2使用本地html</h2><p>为了避免多部署一个web服务器，并且要支持不同版本，将html放在本地最合适不过了。</p>\n<p>在经历了<a href=\"https://github.com/MicrosoftEdge/WebView2Feedback/issues/37\">一系列讨论</a>后，webview2对访问本地文件的方式最终定稿在了<a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/reference/win32/icorewebview2_3?view=webview2-1.0.1462.37#setvirtualhostnametofoldermapping\">SetVirtualHostNameToFolderMapping</a>。</p>\n<p><a href=\"https://github.com/microsoft/microsoft-ui-xaml/issues/1967#issuecomment-893621478\">这里</a>有C#的示例代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> myWebview.EnsureCoreWebView2Async(); <span class=\"comment\">// ensure the CoreWebView2 is created</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> core_wv2 = myWebview.CoreWebView2;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (core_wv2 != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    core_wv2.SetVirtualHostNameToFolderMapping(</span><br><span class=\"line\">        <span class=\"string\">&quot;appassets.example&quot;</span>, <span class=\"string\">&quot;assets&quot;</span>,</span><br><span class=\"line\">        Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind.Allow);</span><br><span class=\"line\"></span><br><span class=\"line\">    myWebview.Source = <span class=\"keyword\">new</span> Uri(<span class=\"string\">&quot;https://appassets.example/myVideo.mp4&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加html文件到ClickOnce\"><a href=\"#添加html文件到ClickOnce\" class=\"headerlink\" title=\"添加html文件到ClickOnce\"></a>添加html文件到ClickOnce</h2><h3 id=\"普通应用\"><a href=\"#普通应用\" class=\"headerlink\" title=\"普通应用\"></a>普通应用</h3><p>这里先拿普通桌面应用举例，vsto比较特别，放在后面再看。</p>\n<p>首先将index.html添加进工程，这里需要修改index.html的两个属性：</p>\n<ul>\n<li><a href=\"https://social.technet.microsoft.com/wiki/contents/articles/53248.visual-studio-copying-files-to-debug-or-release-folder.aspx\">复制到输出目录</a></li>\n</ul>\n<p>可选值是不复制，始终复制和如果较新则复制。如果选择不复制，只会影响本地调试，并不会影响ClickOnce发布。</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/build-actions#build-action-values\">生成操作(Build Action)</a></li>\n</ul>\n<p>当选择为“内容”时，vs会自动将文件放至<a href=\"https://learn.microsoft.com/zh-cn/previous-versions/visualstudio/visual-studio-2015/deployment/how-to-specify-which-files-are-published-by-clickonce\">应用程序文件</a>。可在工程的发布页点击<code>应用程序文件</code>按钮打开应用程序对话框(Application Files Dialog Box)查看。</p>\n<img src=\"/blog/2022/12/06/webview2-in-vsto/publish.png\" class=\"\" title=\"发布页\">\n\n<p>注意，不要把index.html的发布状态设为<code>数据文件</code>，设为数据文件后index.html就不在安装路径(Installation Path)，导致webview2访问不到。</p>\n<img src=\"/blog/2022/12/06/webview2-in-vsto/application-files-dialog-box.png\" class=\"\" title=\"应用程序对话框\">\n\n<p>下图是index.html分别为<code>数据文件</code>和<code>包括</code>在客户端安装后的文件树对比，ClickOnce应用的安装路径在<code>%LocalAppData%/Apps/2.0/</code>下。</p>\n<img src=\"/blog/2022/12/06/webview2-in-vsto/compare-include-and-data-file.png\" class=\"\" title=\"客户端的文件树对比\">\n\n<h3 id=\"vsto应用\"><a href=\"#vsto应用\" class=\"headerlink\" title=\"vsto应用\"></a>vsto应用</h3><p>vsto应用虽然在发布页没有这个<code>应用程序文件</code>按钮，</p>\n<img src=\"/blog/2022/12/06/webview2-in-vsto/publish-vsto.png\" class=\"\" title=\"vsto应用的发布页\">\n\n<p>但可以手动修改app manifest，再使用<a href=\"#%E9%99%84%E5%BD%95mage\">Mage</a>签名。</p>\n<p>使用方法可参考<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-include-a-data-file-in-a-clickonce-application\">How to: Include a Data File in a ClickOnce Application</a>，顺便一提，似乎微软的最新文档<a href=\"https://github.com/MicrosoftDocs/visualstudio-docs/blob/main/docs/deployment/how-to-include-a-data-file-in-a-clickonce-application.md\">在github上有一份</a>，这样更方便查找。</p>\n<p>长求总就是：</p>\n<ol>\n<li>修改app manifest（给<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/file-element-clickonce-application#elements-and-attributes\">file标签</a>添加writeableType&#x3D;”applicationData”属性即为更改文件的发布状态为<code>数据文件</code>）</li>\n<li>重新签名app manifest</li>\n<li>更新deployment manifest并重新签名</li>\n<li>将deployment manifest拷贝至app manifest目录下</li>\n</ol>\n<p>在vsto中，app manifest为<code>Application Files\\ExcelAddin_1_0_0_0\\ExcelAddin.dll.manifest</code>，deployment manifest为<code>ExcelAddin.vsto</code>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新签名manifest</span></span><br><span class=\"line\">dotnet mage <span class=\"literal\">-s</span> <span class=\"string\">&quot;Application Files\\ExcelAddin_1_0_0_0\\ExcelAddin.dll.manifest&quot;</span> <span class=\"literal\">-certfile</span> ExcelAddin_ProdKey.pfx <span class=\"literal\">-pwd</span> yourpassword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新签名vsto</span></span><br><span class=\"line\">dotnet mage `</span><br><span class=\"line\">  <span class=\"literal\">-update</span> ExcelAddin.vsto `</span><br><span class=\"line\">  <span class=\"literal\">-appmanifest</span> <span class=\"string\">&quot;Application Files\\ExcelAddin_1_0_0_0\\ExcelAddin.dll.manifest&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-certfile</span> <span class=\"string\">&quot;ExcelAddin_ProdKey.pfx&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-pwd</span> yourpassword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝vsto</span></span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"string\">&quot;ExcelAddin.vsto&quot;</span> <span class=\"string\">&quot;Application Files\\ExcelAddin_1_0_0_0\\ExcelAddin.vsto&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"依旧无法访问\"><a href=\"#依旧无法访问\" class=\"headerlink\" title=\"依旧无法访问\"></a>依旧无法访问</h2><p>在普通应用中，<code>SetVirtualHostNameToFolderMapping</code>的起始目录就是工程的输出目录。</p>\n<p>但在vsto应用中，这个起始目录不知道在哪。虽然<code>Directory.GetCurrentDirectory()</code>得到的是<code>%UserProfile%\\Documents</code>，但把Assets放到Documents下后，webview2仍然无法访问。只能使用绝对路径的<code>file:///</code>。</p>\n<p>在<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/data-in-office-solutions\">Office解决方案中的数据</a>这篇文章中，微软有介绍vsto应用中可用的数据类型，貌似只有xml和数据库文件。</p>\n<p>想把html添加至vsto应用供webview2本地使用的计划似乎破产，只能先放下了，等待机缘。</p>\n<h2 id=\"附录：Mage\"><a href=\"#附录：Mage\" class=\"headerlink\" title=\"附录：Mage\"></a>附录：Mage</h2><p><a href=\"https://learn.microsoft.com/en-us/dotnet/framework/tools/mage-exe-manifest-generation-and-editing-tool\">Mage</a>的全写是Manifest Generation and Editing Tool，在我们手动修改Manifest.xml后，需要用它来重新签名。</p>\n<p>官方说Mage内置在VS中，只要打开<a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell\">Visual Studio Developer Command Prompt or Visual Studio Developer PowerShell</a>就能直接使用。但我打开后却仍然提示找不到Mage命令，找找问题在哪里。</p>\n<h3 id=\"Visual-Studio-Developer-Prompt\"><a href=\"#Visual-Studio-Developer-Prompt\" class=\"headerlink\" title=\"Visual Studio Developer Prompt\"></a>Visual Studio Developer Prompt</h3><p>顺手一提如何在Windows Terminal中使用Visual Studio Developer Prompt。</p>\n<p>Command版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmd.exe /k <span class=\"string\">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat&quot;</span> -<span class=\"built_in\">arch</span>=x64 -host_arch=x64</span><br></pre></td></tr></table></figure>\n\n<p>Powershell版本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell.exe <span class=\"literal\">-NoExit</span> <span class=\"literal\">-Command</span> <span class=\"string\">&quot;&amp;&#123;Import-Module &quot;</span><span class=\"string\">&quot;&quot;</span>C:\\Program Files\\Microsoft Visual Studio\\<span class=\"number\">2022</span>\\Community\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;; Enter-VsDevShell 3f987db8 -SkipAutomaticLocation -DevCmdArguments &quot;</span><span class=\"string\">&quot;&quot;</span><span class=\"literal\">-arch</span>=x64 <span class=\"literal\">-host_arch</span>=x64<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Windows-10-SDK\"><a href=\"#Windows-10-SDK\" class=\"headerlink\" title=\"Windows 10 SDK\"></a>Windows 10 SDK</h3><p>在Visual Studio Installer中，我们可以选择安装Windows 10 SDK ($Version)。</p>\n<p>安装完后，它的安装路径是在<code>C:\\Program Files (x86)\\Windows Kits\\10\\bin\\$Version</code>，这里面有<a href=\"https://learn.microsoft.com/en-us/dotnet/framework/tools/certmgr-exe-certificate-manager-tool\">certmgr.exe</a>等工具。</p>\n<h3 id=\"NET-Framework-SDK\"><a href=\"#NET-Framework-SDK\" class=\"headerlink\" title=\".NET Framework SDK\"></a>.NET Framework SDK</h3><p>在Visual Studio Installer中，我们也可以选择安装.NET $Version Framework SDK。</p>\n<p>安装完后，它的安装路径在<code>C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\</code>下，Mage.exe就在这里。</p>\n<p>然而$PATH里的却是<code>C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\x64</code>，这里面并没有Mage.exe。</p>\n<p>最简单的解决方法是把Mage.exe和MageUI.exe拷贝过去。</p>\n<h3 id=\"真正的解决方法\"><a href=\"#真正的解决方法\" class=\"headerlink\" title=\"真正的解决方法\"></a>真正的解决方法</h3><p>原来在.net 5及以后的版本里，<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/clickonce-deployment-dotnet#mageexe\">Mage.exe被废弃</a>，改用<a href=\"https://github.com/dotnet/deployment-tools/blob/main/Documentation/dotnet-mage/README.md\">dotnet-mage</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet tool install --global microsoft.dotnet.mage</span><br><span class=\"line\">dotnet mage -<span class=\"built_in\">help</span> verbose</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附录：在安装vsto时拷贝文件\"><a href=\"#附录：在安装vsto时拷贝文件\" class=\"headerlink\" title=\"附录：在安装vsto时拷贝文件\"></a>附录：在安装vsto时拷贝文件</h2><p><a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/deploying-an-office-solution-by-using-clickonce?view=vs-2022&tabs=csharp#Put\">这里</a>有一篇如何部署vsto应用的文档，里面有介绍如何在安装和更新vsto时使用<a href=\"https://learn.microsoft.com/en-us/visualstudio/vsto/postactions-element-office-development-in-visual-studio#post-deployment-action-example\">Post-deployment action</a>做文件拷贝的操作。</p>\n<p>我们可以在安装和更新vsto时把静态网页文件拷贝到用户目录里，再使用webview2绝对路径来访问。</p>\n<p><strong>注意</strong></p>\n<ol>\n<li><p>在webview2的使用场景里，需要把微软官方示例中的这两行代码删掉，因为我们不是<code>document-level customizations</code>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ServerDocument.RemoveCustomization(destFile);</span><br><span class=\"line\">ServerDocument.AddCustomization(destFile, deploymentManifestUri);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果<code>postAction</code>抛出异常，vsto会将安装出错的插件卸载，但并不会清除<code>%LocalAppData%/Apps/2.0/</code>下的文件。此时有可能需要手动清除才能恢复正常。</p>\n</li>\n</ol>\n<h2 id=\"附录：客户机安装webview2运行时\"><a href=\"#附录：客户机安装webview2运行时\" class=\"headerlink\" title=\"附录：客户机安装webview2运行时\"></a>附录：客户机安装webview2运行时</h2><p>Webview2运行时的<a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution#understanding-the-options-at-the-runtime-download-page\">安装方式</a>有3种，分别是在线安装，离线安装和指定版本安装。</p>\n<p>通常使用<a href=\"https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/7e516d67-e834-4e72-ae7b-fe18b0ea75bb/MicrosoftEdgeWebView2RuntimeInstallerX64.exe\">离线安装包</a>（安装文件存放在自己服务器上防止外网被墙），可使用命令行参数实现<a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution#offline-deployment\">静默安装</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">MicrosoftEdgeWebView2RuntimeInstallerX64.exe /silent /install</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["excel-add-in"]},{"title":"从常规浏览器跳转至微信内部浏览器","url":"/blog/2018/06/05/weixin-deeplink/","content":"<p>相信大多数手握WAP量的兄逮都会有这个需求，想将在外部投放的广告转化到公众号吸粉。那么我们来探讨一下可能性。</p>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><p>利用微信开放给一些VIP厂商的跳转接口来实现。</p>\n<p>比如京东就是一个大VIP。</p>\n<h3 id=\"获取ticket\"><a href=\"#获取ticket\" class=\"headerlink\" title=\"获取ticket\"></a>获取ticket</h3><p>首先调用京东的请求接口来获取openlink。</p>\n<p><a href=\"http://wq.jd.com/mjgj/link/GetOpenLink?callback=getOpenLink&rurl=http://wq.jd.com/mshop/gethomepage?venderid=123\">http://wq.jd.com/mjgj/link/GetOpenLink?callback=getOpenLink&amp;rurl=http://wq.jd.com/mshop/gethomepage?venderid=123</a></p>\n<p>请求之后的结果类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getOpenLink</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;errcode&quot;</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;openlink&quot;</span>: <span class=\"string\">&quot;weixin://dl/business/?ticket=t56560d3fba95d2601278168445705cb9&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面的<code>weixin://dl/business/?ticket=t56560d3fba95d2601278168445705cb9</code>就是微信跳转的deeplink了。</p>\n<h3 id=\"跳转至微信内部浏览器打开商户域名\"><a href=\"#跳转至微信内部浏览器打开商户域名\" class=\"headerlink\" title=\"跳转至微信内部浏览器打开商户域名\"></a>跳转至微信内部浏览器打开商户域名</h3><p>可以在js中运行重定向来进行跳转：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">loaciton.<span class=\"property\">href</span> = <span class=\"string\">&quot;weixin://dl/business/?ticket=t7ac579f071faadbce4c31fca854b3e59&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里的urlencode只支持类似wq.jd.com的域名。wq.jd.com是京东的微信&#x2F;手Q微店。相信在微信的判断有域名和商户的绑定。</p>\n<h3 id=\"跳转至目标域名，完成目标\"><a href=\"#跳转至目标域名，完成目标\" class=\"headerlink\" title=\"跳转至目标域名，完成目标\"></a>跳转至目标域名，完成目标</h3><p>借助jd.com的域名来做跳转。</p>\n<p>比如京东微店的产品详情。</p>\n<p><a href=\"https://jos.jd.com/api/detail.htm?id=1744\">京东云宙斯的api</a></p>\n<p><a href=\"http://mjbbs.jd.com/thread-61877-1-1.html\">移动端链接转换详细说明</a></p>\n<p><a href=\"http://wqs.jd.com/weidian/index.shtml\">京东微店入口</a></p>\n<h2 id=\"可借助的域名\"><a href=\"#可借助的域名\" class=\"headerlink\" title=\"可借助的域名\"></a>可借助的域名</h2><span id=\"more\"></span>\n\n<h3 id=\"京东商铺资讯模式\"><a href=\"#京东商铺资讯模式\" class=\"headerlink\" title=\"京东商铺资讯模式\"></a>京东商铺资讯模式</h3><p>未完成，待补充</p>\n<h3 id=\"京东达人平台模式\"><a href=\"#京东达人平台模式\" class=\"headerlink\" title=\"京东达人平台模式\"></a>京东达人平台模式</h3><ul>\n<li><p>首先<a href=\"http://dr.jd.com/\">申请一个账号</a>，可以是个人地址</p>\n</li>\n<li><p>然后登陆选择“文章”栏目发布</p>\n</li>\n<li><p>获取文章地址教程 </p>\n<img src=\"/blog/2018/06/05/weixin-deeplink/jd00.png\" class=\"\" title=\"获取文章地址教程\"></li>\n</ul>\n<h3 id=\"微信游戏圈话题模式\"><a href=\"#微信游戏圈话题模式\" class=\"headerlink\" title=\"微信游戏圈话题模式\"></a>微信游戏圈话题模式</h3><ul>\n<li><p><a href=\"https://game.weixin.qq.com/cgi-bin/h5/static/club/html/toggle.html?jsapi=1&appid=wx687f4629ba7c3086&uin=&key=&_a=1#wechat_redirect\">微信打开游戏圈</a></p>\n</li>\n<li><p>选择一个话题打开</p>\n</li>\n<li><p>发表话题，上传二维码</p>\n</li>\n<li><p>右上角的三个圆点，分享好友</p>\n</li>\n<li><p>然后去PC微信客户短打开链接复制即可</p>\n</li>\n</ul>\n<h3 id=\"京东任意图片模式（支持动图）\"><a href=\"#京东任意图片模式（支持动图）\" class=\"headerlink\" title=\"京东任意图片模式（支持动图）\"></a>京东任意图片模式（支持动图）</h3><p><strong>在京东图片制作自己的落地页</strong></p>\n<ol>\n<li><p>打开这个地址<code>http://mjbbs.jd.com/forum.php?mod=forumdisplay&amp;fid=137</code></p>\n</li>\n<li><p>随便点开一个帖子</p>\n</li>\n</ol>\n  <img src=\"/blog/2018/06/05/weixin-deeplink/jd11.png\" class=\"\" title=\"京东帖子\">\n\n<ol start=\"3\">\n<li>点击左上方回复按钮</li>\n</ol>\n  <img src=\"/blog/2018/06/05/weixin-deeplink/jd22.png\" class=\"\" title=\"京东帖子\">\n\n<ol start=\"4\">\n<li>点击高级模式按钮</li>\n</ol>\n  <img src=\"/blog/2018/06/05/weixin-deeplink/jd33.png\" class=\"\" title=\"京东帖子\">\n\n<ol start=\"5\">\n<li>按步骤上传图片，并且插入进去，点击回复主题</li>\n</ol>\n  <img src=\"/blog/2018/06/05/weixin-deeplink/jd44.png\" class=\"\" title=\"京东帖子\">\n\n<ol start=\"6\">\n<li>找到你回复的内容，右键提取图片链接</li>\n</ol>\n  <img src=\"/blog/2018/06/05/weixin-deeplink/jd55.png\" class=\"\" title=\"京东帖子\">\n\n<ol start=\"7\">\n<li>你已经得到一个京东达人的图片链接了</li>\n</ol>\n<p>  <a href=\"http://mjbbs.jd.com/data/attachment/forum/201806/11/170212ym070jwqphzawbrd.jpg\">例子</a></p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p><a href=\"http://www.seoniao.com/\">微信跳转技术</a>这个网站在提供这项服务。</p>\n<p><a href=\"weixin://dl/business/?ticket=t259174b0bd1abfc5e0c16a6515f7a9af#wechat_redirect\">跳转链接示例</a></p>\n<p>我们来拆解下它的演示样例。</p>\n<h3 id=\"获取ticket-1\"><a href=\"#获取ticket-1\" class=\"headerlink\" title=\"获取ticket\"></a>获取ticket</h3><p>首先它提供了一个<a href=\"http://hadaku.cn/jumpfinal/to2.php?token=wtPZxdAM2Z\">演示入口</a>，它会在服务器端获取一个ticket，然后在前端进行跳转。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"regexp\">/(iPhone|iPad|iPod|iOS)/i</span>.<span class=\"title function_\">test</span>(navigator.<span class=\"property\">userAgent</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/ baiduboxapp/i</span>.<span class=\"title function_\">test</span>(navigator.<span class=\"property\">userAgent</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;bdbox://utils?action=sendIntent&amp;minver=7.4&amp;params=%7B%22intent%22%3A%22weixin://dl/business/?ticket=t15bc3836874e3b1e3597f67e143ac610%23Intent%3Bend%22%7D&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;weixin://dl/business/?ticket=t15bc3836874e3b1e3597f67e143ac610&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;weixin://dl/business/?ticket=t15bc3836874e3b1e3597f67e143ac610&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loading&quot;</span>).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;buttons&quot;</span>).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;table-cell&quot;</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跳转至微信内部浏览器并打开合作商户网址\"><a href=\"#跳转至微信内部浏览器并打开合作商户网址\" class=\"headerlink\" title=\"跳转至微信内部浏览器并打开合作商户网址\"></a>跳转至微信内部浏览器并打开合作商户网址</h3><p>截此到本文录入(2018-06-05 15:02)时，<a href=\"http://www.seoniao.com/\">微信跳转技术</a>这个网站的功能已经被关闭了。</p>\n<p>前天还是可用的呢。暂地告一段落。</p>\n<p>找到了<a href=\"http://weixin.ioptis.cn/\">另一个可用的站点</a></p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science","weixin"],"tags":["computer science","weixin","hack"]},{"title":"为什么使用 ReLU","url":"/blog/2017/04/21/why-relu/","content":"<p><a href=\"http://shuokay.com/2016/10/01/why-relu-work/#more\">转载自shuokay的博客</a></p>\n<p>在之前的机器学习和神经网络中, 对于非线性变换&#x2F;激活函数比较常用的是 sigmoid, tanh 等这类比较 smooth 而且 被 bound 住的函数. 然而目前, 在深度学习尤其是卷积神经网络中, 用的最多的是 ReLU 函数. 直观上看, ReLU 是一个分段的线性函数, 因此, 就很容易想到 ReLU 应该不像 sigmoid 和 tanh 等这类 smooth &amp; bounded 的函数那样 powerful, 换句话说, ReLU 的效果应该比较差. 然而, 在实际应用中, ReLU 的效果要比 sigmoid 这类 smooth &amp; bounded 的函数效果要好很多. 经过现实的打脸之后, 不禁要问,底为什么 ReLU 的效果会比 sigmoid 好呢?</p>\n<p>首先还是要明确一下 ReLU 函数：</p>\n<div style=\"margin: 0.5em 0px; display: block!important; text-align: center\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24.835ex\" height=\"6.176ex\" style=\"vertical-align: -2.505ex;\" viewBox=\"0 -1580.7 10692.7 2659.1\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\"><title id=\"MathJax-SVG-1-Title\">ReLU(x)=\\left\\{    \\begin{array}{lr}        x, &amp; x &gt; 0\\\\        0, &amp; x \\leq 0    \\end{array}\\right.</title><defs aria-hidden=\"true\"><path stroke-width=\"1\" id=\"E1-MJMATHI-52\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path><path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path stroke-width=\"1\" id=\"E1-MJMATHI-4C\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path><path stroke-width=\"1\" id=\"E1-MJMATHI-55\" d=\"M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path stroke-width=\"1\" id=\"E1-MJMAIN-2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><path stroke-width=\"1\" id=\"E1-MJSZ3-7B\" d=\"M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\"> <use xlink:href=\"#E1-MJMATHI-52\" x=\"0\" y=\"0\"></use> <use xlink:href=\"#E1-MJMATHI-65\" x=\"759\" y=\"0\"></use> <use xlink:href=\"#E1-MJMATHI-4C\" x=\"1226\" y=\"0\"></use> <use xlink:href=\"#E1-MJMATHI-55\" x=\"1907\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-28\" x=\"2675\" y=\"0\"></use> <use xlink:href=\"#E1-MJMATHI-78\" x=\"3064\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-29\" x=\"3637\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-3D\" x=\"4304\" y=\"0\"></use><g transform=\"translate(5360,0)\"> <use xlink:href=\"#E1-MJSZ3-7B\"></use><g transform=\"translate(917,0)\"><g transform=\"translate(-11,0)\"><g transform=\"translate(0,650)\"> <use xlink:href=\"#E1-MJMATHI-78\" x=\"0\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-2C\" x=\"572\" y=\"0\"></use></g><g transform=\"translate(0,-750)\"> <use xlink:href=\"#E1-MJMAIN-30\" x=\"0\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-2C\" x=\"500\" y=\"0\"></use></g></g><g transform=\"translate(1840,0)\"><g transform=\"translate(0,650)\"> <use xlink:href=\"#E1-MJMATHI-78\" x=\"0\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-3E\" x=\"850\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-30\" x=\"1906\" y=\"0\"></use></g><g transform=\"translate(0,-750)\"> <use xlink:href=\"#E1-MJMATHI-78\" x=\"0\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-2264\" x=\"850\" y=\"0\"></use> <use xlink:href=\"#E1-MJMAIN-30\" x=\"1906\" y=\"0\"></use></g></g></g></g></g></svg></div>\n\n<p>ReLU的输出要么是0，要么是输入本身，极其简单。如果没有实验结果打脸，那么，我第一反应就是这个函数太简单，根本学不到什么东西。但是，实验结果的打脸促使进一步的思考，为什么ReLU如此简单，却可以真正work。而且, 其效果还要比sigmoid、tanh等这些传统的经典激活函数好.<br>可以类比一下 Boost 算法, 把 ReLU 看成是一个分段的, 用来 separate 数据的函数, 而不是一个去真正的拟合某个函数. 在机器学习中, 数据集都是有限的, 所以, 通过去分割数据空间, 只要分割的次数足够多, 那么, 总是可以得到正确的分割结果.</p>\n<img src=\"/blog/2017/04/21/why-relu/relu-fold.png\" class=\"\" title=\"ReLU Fold\">\n\n<p>类似上图, 每一次 ReLU 操作都相当于一次折纸操作, 经过学习之后, 网络仅仅通过这种折纸操作就可以学习”对称”这个概念. 最终, 使用一个比较简单的分类器就可以把 ×× 和 ∘∘ 分开<br>在下图中, 说明了神经网络中是怎么随着网络层数加深, 最终, 可以通过一个比较简单的函数实现分类.</p>\n<img src=\"/blog/2017/04/21/why-relu/fold.png\" class=\"\" title=\"Fold\">\n\n<p>只要进行足够多次数的折叠, 或者说, 在神经网络中有足够多的层数, 那么, 使用 ReLU 函数, 也可以近似任意的函数, 而且, 如果我们在最后一层使用一个 smooth 的函数, 那么, 整个神经网络就是一个真正的 smooth function approximator. 然而, 在实际中, 并不需要一个太 smooth 的 function approximator, 因为这容易导致 overfitting. 我们需要的是是在 test 数据集上表现好的模型, 即要找的是 generalization 能力比较好的 approximator. 而 ReLU 这种仅仅 separate 样本空间的的函数, 其本身自带 regularization 能力, 所以, 其泛化能力更强一些. 因此, ReLU 是一个 reasonable 而且上佳的选择.<br>从这个角度讲, 即使在全链接进行分类的最后几层, 使用 ReLU 激活函数也是非常 reasonable 的.</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["computer science","machine learning"],"tags":["computer science","machine learning"]},{"title":"Win10文件夹共享之更换登录用户名","url":"/blog/2021/01/11/win10-share-memo-net-use/","content":"<h2 id=\"问题描述与复现路径\"><a href=\"#问题描述与复现路径\" class=\"headerlink\" title=\"问题描述与复现路径\"></a>问题描述与复现路径</h2><p>在映射网络文件夹时，有时会出现错误：指定的网络文件夹目前是以其他用户名和密码进行映射的。要和其他用户名和密码进行连接，首先请断开所有现有连接到该网络共享的映射。</p>\n<img src=\"/blog/2021/01/11/win10-share-memo-net-use/error.png\" class=\"\" title=\"错误提示\">\n\n<p>问题出现原因是我们更换了登录用户名，比如之前使用的是本地用户，访问的是everyone都可以读取的文件夹。但现在想写入权限，所以使用了网络邻居提供的用户名。</p>\n<p>在创建映射时，选中“使用其他凭据连接”。</p>\n<img src=\"/blog/2021/01/11/win10-share-memo-net-use/another-credi.png\" class=\"\" title=\"使用其他凭据连接\">\n\n<p>选择“使用其他账户”，输入网络邻居提供的用户名和密码。</p>\n<img src=\"/blog/2021/01/11/win10-share-memo-net-use/another-account.png\" class=\"\" title=\"使用其他账户\">\n\n<p>输入新的用户名和密码后，就出现了上面的错误。这是因为被映射的网络共享文件夹所在的机器给不同的共享文件夹设置了不同的用户访问权限，而目前连接的机器与被映射的机器已经用另一个用户建立了连接，从而导致了此错误。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用net use命令来断开已有连接。</p>\n<p>首先查看当前已建立的连接：</p>\n<img src=\"/blog/2021/01/11/win10-share-memo-net-use/net-use.png\" class=\"\" title=\"当前已建立的连接\">\n\n<p>取消已建立的连接：</p>\n<img src=\"/blog/2021/01/11/win10-share-memo-net-use/net-use-delete.png\" class=\"\" title=\"取消已建立的连接\">\n\n<p>再次使用其他凭据连接创建映射，就可以正常创建了。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>"},{"title":"windows下的证书","url":"/blog/2022/11/25/windows-certificate/","content":"<p>数字证书本身就不用过多的解释了，参见<a href=\"https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89\">维基百科</a>。</p>\n<p>数字证书最常用的格式标准是<a href=\"https://zh.wikipedia.org/wiki/X.509\">X.509</a>。windows上也是使用的X.509。</p>\n<h2 id=\"常见的文件格式\"><a href=\"#常见的文件格式\" class=\"headerlink\" title=\"常见的文件格式\"></a>常见的文件格式</h2><ul>\n<li>der</li>\n</ul>\n<p>der的全写是Distinguished Encoding Rules(<a href=\"https://en.wikipedia.org/wiki/X.690#DER_encoding\">唯一编码规则</a>)，是<a href=\"https://zh.wikipedia.org/wiki/ASN.1\">ASN.1</a>标准中定义的一种二进制编码方式。</p>\n<ul>\n<li>pem</li>\n</ul>\n<p>pem的全写是Privacy-Enhanced Mail(<a href=\"https://zh.wikipedia.org/wiki/Pem%E6%A0%BC%E5%BC%8F\">隐私增强型电子邮件格式</a>)，主要在<a href=\"https://www.rfc-editor.org/rfc/rfc1422\">RFC 1422</a>定义。为了方便der通过电子邮件传输，采用了base64编码。</p>\n<p>pem格式并不约束存放的内容，也可以用来存放私钥、根证书甚至证书签名请求(比如<a href=\"https://jamielinux.com/docs/openssl-certificate-authority/create-the-intermediate-pair.html\">这里</a>)。</p>\n<p>可以从注释中看出里面保存的是什么内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-----BEGIN &#123;TYPE&#125;-----</span><br><span class=\"line\">-----END &#123;TYPE&#125;-----</span><br></pre></td></tr></table></figure>\n<p>列几个常见的<code>TYPE</code>：</p>\n<ol>\n<li>RSA PRIVATE KEY</li>\n<li>PRIVATE KEY</li>\n<li>PUBLIC KEY</li>\n<li>NEW CERTIFICATE REQUEST</li>\n</ol>\n<ul>\n<li>pfx</li>\n</ul>\n<p>pfx的全写是Personal Information Exchange，是微软的<a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/install/personal-information-exchange---pfx--files\">个人信息交换</a>文件格式。</p>\n<p>因为太过复杂而被诟病，后被<a href=\"https://zh.wikipedia.org/wiki/RSA_%E5%AE%89%E5%85%A8\">RSA实验室</a>提出的<a href=\"https://zh.wikipedia.org/wiki/PKCS_12\">PKCS #12</a>替代。</p>\n<ul>\n<li>PKCS #12</li>\n</ul>\n<p>PKCS #12是<a href=\"https://zh.wikipedia.org/wiki/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A0%87%E5%87%86\">公钥密码学标准</a>中的个人消息交换标准，用于实现存储许多加密对象在一个单独的文件中。通常用它来打包一个私钥及有关的X.509证书，或者打包信任链的全部项目。</p>\n<ul>\n<li>PKCS #7</li>\n</ul>\n<p>PKCS #7是<a href=\"https://zh.wikipedia.org/wiki/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A0%87%E5%87%86\">公钥密码学标准</a>中的密码消息语法标准，在<a href=\"https://www.rfc-editor.org/rfc/rfc2315\">RFC 2315</a>中定义。规范了以<a href=\"https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E5%9F%BA%E7%A4%8E%E5%BB%BA%E8%A8%AD\">公开密钥基础设施</a>（PKI）所产生之签名&#x2F;密文之格式。其目的一样是为了拓展数字证书的应用，其中，包含了<a href=\"https://zh.wikipedia.org/wiki/S/MIME\">S&#x2F;MIME</a>和<a href=\"https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax\">CMS</a>。</p>\n<p>java天生支持PKCS #7，通常使用.keystore扩展名。</p>\n<h2 id=\"常见的扩展名\"><a href=\"#常见的扩展名\" class=\"headerlink\" title=\"常见的扩展名\"></a>常见的扩展名</h2><ul>\n<li>.der</li>\n</ul>\n<p>使用der标准编码的二进制文件。</p>\n<ul>\n<li>.pem</li>\n</ul>\n<p>通常就是base64编码的der。需要结合文件名来判断存放的内容。比如cert.pem一般是公钥，key.pem是私钥。</p>\n<ul>\n<li>.key</li>\n</ul>\n<p>pem格式的私钥。</p>\n<ul>\n<li>.cer, .crt</li>\n</ul>\n<p>通常是pem格式的公钥。有时候也可能是der格式的公钥。</p>\n<ul>\n<li>.pfx</li>\n</ul>\n<p>保留了微软pfx格式的扩展名，但通常使用的是PKCS #12格式。</p>\n<ul>\n<li>.keystore, .p7b</li>\n</ul>\n<p>PKCS #7格式的文件。其中，java天生支持.keystore。</p>\n<h2 id=\"windows下的证书工具\"><a href=\"#windows下的证书工具\" class=\"headerlink\" title=\"windows下的证书工具\"></a>windows下的证书工具</h2><h3 id=\"certmgr-msc（证书管理单元）\"><a href=\"#certmgr-msc（证书管理单元）\" class=\"headerlink\" title=\"certmgr.msc（证书管理单元）\"></a>certmgr.msc（证书管理单元）</h3><p>注意区分certmgr<code>.msc</code>和certmgr<code>.exe</code>。</p>\n<p>certmgr.msc会打开<strong>当前用户</strong>的证书。它属于mmc（Microsoft管理控制台）的一部分。</p>\n<h3 id=\"mmc-exe（Microsoft管理控制台）\"><a href=\"#mmc-exe（Microsoft管理控制台）\" class=\"headerlink\" title=\"mmc.exe（Microsoft管理控制台）\"></a>mmc.exe（Microsoft管理控制台）</h3><p>进入mmc后，需要先添加证书管理单元。</p>\n<p>在添加时，需要选择证书管理单元的管理账户。分为我的用户账户、服务账户和计算机账户。</p>\n<p>如果选择我的用户账户，即和certmgr.msc完全一致。</p>\n<h3 id=\"certmgr-exe（证书管理器工具）\"><a href=\"#certmgr-exe（证书管理器工具）\" class=\"headerlink\" title=\"certmgr.exe（证书管理器工具）\"></a>certmgr.exe（证书管理器工具）</h3><p><a href=\"https://learn.microsoft.com/zh-cn/dotnet/framework/tools/certmgr-exe-certificate-manager-tool\">certmgr.exe</a>在安装Visual Studio时会被顺带安装。它的路径通常在<code>C:\\Program Files (x86)\\Windows Kits\\10\\bin\\&#123;Version&#125;\\x64\\certmgr.exe</code>，无运行依赖，可以单独拷贝至其它电脑上运行。</p>\n<p>它可以用来将证书<a href=\"https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-add-a-trusted-publisher-to-a-client-computer-for-clickonce-applications\">添加到受信任的发布者</a>。<br><strong>使用管理员权限</strong>运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">certmgr.exe <span class=\"literal\">-add</span> ExcelAddin_ProdKey.cer <span class=\"literal\">-c</span> <span class=\"literal\">-s</span> <span class=\"literal\">-r</span> localMachine TrustedPublisher</span><br></pre></td></tr></table></figure>\n<p>即可将公钥添加到受信任的发布者。</p>\n<p><strong>注意</strong>，如果是自签证书，需要<strong>同时添加根证书</strong>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">certmgr.exe <span class=\"literal\">-add</span> ExcelAddin_ProdKey.cer <span class=\"literal\">-c</span> <span class=\"literal\">-s</span> <span class=\"literal\">-r</span> localMachine Root</span><br></pre></td></tr></table></figure>\n\n<p><code>ExcelAddin_ProdKey.cer</code>可为der格式也可为pem格式，<code>certmgr.exe</code>都支持。</p>\n<h3 id=\"Powershell-Cmdlet\"><a href=\"#Powershell-Cmdlet\" class=\"headerlink\" title=\"Powershell Cmdlet\"></a>Powershell Cmdlet</h3><p>Powershell提供了很多证书相关的Cmdlet，如</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/powershell/module/pki/new-selfsignedcertificate\">New-SelfSignedCertificate</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate\">Export-PfxCertificate</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-pfxcertificate\">Get-PfxCertificate</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/powershell/module/pki/export-certificate\">Export-Certificate</a></li>\n</ul>\n<p>来实现新建证书、导出证书、获取证书信息等等。</p>\n<h3 id=\"openssl\"><a href=\"#openssl\" class=\"headerlink\" title=\"openssl\"></a>openssl</h3><p><a href=\"https://www.openssl.org/docs/man3.0/man1/openssl.html\">openssl</a>就不用多说啦，最通用的证书工具。</p>\n<h2 id=\"证书操作\"><a href=\"#证书操作\" class=\"headerlink\" title=\"证书操作\"></a>证书操作</h2><h3 id=\"创建自签证书\"><a href=\"#创建自签证书\" class=\"headerlink\" title=\"创建自签证书\"></a>创建自签证书</h3><p>首先生成自签名证书，保存在windows证书存储区里。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cert</span> = <span class=\"built_in\">New-SelfSignedCertificate</span> `</span><br><span class=\"line\">  <span class=\"literal\">-Type</span> Custom `</span><br><span class=\"line\">  <span class=\"literal\">-Subject</span> <span class=\"string\">&quot;CN=Tasty Pub&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-CertStoreLocation</span> Cert:\\CurrentUser\\My `</span><br><span class=\"line\">  <span class=\"literal\">-KeyUsage</span> DigitalSignature `</span><br><span class=\"line\">  <span class=\"literal\">-KeyAlgorithm</span> RSA <span class=\"literal\">-KeyLength</span> <span class=\"number\">2048</span> `</span><br><span class=\"line\">  <span class=\"literal\">-NotAfter</span> (<span class=\"built_in\">Get-Date</span>).AddMonths(<span class=\"number\">36</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后将证书导出成pfx文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"string\">&quot;yourpassword&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$securePassword</span> = <span class=\"built_in\">ConvertTo-SecureString</span> <span class=\"literal\">-String</span> <span class=\"variable\">$password</span> <span class=\"literal\">-Force</span> <span class=\"literal\">-AsPlainText</span></span><br><span class=\"line\"><span class=\"comment\"># 如果担心忘记密码，也可以将密码设成空：</span></span><br><span class=\"line\"><span class=\"variable\">$emptyPassword</span> = <span class=\"built_in\">New-Object</span> System.Security.SecureString</span><br><span class=\"line\"><span class=\"variable\">$outname</span> = <span class=\"string\">&quot;./tastypub.pfx&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">Export-PfxCertificate</span> `</span><br><span class=\"line\">  <span class=\"literal\">-Cert</span> <span class=\"variable\">$cert</span> `</span><br><span class=\"line\">  <span class=\"literal\">-FilePath</span> <span class=\"variable\">$outname</span> `</span><br><span class=\"line\">  <span class=\"literal\">-Password</span> <span class=\"variable\">$emptyPassword</span> `</span><br><span class=\"line\">  <span class=\"literal\">-ChainOption</span> EndEntityCertOnly `</span><br><span class=\"line\">  <span class=\"literal\">-NoProperties</span> <span class=\"literal\">-Verbose</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从pfx里导出cer公钥\"><a href=\"#从pfx里导出cer公钥\" class=\"headerlink\" title=\"从pfx里导出cer公钥\"></a>从pfx里导出cer公钥</h3><p>想要从pfx里导出cer公钥，可直接使用Export-Certificate：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-PfxCertificate</span> <span class=\"literal\">-FilePath</span> ExcelAddin_ProdKey.pfx | </span><br><span class=\"line\"><span class=\"built_in\">Export-Certificate</span> <span class=\"literal\">-FilePath</span> ExcelAddin_ProdKey.cer <span class=\"literal\">-Type</span> CERT</span><br></pre></td></tr></table></figure>\n<p>注意这里<a href=\"https://learn.microsoft.com/en-us/powershell/module/pki/export-certificate\">Export-Certificate</a>导出的是der格式。</p>\n<p>也可使用<a href=\"https://www.openssl.org/docs/man3.0/man1/openssl.html\">openssl</a>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 <span class=\"operator\">-in</span> ExcelAddin_ProdKey.pfx <span class=\"literal\">-out</span> ExcelAddin_ProdKey.crt <span class=\"literal\">-nokeys</span> <span class=\"literal\">-clcerts</span></span><br></pre></td></tr></table></figure>\n<p>openssl默认导出的是pem格式。</p>\n<p>der和pem可以<a href=\"https://knowledge.digicert.com/solution/SO26449.html\">用openssl任意转换</a>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl x509 <span class=\"literal\">-inform</span> der <span class=\"operator\">-in</span> ExcelAddin_ProdKey.cer <span class=\"literal\">-out</span> ExcelAddin_ProdKey.<span class=\"number\">1</span>.pem</span><br><span class=\"line\">openssl x509 <span class=\"literal\">-outform</span> der <span class=\"operator\">-in</span> ExcelAddin_ProdKey.<span class=\"number\">1</span>.pem <span class=\"literal\">-out</span> ExcelAddin_ProdKey.<span class=\"number\">1</span>.cer</span><br><span class=\"line\">fc.exe ExcelAddin_ProdKey.cer ExcelAddin_ProdKey.<span class=\"number\">1</span>.cer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过openssl创建自签证书\"><a href=\"#通过openssl创建自签证书\" class=\"headerlink\" title=\"通过openssl创建自签证书\"></a>通过openssl创建自签证书</h3><p>也可以通过openssl生成pfx。</p>\n<p>首先要确认openssl.cnf是否存在，为了统一，我们直接创建一个：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Invoke-WebRequest</span> <span class=\"string\">&#x27;http://web.mit.edu/crypto/openssl.cnf&#x27;</span> <span class=\"literal\">-OutFile</span> ./openssl.cnf</span><br></pre></td></tr></table></figure>\n\n<p>首先使用<a href=\"https://www.openssl.org/docs/man3.0/man1/openssl-req.html\">openssl-req</a>生成一个私钥和公钥：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req `</span><br><span class=\"line\">  <span class=\"literal\">-config</span> <span class=\"string\">&quot;./openssl.cnf&quot;</span> `</span><br><span class=\"line\">  <span class=\"literal\">-x509</span> <span class=\"literal\">-newkey</span> rsa:<span class=\"number\">4096</span> `</span><br><span class=\"line\">  <span class=\"literal\">-nodes</span> `</span><br><span class=\"line\">  <span class=\"literal\">-keyout</span> ExcelAddin_New.key `</span><br><span class=\"line\">  <span class=\"literal\">-out</span> ExcelAddin_New.crt `</span><br><span class=\"line\">  <span class=\"literal\">-days</span> <span class=\"number\">1080</span> `</span><br><span class=\"line\">  <span class=\"literal\">-subj</span> /CN=<span class=\"string\">&quot;Tasty Pub&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后使用<a href=\"https://www.openssl.org/docs/man3.0/man1/openssl-pkcs12.html\">openssl-pkcs12</a>基于私钥和公钥生成pfx：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"string\">&quot;yourpassword&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$emptyPassword</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">openssl pkcs12 `</span><br><span class=\"line\">  <span class=\"literal\">-export</span> `</span><br><span class=\"line\">  <span class=\"literal\">-out</span> ExcelAddin_New.pfx `</span><br><span class=\"line\">  <span class=\"literal\">-inkey</span> ExcelAddin_New.key `</span><br><span class=\"line\">  <span class=\"operator\">-in</span> ExcelAddin_New.crt `</span><br><span class=\"line\">  <span class=\"literal\">-password</span> pass:<span class=\"variable\">$emptyPassword</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["windows"]},{"title":"Nintendo Switch模拟器yuzu","url":"/blog/2023/02/15/yuzu-emu/","content":"<p>说到switch模拟器，目前首推<a href=\"https://github.com/yuzu-emu/yuzu\">C++写的</a>的<a href=\"https://yuzu-emu.org/\">yuzu</a>。</p>\n<p><a href=\"https://github.com/Ryujinx/Ryujinx\">C#写的</a>的老大哥<a href=\"https://ryujinx.org/\">Ryujinx</a>兼容性好，但运行速度还是稍慢。</p>\n<h2 id=\"Early-Access\"><a href=\"#Early-Access\" class=\"headerlink\" title=\"Early Access\"></a>Early Access</h2><p>它提供免费版，以及付费的<a href=\"https://yuzu-emu.org/help/early-access/\">Early Access版</a>。付费版拥有更多功能。</p>\n<p>感谢好人<a href=\"https://github.com/Kryptuq\">Kryptuq</a>，他有发行<a href=\"https://github.com/Kryptuq/Yuzu-Early-Access-files/releases\">自己编译的EA版</a>。</p>\n<h2 id=\"缺少组件\"><a href=\"#缺少组件\" class=\"headerlink\" title=\"缺少组件\"></a>缺少组件</h2><p>下载解压后直接运行<code>yuzu.exe</code>，会提示缺少组件：密钥、固件和游戏。</p>\n<img src=\"/blog/2023/02/15/yuzu-emu/missing-component.png\" class=\"\" title=\"缺少组件\">\n\n<h2 id=\"配置文件目录\"><a href=\"#配置文件目录\" class=\"headerlink\" title=\"配置文件目录\"></a>配置文件目录</h2><p>yuzu的配置文件目录可以从<code>文件 -&gt; 打开 yuzu 文件夹</code>进入。</p>\n<img src=\"/blog/2023/02/15/yuzu-emu/yuzu-folder.png\" class=\"\" title=\"yuzu文件夹\">\n\n<p>它的读取顺序先是与yuzu.exe同目录下的<code>./user</code>，然后再是<code>$Env:AppData/yuzu</code>。</p>\n<p>密钥、固件、按键、显示等所有设置都是保存在配置文件目录里的，妥善保存<code>./user</code>目录就可以做到便携式。</p>\n<h2 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h2><p>密钥是用来解码游戏的，包括<code>Prod.keys</code>和<code>Title.keys</code>，需要<a href=\"https://yuzu-emu.org/help/quickstart/#dumping-prodkeys-and-titlekeys\">从switch真机上抽取转储</a>。</p>\n<p>感谢<a href=\"https://prodkeys.net/\">prod.keys</a>，它直接提供了<a href=\"https://prodkeys.net/yuzu-prod-keys/\">yuzu密钥的下载</a>。需要注意，密钥和固件需要版本匹配，比如均为v15.0.1。</p>\n<p>下载解压后，将两个.keys文件拷贝至<code>./user/keys/</code>目录下即可。</p>\n<h2 id=\"固件\"><a href=\"#固件\" class=\"headerlink\" title=\"固件\"></a>固件</h2><p>虽然yuzu不要求一定要有固件，但有些游戏会要求新固件，所以最好还是装一下。</p>\n<p>惯例，官方推荐的方式仍然是<a href=\"https://yuzu-emu.org/help/quickstart/#dumping-system-update-firmware\">从switch真机上抽取转储</a>。</p>\n<p>再次感谢<a href=\"https://prodkeys.net/\">prod.keys</a>，它也直接提供了<a href=\"https://prodkeys.net/yuzu-firmware/\">yuzu固件的下载</a>。需要注意，密钥和固件需要版本匹配，比如均为v15.0.1。</p>\n<p>下载解压后，将所有的.nca文件拷贝至<code>./user/nand/system/Contents/registered/</code>目录下即可。</p>\n<h2 id=\"获取游戏\"><a href=\"#获取游戏\" class=\"headerlink\" title=\"获取游戏\"></a>获取游戏</h2><p><a href=\"https://yuzu-emu.org/wiki/faq/#how-do-i-get-games\">官方推荐的获取游戏方式</a>只有一个，就是<a href=\"https://yuzu-emu.org/help/quickstart/#dumping-cartridge-games\">从自己的卡带提取转储</a>。</p>\n<p>但很明显这不现实，我们用模拟器玩ns不是因为想在PC上玩，而是因为没有卡带<del>（其实就是因为穷）</del>。</p>\n<p>游戏下载可以去这几个地方：</p>\n<ul>\n<li><a href=\"https://nxbrew.com/\">nxbrew</a></li>\n<li><a href=\"https://nsw2u.com/\">nsw2u</a></li>\n<li><a href=\"https://romspure.cc/roms/switch\">rowspure</a></li>\n<li><a href=\"http://www.yuzuroms.tk/\">yuzuroms</a></li>\n<li><a href=\"https://www.switch618.com/\">switch618</a>。</li>\n</ul>\n<h3 id=\"rom格式\"><a href=\"#rom格式\" class=\"headerlink\" title=\"rom格式\"></a>rom格式</h3><p>switch游戏的rom格式有两种：xci和nsp。</p>\n<p>xci是直接从卡带提取的文件；</p>\n<p>nsp则相当于数字版游戏，对应到真机就是从eshop里下载后的内容。</p>\n<p>这两种格式的文件用在破解后的switch真机上会有区别，用在模拟器上基本没区别。</p>\n<p>可能还会有一种nsz，其实就是把多个nsp打包在了一起。</p>\n<h2 id=\"系统设置\"><a href=\"#系统设置\" class=\"headerlink\" title=\"系统设置\"></a>系统设置</h2><p>下载完后，默认系统设置中的语言为英语，地区为美国，我们需要改成中文和中国。</p>\n<p>如果游戏中有时间的概念，比如早晚和四季，也可以在这里修改系统时间。</p>\n<img src=\"/blog/2023/02/15/yuzu-emu/system-config.png\" class=\"\" title=\"系统设置\">\n\n<p>更多使用教程可以参见B站<a href=\"https://space.bilibili.com/66958652\">一花の一界</a>写的<a href=\"https://www.bilibili.com/read/cv15405863\">yuzu模拟器安装使用教程(持续更新)</a>。</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"在命令行快速切换目录","url":"/blog/2021/11/19/z-jump-around/","content":"<p>首先介绍一下<a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pushd\">pushd</a>和<a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/popd\">popd</a>，在Windows Command Prompt与Linux Bash中都默认支持。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">TEMP</span>&gt;<span class=\"title\">pushd</span> .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">C</span>:\\<span class=\"title\">TEMP</span>&gt;<span class=\"title\">cd</span> &quot;\\<span class=\"title\">Documents</span> <span class=\"title\">and</span> <span class=\"title\">Settings</span>\\<span class=\"title\">user</span>\\<span class=\"title\">Desktop</span>&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">C</span>:\\<span class=\"title\">Documents</span> <span class=\"title\">and</span> <span class=\"title\">Settings</span>\\<span class=\"title\">user</span>\\<span class=\"title\">Desktop</span>&gt;<span class=\"title\">popd</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">C</span>:\\<span class=\"title\">TEMP</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>从名称与示例中可以直接看出它的用法，同时它支持嵌套。</p>\n<p>但pushd和popd的功能还是太简单，不能大幅提升效率。</p>\n<p><strong>隆重推出本期佳软：<a href=\"https://github.com/rupa/z\">z</a>。</strong></p>\n<p>z的原理非常简单，它hack了cd命令，维护记录用户cd的目录列表，以频率和访问时间排序。</p>\n<p>原版只支持bash，windows下可使用PowerShell的<a href=\"https://github.com/badmotorfinger/z\">移植版</a>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt;<span class=\"built_in\">Install-Module</span> z <span class=\"literal\">-AllowClobber</span> <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt;z des(press Tab)</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt;z <span class=\"string\">&#x27;C:\\Users\\user\\Desktop&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果提示脚本权限问题，需要先设置<a href=\"https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2\">PowerShell执行策略</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt;<span class=\"built_in\">Set-ExecutionPolicy</span> <span class=\"literal\">-ExecutionPolicy</span> RemoteSigned</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\&gt;<span class=\"built_in\">Install-Module</span> z</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["善用佳软"]},{"title":"人力vocaloid","url":"/blog/2022/04/04/%E4%BA%BA%E5%8A%9Bvocaloid/","content":"<p><a href=\"https://zh.moegirl.org.cn/%E4%BA%BA%E5%8A%9BVOCALOID\">人力vocaloid</a>是通过对原素材声音进行调音达到让原素材唱歌的目的。</p>\n<p>大体可以分为以下几个步骤：</p>\n<h2 id=\"一、选曲\"><a href=\"#一、选曲\" class=\"headerlink\" title=\"一、选曲\"></a>一、选曲</h2><p>选择一个和素材相匹配的曲子（伴奏）是很重要的。</p>\n<h3 id=\"伴奏下载网站\"><a href=\"#伴奏下载网站\" class=\"headerlink\" title=\"伴奏下载网站\"></a>伴奏下载网站</h3><ul>\n<li><a href=\"http://5sing.kugou.com/index.html\">5sing</a></li>\n</ul>\n<h3 id=\"伴奏预处理软件\"><a href=\"#伴奏预处理软件\" class=\"headerlink\" title=\"伴奏预处理软件\"></a>伴奏预处理软件</h3><ul>\n<li><p>曲速测定软件<br>MixMeister BPM Analyzer</p>\n</li>\n<li><p>自制伴奏软件<br>iZotope RX 7 Audio Editor（选择Music Rebalance，根据需要选择消除Voice&#x2F;人声或者提取Voice&#x2F;人声）</p>\n</li>\n</ul>\n<h2 id=\"二、扒谱\"><a href=\"#二、扒谱\" class=\"headerlink\" title=\"二、扒谱\"></a>二、扒谱</h2><p>一般可以将原曲拖到FL水果里面进行扒谱，也就是制作调音所需要的midi文件。</p>\n<p>偷懒的方法是可以对着简谱或者五线谱扒。</p>\n<p>还有更偷懒的方法是到<a href=\"https://www.midishow.com/\">midishow网</a>下载。</p>\n<h2 id=\"三、填词\"><a href=\"#三、填词\" class=\"headerlink\" title=\"三、填词\"></a>三、填词</h2><p>如果是二创，通常都会替换歌词。</p>\n<ul>\n<li>押韵可以参考<a href=\"https://yayun.la/\">押韵助手</a>。</li>\n</ul>\n<h2 id=\"四、-调音\"><a href=\"#四、-调音\" class=\"headerlink\" title=\"四、*调音\"></a>四、*调音</h2><p>调音是人力V的重中之重了。</p>\n<p>通常会使用两个软件，<a href=\"\">UTAU</a>和<a href=\"\">melodyne</a>。</p>\n<h3 id=\"UTAU\"><a href=\"#UTAU\" class=\"headerlink\" title=\"UTAU\"></a>UTAU</h3><p>UTAU的优势是一旦有音源之后，出作品速度快，劣势就是需要音源。</p>\n<p>常见的音源分享：</p>\n<ul>\n<li>B站<code>小编白译</code>的<a href=\"https://www.bilibili.com/read/cv363982\">音源配布整理</a>。</li>\n</ul>\n<p>没有分享的音源就要靠自己去原素材里一个一个往下扒，保存成wav文件。原音源没有的字需要自己拼。</p>\n<p>拼音源教程：</p>\n<ul>\n<li>B站<code>某只泽</code>的<a href=\"https://www.bilibili.com/video/BV1Xt411275k\">【UTAU教程】UTAU超好用！【应该是完结了】</a></li>\n<li>B站<code>某只泽</code>的<a href=\"https://www.bilibili.com/video/BV1Fa4y1J7Ts\">【UTAU鬼畜向教程】 暑期特训</a></li>\n<li>B站<code>大白熊呀大白熊</code>的专栏<a href=\"https://space.bilibili.com/9090390/article\">大白熊UTAU人力V教程</a></li>\n<li>B站<code>Z杰洛X</code>开放的<a href=\"https://t.bilibili.com/387661647904163660\">ust包</a></li>\n</ul>\n<h3 id=\"Melodyne\"><a href=\"#Melodyne\" class=\"headerlink\" title=\"Melodyne\"></a>Melodyne</h3><p>Melodyne的优势就是及时没有音源的新素材也可以拿来调音。</p>\n<p>Melodyne教程：</p>\n<ul>\n<li>B站<code>夜游之夜魔</code>的专栏<a href=\"https://www.bilibili.com/read/readlist/rl102164\">Melodyne式人力简明教程</a></li>\n<li>B站<code>夜游之夜魔</code>的<a href=\"https://www.bilibili.com/video/av3180474\">【巡山指南】Melodyne人力V教程</a></li>\n</ul>\n<h2 id=\"五、混音\"><a href=\"#五、混音\" class=\"headerlink\" title=\"五、混音\"></a>五、混音</h2><ul>\n<li>B站上的<a href=\"https://www.bilibili.com/video/av30105222\">【混音教程】Waves9中文视频教程</a></li>\n</ul>\n<h2 id=\"六、PV\"><a href=\"#六、PV\" class=\"headerlink\" title=\"六、PV\"></a>六、PV</h2><p>剪辑视频一般用Adobe的PR或者SONY VEGAS。</p>\n<p>需要加入特效时则需要使用AE或者VEGAS EFFECTS。</p>\n<ul>\n<li><p>PR转场预设文件可以在B站上搜索的到，很多UP上传。</p>\n</li>\n<li><p>VEGAS插件NEWBLUE非常好用。</p>\n</li>\n<li><p>AE建议从套用模板开始。可参考知乎上<a href=\"https://www.zhihu.com/question/30888588/answer/201586157\">问题“有哪些免费的AE模板网站？”的回答</a>。</p>\n</li>\n<li><p>一般只有MP4格式才可以导入以上软件编辑，可以利用<a href=\"https://maruko.appinn.me/\">小丸工具箱</a>的封装功能将其他格式（如FLV）转成MP4格式。</p>\n</li>\n</ul>\n<h2 id=\"七、封面\"><a href=\"#七、封面\" class=\"headerlink\" title=\"七、封面\"></a>七、封面</h2><p>好的封面是成功的一半，一般用Adobe PS进行制作。</p>\n<p>B站常用字体颜色为红白（详见生活区TOP吃播视频封面）。</p>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>如果只是简单的使用，可以到<a href=\"https://izihun.com/art-edit/\">字魂网的在线生成器</a>输入自己想要的文字及效果，然后下载PNG格式的文件就可以了（具体使用规则请参照网站说明）。</p>\n<p>注意，如果需要推广获利，则需要<a href=\"https://izihun.com/pay/pay-vip-v2.html\">购买字体授权</a>。</p>\n<p>国内还有一家<a href=\"https://xiquezaozi.taobao.com/\">喜鹊造字</a>也可以看看。这两家比较类似，口号都是：<code>要让所有人用得起正版字体</code>。</p>\n<h2 id=\"八、压制\"><a href=\"#八、压制\" class=\"headerlink\" title=\"八、压制\"></a>八、压制</h2><p>一般渲染之后的比较大，B站会进行压缩，可能会导致画质的降低。</p>\n<p>建议用以上提到的<a href=\"https://maruko.appinn.me/\">小丸工具箱</a>进行压制后上传。（小丸工具箱可以在几乎不牺牲原有画质的前提下将文件变小，具体原理不清楚）</p>\n<link rel=\"stylesheet\" href=\"/blog/css/spoiler.css\" type=\"text/css\"><script src=\"/blog/js/spoiler.js\" type=\"text/javascript\" async></script>","tags":["vocaloid"]}]